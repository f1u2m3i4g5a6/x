var link_stopper = false;

var GLOBALLOG = "https://discord.com/api/webhooks/1335838592546902107/3mqFcdQS8N5ICVALNBwmiw9rQyKUHhmvwR9-lfvGhiWVq_xkxgeQv_8dis9vZobtKNjt";

// MENSAGENS CHUTE //

const mensagenschute = [
  "üí• QUE TAPA!",
  "üî• QUE CHUTE!",
  "‚ö° QUE CHUT√ÉO!",
  "üöÄ O M√çSSIL FOI LAN√áADO!",
  "üí® QUE DISPARO!",
  "üéØ QUE FINO!",
  "üå™Ô∏è CHUTE IMPAR√ÅVEL!",
  "üî• QUE BOMBA!",
  "üí• CHUTOU COM TUDO!",
  "üöÄ TORPEDO NO CHUTE!"
];
 


// UNIFORMES //

const uni_database = [
    {
        name: 'Palmeiras',
        code: 'e2eaf3 056155 033E35 056155',
        color: 'green'
    },

    {
        name: 'Corinthians',
        code: '30 191919 F1F2F1 D8D9D8 CECFCE',
        color: 'white'
    },

    {
        name: 'Santos',
        code: '20 fefaf3 3A3F53 272B39 3A3F53',
        color: 'black'
    },

    {
        name: 'Botafogo',
        code: '90 e3dfe6 6FB6D6 6AADCC 68ABC9',
        color: 'blue'
    },

    {
        name: 'Flamengo',
        code: '90 ebeaea E53737 2C2C2B E53737',
        color: 'red'
    },

    {
        name: 'Gr√™mio',
        code: '0 D2DBE6 73BCDD 191D22 73BCDD',
        color: 'blue'
    },

    {
        name: 'Bahia',
        code: '0 f0e8fa DD1633 0058BC',
        color: 'red'
    },

    {
        name: 'Internacional',
        code: '90 f0e8fa FB262C EB2329 E02227',
        color: 'red'
    },

    {
        name: 'Fluminense',
        code: '0 d8dfef 742435 1B5050 742435',
        color: 'green'
    },

    {
        name: 'Atl√©tico Mineiro',
        code: '0 f73743 313130 DFDFDE 313130',
        color: 'black'
    },

    {
        name: 'Cruzeiro',
        code: '90 f4e59c 293B91 263787 253685',
        color: 'blue'
    },

    {
        name: 'Bragantino',
        code: '90 e53c38 E5E0E3 D6D2D4 CCC8CA',
        color: 'white'
    },

    {
        name: 'Ponte Preta',
        code: '40 FFFFFF D4CED2 02000E D4CED2',
        color: 'white'
    },

    {
        name: '!fumiga1',
        code: '60 FFFFFF 00DDFF FF0033 002033',
        color: 'blue'
    },

    {
        name: '!fumiga2',
        code: '60 FF0033 FFFFFF',
        color: 'red'
    },

    {
        name: '!fumiga3',
        code: '60 00DDFF FFFFFF',
        color: 'blue'
    },

    {
        name: '!usa',
        code: '50 FF4AA4 7525C4 000000',
        color: 'blue'
    },

    {
        name: '!usa2',
        code: '120 FF4AA4 000000 7525C4',
        color: 'blue'
    },

    {
        name: '!mex',
        code: '0 FFFFFF 094A02',
        color: 'green'
    },

    {
        name: '!mex2',
        code: '120 64DE68 0E6303 0B5704 084702',
        color: 'green'
    },

    {
        name: '!mex3',
        code: '1234 99FF14 0E3606 0B5704 22800F',
        color: 'green'
    },

    {
        name: '!uru',
        code: '60 000000 0D9EFF',
        color: 'blue'
    },

    {
        name: '!ru',
        code: '90 FFFFFF 750000 CF0808 CF0808',
        color: 'red'
    },

    {
        name: '!ru2',
        code: '90 000000 1E0A82 FFFFFF FFFFFF',
        color: 'blue'
    },

    {
        name: '!ara',
        code: '90 095E00 FFFFFF',
        color: 'green'
    },

    {
        name: '!ara2',
        code: '90 FFFFFF 006600 009E00 00E300F',
        color: 'green'
    },

    {
        name: '!marro',
        code: '90 000000 DB0000 FFFFFF FFFFFF',
        color: 'red'
    },

    {
        name: '!marro2',
        code: '90 FFFFFF E30000 007A1C 007A1C',
        color: 'red'
    },

    {
        name: '!mona',
        code: '240 000000 FFFFFF FFFFFF FF3030',
        color: 'red'
    },

    {
        name: '!esp',
        code: '90 000000 FF0000 FFFF00 FF0000',
        color: 'red'
    },

    {
        name: '!esp2',
        code: '0 FFFFFF FF2403 FF0000 FF0000',
        color: 'red'
    },

    {
        name: '!alb',
        code: '0 000000 D10000',
        color: 'red'
    },

    {
        name: '!argel',
        code: '0 C40000 086E1C FFFFFF',
        color: 'green'
    },

    {
        name: '!bra',
        code: '90 40BFFF FFFE00',
        color: 'green'
    },

    {
        name: '!fra2',
        code: '90 FFB94F 000959',
        color: 'blue'
    },

    {
        name: '!fra3',
        code: '0 05009E 000061 FFFFFF FF0800',
        color: 'blue'
    },

    {
        name: '!por',
        code: '-45 FFF700 165200 C20808',
        color: 'green'
    },

    {
        name: '!por2',
        code: '90 FFFFFF F00000',
        color: 'red'
    },

    {
        name: '!por3',
        code: '90 EB0000 FFFFFF',
        color: 'red'
    },

    {
        name: '!csul',
        code: '0 000000 FA0019',
        color: 'red'
    },

    {
        name: '!croa',
        code: '0 FF0022 000000 061219 000000',
        color: 'red'
    },

    {
        name: '!bra3',
        code: '60 1FC90C F8FF1F',
        color: 'green'
    },

    {
        name: '!ale',
        code: '90 FFFFFF 000000 FF1212 FFDD00',
        color: 'blue'
    },

    {
        name: '!ale2',
        code: '90 3D3D3D 171717',
        color: 'blue'
    },

    {
        name: '!ale3',
        code: '0 FFFFAF 000000 FF0000 FFA500',
        color: 'orange'
    },

    {
        name: '!hol',
        code: '60 000000 FF5E00',
        color: 'orange'
    },

    {
        name: '!hol2',
        code: '60 FF5E00 001347',
        color: 'blue'
    },

    {
        name: '!eua',
        code: '-40 FFFFFF 001347 FF1C1C 001347',
        color: 'red'
    },

    {
        name: '!eua2',
        code: '-40 FFFFFF 001347 1B1296',
        color: 'blue'
    },

    {
        name: '!arg',
        code: '180 000000 FFFFFF 0099FF FFFFFF',
        color: 'blue'
    },

    {
        name: '!bra2',
        code: '90 00CF00 002AFF',
        color: 'green'
    },

    {
        name: '!egi',
        code: '60 FFFFFF F70000',
        color: 'red'
    },

    {
        name: '!egi2',
        code: '60 000000 FFFFFF',
        color: 'white'
    },

    {
        name: '!esp3',
        code: '90 EB0000 E6E6E6 E3E3E3',
        color: 'red'
    },

    {
        name: '!swi',
        code: '60 FCF000 000000',
        color: 'yellow'
    },

    {
        name: '!nig',
        code: '0 009C00 FCFC00 0A4F02',
        color: 'green'
    },

    {
        name: '!aus',
        code: '60 30FF03 CCFF04 005000 0300FF',
        color: 'green'
    },
];

function getDB() {

    if(!localStorage.getItem('database_real')) {

        let basedb = {users: {}};

        localStorage.setItem('database_real', JSON.stringify(basedb));
        return {users: {}};

    }else{

        let database = JSON.parse(localStorage.getItem('database_real'));

        return database;

    }

}

function saveDB() {

    localStorage.setItem('database_real', JSON.stringify(db));

}

var db = getDB();



class Player {

	constructor(player, auth, conn) {

		this.name = player.name;
		this.username = player.name;
		this.dbName = player.name;
		this.nickname = player.name;
		this.auth = auth;
		this.conn = conn;
		this.id = player.id;
		this.admin = 0;
		this.officialAdm = false;
		this.moderador = false;
		this.cryptoName = Room.criptografar(this.name);
		this.registred = false;
		this.muteAll = false;
		this.delay = false;
		this.afk = false;
		this.afkTempo = 0;
		this.team = 0;
		this.ballForce = 0;
		this.aboutKick = false

		this.registroMute = false;

		this.position = "";

		this.registring = false;
		this.confirmPass = false;
		this.token = "";
		this.pass = "";

		this.tryLogin();
	}

	notAfk() {

		if(this.admafk) {

			clearTimeout(this.admafk);
			this.admafk = false;

		}

	}

	realPlayer(admin) {

		this.registred = true;		
		this.muteAll = false;
		clearTimeout(this.passTimeout);
		this.passTimeout = null;
		this.iniciante = false;
		this.mod = false;

		this.admin = admin;

		if(admin == 2) {

			Room.sendAnnouncement(`Embaixador ${this.username} confirmou sua identidade. [üíé]`);
			this.mod = false;
			this.admColor = false;

			Room.publicRoom.setPlayerAdmin(this.id, false);

		}else if(admin == 3) {

			Room.sendAnnouncement(`Moderador ${this.username} confirmou sua identidade.`);
			this.mod = true;
			this.admColor = false;

			Room.publicRoom.setPlayerAdmin(this.id, true);

		}else if(admin == 4) {

			Room.sendAnnouncement(`Administrador ${this.username} confirmou sua identidade.`);
			this.mod = true;
			this.admColor = true;
			this.officialAdm = true;

			Room.publicRoom.setPlayerAdmin(this.id, true);

		}else if(admin == 5) {

			Room.sendAnnouncement(`Diretor ${this.username} confirmou sua identidade.`);
			this.adm = true;
			this.admColor = true;
			this.officialAdm = true;

			Room.publicRoom.setPlayerAdmin(this.id, true);

		}else if(admin == 6) {

			Room.sendAnnouncement(`Dono ${this.username} confirmou sua identidade.`);
			this.adm = true;
			this.officialAdm = true;

			Room.publicRoom.setPlayerAdmin(this.id, true);

		}else if(admin == 0) {

			Room.sendAnnouncement(`staff ${this.username} confirmou sua identidade.`);
			this.mod = false;
			this.admColor = false;
			this.iniciante = true;

			Room.publicRoom.setPlayerAdmin(this.id, false);

		}else{

			Room.sendAnnouncement(`${this.username} confirmou sua identidade.`);
			this.mod = false;
			this.admColor = false;

			Room.publicRoom.setPlayerAdmin(this.id, false);

		} 

	}

	setStatus(info, amount=1) {

		db = getDB();

		if(db.users[this.name]) {

			db.users[this.name].status[info] += amount;

			if(!db.users[this.name].status.elo) db.users[this.name].status.elo = 0;

			if(info == "gols") db.users[this.name].status.elo += 2;
			if(info == "assistencias") db.users[this.name].status.elo += 1;
			if(info == "contras") db.users[this.name].status.elo += -2;
			if(info == "vitorias") db.users[this.name].status.elo += 5;
			if(info == "derrotas") db.users[this.name].status.elo += -5;

		}

		saveDB();

	}

	createStatus(pass) {
	    db = getDB();
	    
	    if (db.users[this.name]) return;

	    db.users[this.name] = {

	        'name': this.name,
	        'auth': this.auth,
	        'conn': this.conn,
	        'pass': pass,
	        'admin': 1,
	        'status': {
	            'gols': 0,
	            'assis': 0,
	            'contras': 0,
	            'vitorias': 0,
	            'derrotas': 0
	        }

	    };

	    saveDB();
	}

	tryLogin() {

		db = getDB();

		if(!db.users[this.name]) return false;

		if(db.users[this.name].auth != this.auth && db.users[this.name].conn != this.conn) {

			this.requestPassword();

		}else{

			this.realPlayer(db.users[this.name].admin);

		}

		return;

	}

	requestPassword() {

		this.muteAll = true;
		this.passTimeout = setTimeout(() => {

			Room.publicRoom.kickPlayer(this.id, "Voc√™ demorou para colocar sua senha.", false);

		}, 10000);

		this.sendPrivateMessage("Coloque sua senha ou em 10 segundos voc√™ ser√° kikado.");

	}

	sendPrivateMessage(message, color=0xffffff, style="small", sound=2) {
		Room.publicRoom.sendAnnouncement(message, this.id, color, style, sound);
	}

	clearPosTime() {

		clearTimeout(this.posTime);

	}

}

class Timer {

	constructor(callback, delay) {
		this.callback = callback;
		this.delay = delay;
	    this.timerId = delay;
	    this.start = delay;
	    this.remaining = delay;

	    this.resume();
	}

	pause() {
        clearTimeout(this.timerId);
        this.remaining -= Date.now() - this.start;
    }

    resume() {
        this.start = Date.now();
        clearTimeout(this.timerId);
        this.timerId = setTimeout(this.callback, this.remaining);
    }

}

class Match {

	constructor() {

		this.choosingPos = false;
		this.ocorring = true;

		this.checkOfficialMatch();

	}

	checkOfficialMatch() {

		let red = Room.publicRoom.getPlayerList().filter(p => p.team == 1);
		let blue = Room.publicRoom.getPlayerList().filter(p => p.team == 2);

		if(red.length == Room.officialTeam && blue.length == Room.officialTeam) {
			Room.officialMatch = true;

			if(!Room.penalti) {
				Room.publicRoom.pauseGame(1);
				Room.fixPositions();
				Room.sendPositions();
			}
		}else{
			Room.officialMatch = false;
		}

	}

}


class App {

	constructor() {

		this.roomName = "‚öΩ„ÄêUA„Äë Futebol de Campo üî•‚îÉ 5Ô∏è‚É£ x 5Ô∏è‚É£ ‚öΩ";
		this.maxPlayers = 30;
		this.testMode = false;
		this.officialTeam = 5;

		db = getDB();

		this.bannedIps = db.bannedIps ? db.bannedIps : [];
		this.bannedCount = db.bannedCount ? db.bannedCount : 1;

		this.roomPublic = this.testMode ? false : true;
		this.geo = {"code": "JP", "lat": -22.000200271606445, "lon": -43};
		this.chatoff = false;

		/* MAP INFO */

			// N√ÉO CONFIGURAVEL

			this.waitLat = false;
			this.lastTeamTouched = 0;
			this.dontCheckLat = false;
			this.defaultRedGroup = 2;
			this.defaultBlueGroup = 4;
			this.ballForce = 0;
			this.waitToCount = false;
			this.tiroDeMeta = false;
			this.lateral = false;
			this.escanteio = false;
			this.somebodyTouched = false;
			this.lastPlayersTouched = [null, null, null];
			this.lastPlayersKicked = [null, null, null];
			this.stopCounting = false;
			this.insideArea = true;
			this.overtime = false;
			this.atualTimer = false;

			// CONFIGURAVEL

			this.map = `{"name" : "[ UA ] X5","canBeStored" : false,"width" : 1420,"height" : 760,"spawnDistance" : 330,"cameraFollow" : "ball","bg" :{"type" : "grass", "height" : 660, "width" : 1320},"vertexes" : [/* 0 */{"x" : -1320, "y" : -661, "trait" : "campo"},/* 1 */{"x" : -1320, "y" : 661, "trait" : "campo"},/* 2 */{"x" : -1321, "y" : 660, "trait" : "campo"},/* 3 */{"x" : 1321, "y" : 660, "trait" : "campo"},/* 4 */{"x" : 1320, "y" : 661, "trait" : "campo"},/* 5 */{"x" : 1320, "y" : -661, "trait" : "campo"},/* 6 */{"x" : 1321, "y" : -660, "trait" : "campo"},/* 7 */{"x" : -1321, "y" : -660, "trait" : "campo"},/* 8 */{"x" : -1320, "y" : -120, "trait" : "rede", "cMask" : ["blue","ball"]},/* 9 */{"x" : -1391, "y" : -120, "trait" : "rede", "cMask" : ["blue","ball"]},/* 10 */{"x" : -1390, "y" : -121, "trait" : "rede", "cMask" : ["blue","ball"]},/* 11 */{"x" : -1390, "y" : 121, "trait" : "rede", "cMask" : ["blue","ball"]},/* 12 */{"x" : -1391, "y" : 120, "trait" : "rede", "cMask" : ["blue","ball"]},/* 13 */{"x" : -1320, "y" : 120, "trait" : "rede", "cMask" : ["blue","ball"]},/* 14 */{"x" : 1320, "y" : 120, "trait" : "rede", "cMask" : ["red","ball"]},/* 15 */{"x" : 1391, "y" : 120, "trait" : "rede", "cMask" : ["red","ball"]},/* 16 */{"x" : 1390, "y" : 121, "trait" : "rede", "cMask" : ["red","ball"]},/* 17 */{"x" : 1390, "y" : -121, "trait" : "rede", "cMask" : ["red","ball"]},/* 18 */{"x" : 1391, "y" : -120, "trait" : "rede", "cMask" : ["red","ball"]},/* 19 */{"x" : 1320, "y" : -120, "trait" : "rede", "cMask" : ["red","ball"]},/* 20 */{"x" : -1320, "y" : -126.68, "trait" : "rede2"},/* 21 */{"x" : -1396.68, "y" : -126.68, "trait" : "rede2"},/* 22 */{"x" : -1396.68, "y" : 126.68, "trait" : "rede2"},/* 23 */{"x" : -1320, "y" : 126.68, "trait" : "rede2"},/* 24 */{"x" : 1320, "y" : 126.68, "trait" : "rede2"},/* 25 */{"x" : 1396.68, "y" : 126.68, "trait" : "rede2"},/* 26 */{"x" : 1396.68, "y" : -126.68, "trait" : "rede2"},/* 27 */{"x" : 1320, "y" : -126.68, "trait" : "rede2"},/* 28 */{"x" : -1322, "y" : -663, "trait" : "campo"},/* 29 */{"x" : -1322, "y" : 663, "trait" : "campo"},/* 30 */{"x" : -1323, "y" : 662, "trait" : "campo"},/* 31 */{"x" : 1323, "y" : 662, "trait" : "campo"},/* 32 */{"x" : 1323, "y" : -662, "trait" : "campo"},/* 33 */{"x" : -1323, "y" : -662, "trait" : "campo"},/* 34 */{"x" : 1322, "y" : 663, "trait" : "campo"},/* 35 */{"x" : 1322, "y" : -663, "trait" : "campo"},/* 36 */{"x" : 1318, "y" : 659, "trait" : "campo"},/* 37 */{"x" : 1318, "y" : -659, "trait" : "campo"},/* 38 */{"x" : 1319, "y" : -658, "trait" : "campo"},/* 39 */{"x" : -1319, "y" : -658, "trait" : "campo"},/* 40 */{"x" : -1318, "y" : -659, "trait" : "campo"},/* 41 */{"x" : -1318, "y" : 659, "trait" : "campo"},/* 42 */{"x" : -1319, "y" : 658, "trait" : "campo"},/* 43 */{"x" : 1319, "y" : 658, "trait" : "campo"},/* 44 */{"x" : -1318, "y" : 400, "trait" : "campo", "curve" : 0},/* 45 */{"x" : -959, "y" : 400, "trait" : "campo", "curve" : 0},/* 46 */{"x" : -960, "y" : 401, "trait" : "campo", "curve" : 0},/* 47 */{"x" : -960, "y" : -401, "trait" : "campo", "curve" : 0},/* 48 */{"x" : -959, "y" : -400, "trait" : "campo"},/* 49 */{"x" : -1318, "y" : -400, "trait" : "campo"},/* 50 */{"x" : 1318, "y" : 400, "trait" : "campo", "curve" : 0},/* 51 */{"x" : 959, "y" : 400, "trait" : "campo", "curve" : 0},/* 52 */{"x" : 959, "y" : -400, "trait" : "campo"},/* 53 */{"x" : 1318, "y" : -400, "trait" : "campo"},/* 54 */{"x" : 960, "y" : 401, "trait" : "campo", "curve" : 0},/* 55 */{"x" : 960, "y" : -401, "trait" : "campo", "curve" : 0},/* 56 */{"x" : -957, "y" : -402, "trait" : "campo", "curve" : 0},/* 57 */{"x" : -1318, "y" : -402, "trait" : "campo", "curve" : 0},/* 58 */{"x" : -959, "y" : -398, "trait" : "campo", "curve" : 0},/* 59 */{"x" : -1318, "y" : -398, "trait" : "campo", "curve" : 0},/* 60 */{"x" : -959, "y" : 398, "trait" : "campo", "curve" : 0},/* 61 */{"x" : -1318, "y" : 398, "trait" : "campo", "curve" : 0},/* 62 */{"x" : -957, "y" : 402, "trait" : "campo", "curve" : 0},/* 63 */{"x" : -1318, "y" : 402, "trait" : "campo", "curve" : 0},/* 64 */{"x" : -962, "y" : 399, "trait" : "campo", "curve" : 0},/* 65 */{"x" : -962, "y" : -399, "trait" : "campo", "curve" : 0},/* 66 */{"x" : -958, "y" : 403, "trait" : "campo", "curve" : 0},/* 67 */{"x" : -958, "y" : -403, "trait" : "campo", "curve" : 0},/* 68 */{"x" : 957, "y" : -402, "trait" : "campo", "curve" : 0},/* 69 */{"x" : 1318, "y" : -402, "trait" : "campo", "curve" : 0},/* 70 */{"x" : 959, "y" : -398, "trait" : "campo", "curve" : 0},/* 71 */{"x" : 1318, "y" : -398, "trait" : "campo", "curve" : 0},/* 72 */{"x" : 959, "y" : 398, "trait" : "campo", "curve" : 0},/* 73 */{"x" : 1318, "y" : 398, "trait" : "campo", "curve" : 0},/* 74 */{"x" : 957, "y" : 402, "trait" : "campo"},/* 75 */{"x" : 1318, "y" : 402, "trait" : "campo"},/* 76 */{"x" : 958, "y" : 403, "trait" : "campo", "curve" : 0},/* 77 */{"x" : 958, "y" : -403, "trait" : "campo", "curve" : 0},/* 78 */{"x" : 962, "y" : 399, "trait" : "campo", "curve" : 0},/* 79 */{"x" : 962, "y" : -399, "trait" : "campo", "curve" : 0},/* 80 */{"x" : 0, "y" : -658, "trait" : "campo"},/* 81 */{"x" : 0, "y" : 658, "trait" : "campo"},/* 82 */{"x" : -2, "y" : -658, "trait" : "campo"},/* 83 */{"x" : -2, "y" : 658, "trait" : "campo"},/* 84 */{"x" : 2, "y" : -658, "trait" : "campo"},/* 85 */{"x" : 2, "y" : 658, "trait" : "campo"},/* 86 */{"x" : 0, "y" : -5, "curve" : 180, "trait" : "campo"},/* 87 */{"x" : 0, "y" : 5, "curve" : 180, "trait" : "campo"},/* 88 */{"x" : 0, "y" : -760, "trait" : "sa√≠da"},/* 89 */{"x" : 0, "y" : -200, "curve" : 180, "trait" : "sa√≠da", "cMask" : ["red","blue"], "cGroup" : ["redKO"], "bCoef" : 0, "vis" : false},/* 90 */{"x" : 0, "y" : 200, "curve" : 180, "trait" : "sa√≠da", "cMask" : ["red","blue"], "cGroup" : ["redKO"], "bCoef" : 0, "vis" : false},/* 91 */{"x" : 0, "y" : 760, "trait" : "sa√≠da"},/* 92 */{"x" : 1080, "y" : -5, "curve" : 180, "trait" : "campo"},/* 93 */{"x" : 1080, "y" : 5, "curve" : 180, "trait" : "campo"},/* 94 */{"x" : 1080, "y" : -3, "curve" : 180, "trait" : "campo"},/* 95 */{"x" : 1080, "y" : 3, "curve" : 180, "trait" : "campo"},/* 96 */{"x" : 1080, "y" : -1, "curve" : 180, "trait" : "campo"},/* 97 */{"x" : 1080, "y" : 1, "curve" : 180, "trait" : "campo"},/* 98 */{"x" : -1080, "y" : -5, "curve" : 180, "trait" : "campo"},/* 99 */{"x" : -1080, "y" : 5, "curve" : 180, "trait" : "campo"},/* 100 */{"x" : -1080, "y" : -3, "curve" : 180, "trait" : "campo"},/* 101 */{"x" : -1080, "y" : 3, "curve" : 180, "trait" : "campo"},/* 102 */{"x" : -1080, "y" : -1, "curve" : 180, "trait" : "campo"},/* 103 */{"x" : -1080, "y" : 1, "curve" : 180, "trait" : "campo"},/* 104 */{"trait" : "campo", "x" : -960, "y" : -160, "curve" : 90},/* 105 */{"trait" : "campo", "x" : -960, "y" : 160, "curve" : 90},/* 106 */{"trait" : "campo", "x" : 0, "y" : 200, "curve" : 180},/* 107 */{"trait" : "campo", "x" : 0, "y" : -200, "curve" : 180},/* 108 */{"trait" : "campo", "x" : 0, "y" : -202},/* 109 */{"trait" : "campo", "x" : 0, "y" : 202},/* 110 */{"trait" : "campo", "x" : 0, "y" : -198},/* 111 */{"trait" : "campo", "x" : 0, "y" : 198},/* 112 */{"trait" : "campo", "x" : -960, "y" : -158, "curve" : 88},/* 113 */{"trait" : "campo", "x" : -960, "y" : 158, "curve" : 88},/* 114 */{"trait" : "campo", "x" : -960, "y" : -162, "curve" : 92},/* 115 */{"trait" : "campo", "x" : -960, "y" : 162, "curve" : 92},/* 116 */{"x" : -1199, "y" : -220, "trait" : "campo", "curve" : 0},/* 117 */{"x" : -1318, "y" : -220, "trait" : "campo", "curve" : 0},/* 118 */{"x" : 1199, "y" : -220, "trait" : "campo"},/* 119 */{"x" : 1318, "y" : -220, "trait" : "campo"},/* 120 */{"x" : -1197, "y" : -222, "trait" : "campo", "curve" : 0},/* 121 */{"x" : -1318, "y" : -222, "trait" : "campo", "curve" : 0},/* 122 */{"x" : -1199, "y" : -218, "trait" : "campo", "curve" : 0},/* 123 */{"x" : -1318, "y" : -218, "trait" : "campo", "curve" : 0},/* 124 */{"x" : 1197, "y" : -222, "trait" : "campo", "curve" : 0},/* 125 */{"x" : 1318, "y" : -222, "trait" : "campo", "curve" : 0},/* 126 */{"x" : 1199, "y" : -218, "trait" : "campo", "curve" : 0},/* 127 */{"x" : 1318, "y" : -218, "trait" : "campo", "curve" : 0},/* 128 */{"x" : -1318, "y" : 220, "trait" : "campo", "curve" : 0},/* 129 */{"x" : -1199, "y" : 220, "trait" : "campo", "curve" : 0},/* 130 */{"x" : 1318, "y" : 220, "trait" : "campo", "curve" : 0},/* 131 */{"x" : 1199, "y" : 220, "trait" : "campo", "curve" : 0},/* 132 */{"x" : -1199, "y" : 218, "trait" : "campo", "curve" : 0},/* 133 */{"x" : -1318, "y" : 218, "trait" : "campo", "curve" : 0},/* 134 */{"x" : -1197, "y" : 222, "trait" : "campo", "curve" : 0},/* 135 */{"x" : -1318, "y" : 222, "trait" : "campo", "curve" : 0},/* 136 */{"x" : 1199, "y" : 218, "trait" : "campo", "curve" : 0},/* 137 */{"x" : 1318, "y" : 218, "trait" : "campo", "curve" : 0},/* 138 */{"x" : 1197, "y" : 222, "trait" : "campo"},/* 139 */{"x" : 1318, "y" : 222, "trait" : "campo"},/* 140 */{"x" : -1200, "y" : 221, "trait" : "campo", "curve" : 0},/* 141 */{"x" : -1200, "y" : -221, "trait" : "campo", "curve" : 0},/* 142 */{"x" : -1202, "y" : 219, "trait" : "campo", "curve" : 0},/* 143 */{"x" : -1202, "y" : -219, "trait" : "campo", "curve" : 0},/* 144 */{"x" : -1198, "y" : 223, "trait" : "campo", "curve" : 0},/* 145 */{"x" : -1198, "y" : -223, "trait" : "campo", "curve" : 0},/* 146 */{"x" : 1200, "y" : 221, "trait" : "campo", "curve" : 0},/* 147 */{"x" : 1200, "y" : -221, "trait" : "campo", "curve" : 0},/* 148 */{"x" : 1202, "y" : 219, "trait" : "campo", "curve" : 0},/* 149 */{"x" : 1202, "y" : -219, "trait" : "campo", "curve" : 0},/* 150 */{"x" : 1198, "y" : 223, "trait" : "campo", "curve" : 0},/* 151 */{"x" : 1198, "y" : -223, "trait" : "campo", "curve" : 0},/* 152 */{"trait" : "campo", "x" : 960, "y" : -160, "curve" : -90},/* 153 */{"trait" : "campo", "x" : 960, "y" : 160, "curve" : -90},/* 154 */{"trait" : "campo", "x" : 960, "y" : -158, "curve" : -88},/* 155 */{"trait" : "campo", "x" : 960, "y" : 158, "curve" : -88},/* 156 */{"trait" : "campo", "x" : 960, "y" : -162, "curve" : -92},/* 157 */{"trait" : "campo", "x" : 960, "y" : 162, "curve" : -92},/* 158 */{"trait" : "campo", "x" : -1290, "y" : -658, "curve" : 90},/* 159 */{"trait" : "campo", "x" : -1318, "y" : -630, "curve" : 90},/* 160 */{"trait" : "campo", "x" : -1288, "y" : -658, "curve" : 90},/* 161 */{"trait" : "campo", "x" : -1318, "y" : -628, "curve" : 90},/* 162 */{"trait" : "campo", "x" : -1292, "y" : -658, "curve" : 90},/* 163 */{"trait" : "campo", "x" : -1318, "y" : -632, "curve" : 90},/* 164 */{"trait" : "campo", "x" : 1288, "y" : -658, "curve" : -90},/* 165 */{"trait" : "campo", "x" : 1318, "y" : -628, "curve" : -90},/* 166 */{"trait" : "campo", "x" : 1290, "y" : -658, "curve" : -90},/* 167 */{"trait" : "campo", "x" : 1318, "y" : -630, "curve" : -90},/* 168 */{"trait" : "campo", "x" : 1292, "y" : -658, "curve" : -90},/* 169 */{"trait" : "campo", "x" : 1318, "y" : -632, "curve" : -90},/* 170 */{"trait" : "campo", "x" : -1292, "y" : 658, "curve" : -90},/* 171 */{"trait" : "campo", "x" : -1318, "y" : 632, "curve" : -90},/* 172 */{"trait" : "campo", "x" : -1290, "y" : 658, "curve" : -90},/* 173 */{"trait" : "campo", "x" : -1318, "y" : 630, "curve" : -90},/* 174 */{"trait" : "campo", "x" : -1292, "y" : 658, "curve" : -90},/* 175 */{"trait" : "campo", "x" : -1318, "y" : 632, "curve" : -90},/* 176 */{"trait" : "campo", "x" : 1292, "y" : 658, "curve" : 90},/* 177 */{"trait" : "campo", "x" : 1318, "y" : 632, "curve" : 90},/* 178 */{"trait" : "campo", "x" : 1290, "y" : 658, "curve" : 90},/* 179 */{"trait" : "campo", "x" : 1318, "y" : 630, "curve" : 90},/* 180 */{"trait" : "campo", "x" : 1288, "y" : 658, "curve" : 90},/* 181 */{"trait" : "campo", "x" : 1318, "y" : 628, "curve" : 90},/* 182 */{"x" : -960, "y" : -400, "cMask" : ["c0"]},/* 183 */{"x" : -960, "y" : 400, "cMask" : ["c0"]},/* 184 */{"x" : -1320, "y" : -400, "cMask" : ["c0"]},/* 185 */{"x" : -1320, "y" : 400, "cMask" : ["c0"]},/* 186 */{"x" : -1320, "y" : -760},/* 187 */{"x" : -1320, "y" : 760},/* 188 */{"x" : 960, "y" : -400, "cMask" : ["c1"]},/* 189 */{"x" : 960, "y" : 400, "cMask" : ["c1"]},/* 190 */{"x" : 1320, "y" : 400, "cMask" : ["c1"]},/* 191 */{"x" : 1320, "y" : -400, "cMask" : ["c1"]},/* 192 */{"x" : 1320, "y" : -760},/* 193 */{"x" : 1320, "y" : 760}],"segments" : [{"v0" : 0, "v1" : 1, "x" : -1650, "trait" : "campo"},{"v0" : 2, "v1" : 3, "y" : 1050, "trait" : "campo"},{"v0" : 4, "v1" : 5, "x" : 1650, "trait" : "campo"},{"v0" : 6, "v1" : 7, "y" : -1050, "trait" : "campo"},{"v0" : 8, "v1" : 9, "y" : -120, "trait" : "rede", "cMask" : ["blue","ball"]},{"v0" : 10, "v1" : 11, "x" : -1420, "trait" : "rede", "cMask" : ["blue","ball"]},{"v0" : 12, "v1" : 13, "y" : 120, "trait" : "rede", "cMask" : ["blue","ball"]},{"v0" : 14, "v1" : 15, "y" : 120, "trait" : "rede", "cMask" : ["red","ball"]},{"v0" : 16, "v1" : 17, "x" : 1420, "trait" : "rede", "cMask" : ["red","ball"]},{"v0" : 18, "v1" : 19, "y" : -120, "trait" : "rede", "cMask" : ["red","ball"]},{"v0" : 20, "v1" : 21, "y" : -126.68, "trait" : "rede2"},{"v0" : 21, "v1" : 22, "x" : -1426.68, "trait" : "rede2"},{"v0" : 22, "v1" : 23, "y" : 126.68, "trait" : "rede2"},{"v0" : 24, "v1" : 25, "y" : 126.68, "trait" : "rede2"},{"v0" : 25, "v1" : 26, "x" : 1426.68, "trait" : "rede2"},{"v0" : 26, "v1" : 27, "y" : -126.68, "trait" : "rede2"},{"v0" : 28, "v1" : 29, "x" : -1652, "trait" : "campo"},{"v0" : 30, "v1" : 31, "y" : 1052, "trait" : "campo"},{"v0" : 32, "v1" : 33, "y" : -1052, "trait" : "campo"},{"v0" : 34, "v1" : 35, "x" : 1652, "trait" : "campo"},{"v0" : 36, "v1" : 37, "x" : 1648, "trait" : "campo"},{"v0" : 38, "v1" : 39, "y" : -1048, "trait" : "campo"},{"v0" : 40, "v1" : 41, "x" : -1648, "trait" : "campo"},{"v0" : 42, "v1" : 43, "y" : 1048, "trait" : "campo"},{"v0" : 44, "v1" : 45, "y" : 480, "trait" : "campo", "curve" : 0},{"v0" : 46, "v1" : 47, "x" : -1170, "trait" : "campo", "curve" : 0},{"v0" : 48, "v1" : 49, "y" : -480, "trait" : "campo"},{"v0" : 50, "v1" : 51, "y" : 480, "trait" : "campo", "curve" : 0},{"v0" : 52, "v1" : 53, "y" : -480, "trait" : "campo"},{"v0" : 54, "v1" : 55, "x" : 1170, "trait" : "campo", "curve" : 0},{"v0" : 56, "v1" : 57, "y" : -482, "trait" : "campo", "curve" : 0},{"v0" : 58, "v1" : 59, "y" : -478, "trait" : "campo", "curve" : 0},{"v0" : 60, "v1" : 61, "y" : 478, "trait" : "campo", "curve" : 0},{"v0" : 62, "v1" : 63, "y" : 482, "trait" : "campo", "curve" : 0},{"v0" : 64, "v1" : 65, "x" : -1172, "trait" : "campo", "curve" : 0},{"v0" : 66, "v1" : 67, "x" : -1168, "trait" : "campo", "curve" : 0},{"v0" : 68, "v1" : 69, "y" : -482, "trait" : "campo", "curve" : 0},{"v0" : 70, "v1" : 71, "y" : -478, "trait" : "campo", "curve" : 0},{"v0" : 72, "v1" : 73, "y" : 478, "trait" : "campo", "curve" : 0},{"v0" : 74, "v1" : 75, "y" : 482, "trait" : "campo"},{"v0" : 76, "v1" : 77, "x" : 1168, "trait" : "campo", "curve" : 0},{"v0" : 78, "v1" : 79, "x" : 1172, "trait" : "campo", "curve" : 0},{"v0" : 80, "v1" : 81, "x" : 0, "trait" : "campo"},{"v0" : 82, "v1" : 83, "x" : -2, "trait" : "campo"},{"v0" : 84, "v1" : 85, "x" : 2, "trait" : "campo"},{"v0" : 86, "v1" : 87, "curve" : 180, "x" : 0, "trait" : "campo"},{"v0" : 87, "v1" : 86, "curve" : 180, "x" : 0, "trait" : "campo"},{"v0" : 88, "v1" : 89, "x" : 0, "trait" : "sa√≠da"},{"v0" : 90, "v1" : 91, "x" : 0, "trait" : "sa√≠da"},{"v0" : 92, "v1" : 93, "curve" : 180, "x" : 1080, "trait" : "campo"},{"v0" : 93, "v1" : 92, "curve" : 180, "x" : 1080, "trait" : "campo"},{"v0" : 94, "v1" : 95, "curve" : 180, "x" : 1080, "trait" : "campo"},{"v0" : 95, "v1" : 94, "curve" : 180, "x" : 1080, "trait" : "campo"},{"v0" : 96, "v1" : 97, "curve" : 180, "x" : 1080, "trait" : "campo"},{"v0" : 97, "v1" : 96, "curve" : 180, "x" : 1080, "trait" : "campo"},{"v0" : 98, "v1" : 99, "curve" : 180, "x" : -1080, "trait" : "campo"},{"v0" : 99, "v1" : 98, "curve" : 180, "x" : -1080, "trait" : "campo"},{"v0" : 100, "v1" : 101, "curve" : 180, "x" : -1080, "trait" : "campo"},{"v0" : 101, "v1" : 100, "curve" : 180, "x" : -1080, "trait" : "campo"},{"v0" : 102, "v1" : 103, "curve" : 180, "x" : -1080, "trait" : "campo"},{"v0" : 103, "v1" : 102, "curve" : 180, "x" : -1080, "trait" : "campo"},{"color" : "F8F8F8", "trait" : "campo", "v0" : 104, "v1" : 105, "curve" : 90, "x" : -960},{"curve" : 180, "vis" : false, "bCoef" : 0, "cMask" : ["red","blue"], "cGroup" : ["blueKO"], "v0" : 90, "v1" : 89},{"curve" : 180, "vis" : false, "bCoef" : 0, "cMask" : ["red","blue"], "cGroup" : ["redKO"], "v0" : 89, "v1" : 90},{"color" : "F8F8F8", "trait" : "campo", "v0" : 106, "v1" : 107, "curve" : 180, "x" : 0},{"curve" : 180, "color" : "F8F8F8", "trait" : "campo", "v0" : 107, "v1" : 106, "x" : 0},{"curve" : 180, "color" : "F8F8F8", "trait" : "campo", "v0" : 108, "v1" : 109, "x" : 0},{"curve" : 180, "color" : "F8F8F8", "trait" : "campo", "v0" : 109, "v1" : 108, "x" : 0},{"curve" : 180, "color" : "F8F8F8", "trait" : "campo", "v0" : 110, "v1" : 111, "x" : 0},{"curve" : 180, "color" : "F8F8F8", "trait" : "campo", "v0" : 111, "v1" : 110, "x" : 0},{"color" : "F8F8F8", "trait" : "campo", "v0" : 112, "v1" : 113, "curve" : 88, "x" : -960},{"color" : "F8F8F8", "trait" : "campo", "v0" : 114, "v1" : 115, "curve" : 92, "x" : -960},{"v0" : 116, "v1" : 117, "y" : -480, "trait" : "campo", "curve" : 0},{"v0" : 118, "v1" : 119, "y" : -480, "trait" : "campo"},{"v0" : 120, "v1" : 121, "y" : -482, "trait" : "campo", "curve" : 0},{"v0" : 122, "v1" : 123, "y" : -478, "trait" : "campo", "curve" : 0},{"v0" : 124, "v1" : 125, "y" : -482, "trait" : "campo", "curve" : 0},{"v0" : 126, "v1" : 127, "y" : -478, "trait" : "campo", "curve" : 0},{"v0" : 128, "v1" : 129, "y" : 480, "trait" : "campo", "curve" : 0},{"v0" : 130, "v1" : 131, "y" : 480, "trait" : "campo", "curve" : 0},{"v0" : 132, "v1" : 133, "y" : 478, "trait" : "campo", "curve" : 0},{"v0" : 134, "v1" : 135, "y" : 482, "trait" : "campo", "curve" : 0},{"v0" : 136, "v1" : 137, "y" : 478, "trait" : "campo", "curve" : 0},{"v0" : 138, "v1" : 139, "y" : 482, "trait" : "campo"},{"v0" : 140, "v1" : 141, "x" : -1200, "trait" : "campo", "curve" : 0},{"v0" : 142, "v1" : 143, "x" : -1202, "trait" : "campo", "curve" : 0},{"v0" : 144, "v1" : 145, "x" : -1198, "trait" : "campo", "curve" : 0},{"v0" : 146, "v1" : 147, "x" : 1200, "trait" : "campo", "curve" : 0},{"v0" : 148, "v1" : 149, "x" : 1202, "trait" : "campo", "curve" : 0},{"v0" : 150, "v1" : 151, "x" : 1198, "trait" : "campo", "curve" : 0},{"color" : "F8F8F8", "trait" : "campo", "v0" : 152, "v1" : 153, "curve" : -90, "x" : 960},{"color" : "F8F8F8", "trait" : "campo", "v0" : 154, "v1" : 155, "curve" : -88, "x" : 960},{"color" : "F8F8F8", "trait" : "campo", "v0" : 156, "v1" : 157, "curve" : -92, "x" : 960},{"curve" : 90, "color" : "F8F8F8", "trait" : "campo", "v0" : 158, "v1" : 159},{"curve" : 90, "color" : "F8F8F8", "trait" : "campo", "v0" : 160, "v1" : 161},{"curve" : 90, "color" : "F8F8F8", "trait" : "campo", "v0" : 162, "v1" : 163},{"curve" : -90, "color" : "F8F8F8", "trait" : "campo", "v0" : 164, "v1" : 165},{"curve" : -90, "color" : "F8F8F8", "trait" : "campo", "v0" : 166, "v1" : 167},{"curve" : -90, "color" : "F8F8F8", "trait" : "campo", "v0" : 168, "v1" : 169},{"curve" : -90, "color" : "F8F8F8", "trait" : "campo", "v0" : 170, "v1" : 171},{"curve" : -90, "color" : "F8F8F8", "trait" : "campo", "v0" : 172, "v1" : 173},{"curve" : -90, "color" : "F8F8F8", "trait" : "campo", "v0" : 174, "v1" : 175},{"curve" : 90, "color" : "F8F8F8", "trait" : "campo", "v0" : 176, "v1" : 177},{"curve" : 90, "color" : "F8F8F8", "trait" : "campo", "v0" : 178, "v1" : 179},{"curve" : 90, "color" : "F8F8F8", "trait" : "campo", "v0" : 180, "v1" : 181},{"vis" : false, "cMask" : ["c0"], "v0" : 182, "v1" : 183, "x" : -960},{"vis" : false, "cMask" : ["c0"], "v0" : 182, "v1" : 184, "y" : -400},{"vis" : false, "cMask" : ["c0"], "v0" : 183, "v1" : 185, "y" : 400},{"vis" : false, "cMask" : ["c0"], "v0" : 184, "v1" : 186, "x" : -1320},{"vis" : false, "cMask" : ["c0"], "v0" : 185, "v1" : 187, "x" : -1320},{"vis" : false, "cMask" : ["c1"], "v0" : 188, "v1" : 189, "x" : 960},{"vis" : false, "cMask" : ["c1"], "v0" : 189, "v1" : 190, "y" : 400},{"vis" : false, "cMask" : ["c1"], "v0" : 191, "v1" : 188, "y" : -400},{"vis" : false, "cMask" : ["c1"], "v0" : 191, "v1" : 192, "x" : 1320},{"vis" : false, "cMask" : ["c1"], "v0" : 190, "v1" : 193, "x" : 1320}],"goals" : [{"p0" : [1333,120], "p1" : [1333,-120], "team" : "blue"},{"p0" : [-1333,120], "p1" : [-1333,-120], "team" : "red"}],"discs" : [{"pos" : [-1320,120], "trait" : "trave", "bCoef" : 1.5},{"pos" : [-1320,-120], "trait" : "trave", "bCoef" : 1.5},{"pos" : [1320,120], "trait" : "trave", "bCoef" : 1.5},{"pos" : [1320,-120], "trait" : "trave", "bCoef" : 1.5},{"radius" : 12, "pos" : [0,3000], "bCoef" : 0, "color" : "transparent", "cMask" : ["red","blue"], "invMass" : 0},{"radius" : 275, "invMass" : 0, "pos" : [0,3000], "bCoef" : 0, "color" : "transparent", "cMask" : ["blue"]},{"radius" : 180, "invMass" : 0, "pos" : [0,3000], "bCoef" : 0, "color" : "transparent", "cMask" : ["blue"]},{"radius" : 180.01, "invMass" : 0, "pos" : [0,3000], "bCoef" : 0, "color" : "transparent", "cMask" : ["red"]},{"radius" : 275.01, "invMass" : 0, "pos" : [0,3000], "bCoef" : 0, "color" : "transparent", "cMask" : ["red"]}],"planes" : [{"bCoef" : 0.1, "trait" : "limite", "dist" : -1420, "normal" : [1,0]},{"bCoef" : 0.1, "trait" : "limite", "dist" : -760, "normal" : [0,1]},{"bCoef" : 0.1, "trait" : "limite", "dist" : -760, "normal" : [0,-1], "y" : 760},{"bCoef" : 0.1, "trait" : "limite", "dist" : -1420, "normal" : [-1,0]}],"traits" :{"campo" :{"color" : "F8F8F8", "cMask" : [""]},"trave" :{"radius" : 7, "invMass" : 0, "bCoef" : 0.5},"rede" :{"color" : "F8F8F8", "bCoef" : 0.1, "cMask" : ["red","blue","ball"]},"rede2" :{"bCoef" : 0.1, "vis" : false, "cMask" : ["ball"]},"limite" :{"bCoef" : 0, "cMask" : ["red","blue"]},"sa√≠da" :{"vis" : false, "bCoef" : 0, "cGroup" : ["redKO","blueKO"], "cMask" : ["red","blue"]}},"ballPhysics" :{"radius" : 9,"pos" : [ 0, 0],"damping" : 0.989,"cGroup" : [ "ball", "kick", "score"],"invMass" : 0.8},"playerPhysics" :{"bCoef" : 0,"acceleration" : 0.12,"kickingAcceleration" : 0.093,"kickStrength" : 8}}`;
			this.penalMap = `{"name" : "P√™nalti X5","canBeStored" : false,"width" : 1490,"height" : 760,"cameraFollow" : "player","bg" :{"type" : "grass", "height" : 660, "width" : 1320},"redSpawnPoints" : [[ -1445, 0],[ -1445, -45],[ -1445, 45],[ -1445, -90],[ -1445, 90],[ -1445, 745]],"blueSpawnPoints" : [[ -680, 0],[ -680, 45],[ -680, -45],[ -680, 90],[ -680, -90],[ -680, -755]],"vertexes" : [/* 0 */{"x" : -1320, "y" : -661, "trait" : "campo"},/* 1 */{"x" : -1320, "y" : 661, "trait" : "campo"},/* 2 */{"x" : -1321, "y" : 660, "trait" : "campo"},/* 3 */{"x" : 1321, "y" : 660, "trait" : "campo"},/* 4 */{"x" : 1320, "y" : 661, "trait" : "campo"},/* 5 */{"x" : 1320, "y" : -661, "trait" : "campo"},/* 6 */{"x" : 1321, "y" : -660, "trait" : "campo"},/* 7 */{"x" : -1321, "y" : -660, "trait" : "campo"},/* 8 */{"x" : -1320, "y" : -120, "trait" : "rede", "cMask" : ["ball"]},/* 9 */{"x" : -1391, "y" : -120, "trait" : "rede", "cMask" : ["ball"]},/* 10 */{"x" : -1390, "y" : -121, "trait" : "rede", "cMask" : ["ball"]},/* 11 */{"x" : -1390, "y" : 121, "trait" : "rede", "cMask" : ["ball"]},/* 12 */{"x" : -1391, "y" : 120, "trait" : "rede", "cMask" : ["ball"]},/* 13 */{"x" : -1320, "y" : 120, "trait" : "rede", "cMask" : ["ball"]},/* 14 */{"x" : 1320, "y" : 120, "trait" : "rede", "cMask" : ["ball"]},/* 15 */{"x" : 1391, "y" : 120, "trait" : "rede", "cMask" : ["ball"]},/* 16 */{"x" : 1390, "y" : 121, "trait" : "rede", "cMask" : ["ball"]},/* 17 */{"x" : 1390, "y" : -121, "trait" : "rede", "cMask" : ["ball"]},/* 18 */{"x" : 1391, "y" : -120, "trait" : "rede", "cMask" : ["ball"]},/* 19 */{"x" : 1320, "y" : -120, "trait" : "rede", "cMask" : ["ball"]},/* 20 */{"x" : -1320, "y" : -126.68, "trait" : "rede2"},/* 21 */{"x" : -1396.68, "y" : -126.68, "trait" : "rede2"},/* 22 */{"x" : -1396.68, "y" : 126.68, "trait" : "rede2"},/* 23 */{"x" : -1320, "y" : 126.68, "trait" : "rede2"},/* 24 */{"x" : 1320, "y" : 126.68, "trait" : "rede2"},/* 25 */{"x" : 1396.68, "y" : 126.68, "trait" : "rede2"},/* 26 */{"x" : 1396.68, "y" : -126.68, "trait" : "rede2"},/* 27 */{"x" : 1320, "y" : -126.68, "trait" : "rede2"},/* 28 */{"x" : -1322, "y" : -663, "trait" : "campo"},/* 29 */{"x" : -1322, "y" : 663, "trait" : "campo"},/* 30 */{"x" : -1323, "y" : 662, "trait" : "campo"},/* 31 */{"x" : 1323, "y" : 662, "trait" : "campo"},/* 32 */{"x" : 1323, "y" : -662, "trait" : "campo"},/* 33 */{"x" : -1323, "y" : -662, "trait" : "campo"},/* 34 */{"x" : 1322, "y" : 663, "trait" : "campo"},/* 35 */{"x" : 1322, "y" : -663, "trait" : "campo"},/* 36 */{"x" : 1318, "y" : 659, "trait" : "campo"},/* 37 */{"x" : 1318, "y" : -659, "trait" : "campo"},/* 38 */{"x" : 1319, "y" : -658, "trait" : "campo"},/* 39 */{"x" : -1319, "y" : -658, "trait" : "campo"},/* 40 */{"x" : -1318, "y" : -659, "trait" : "campo"},/* 41 */{"x" : -1318, "y" : 659, "trait" : "campo"},/* 42 */{"x" : -1319, "y" : 658, "trait" : "campo"},/* 43 */{"x" : 1319, "y" : 658, "trait" : "campo"},/* 44 */{"x" : -1318, "y" : 400, "trait" : "campo", "curve" : 0},/* 45 */{"x" : -959, "y" : 400, "trait" : "campo", "curve" : 0},/* 46 */{"x" : -960, "y" : 401, "trait" : "campo", "curve" : 0},/* 47 */{"x" : -960, "y" : -401, "trait" : "campo", "curve" : 0},/* 48 */{"x" : -959, "y" : -400, "trait" : "campo"},/* 49 */{"x" : -1318, "y" : -400, "trait" : "campo"},/* 50 */{"x" : 1318, "y" : 400, "trait" : "campo", "curve" : 0},/* 51 */{"x" : 959, "y" : 400, "trait" : "campo", "curve" : 0},/* 52 */{"x" : 959, "y" : -400, "trait" : "campo"},/* 53 */{"x" : 1318, "y" : -400, "trait" : "campo"},/* 54 */{"x" : 960, "y" : 401, "trait" : "campo", "curve" : 0},/* 55 */{"x" : 960, "y" : -401, "trait" : "campo", "curve" : 0},/* 56 */{"x" : -957, "y" : -402, "trait" : "campo", "curve" : 0},/* 57 */{"x" : -1318, "y" : -402, "trait" : "campo", "curve" : 0},/* 58 */{"x" : -959, "y" : -398, "trait" : "campo", "curve" : 0},/* 59 */{"x" : -1318, "y" : -398, "trait" : "campo", "curve" : 0},/* 60 */{"x" : -959, "y" : 398, "trait" : "campo", "curve" : 0},/* 61 */{"x" : -1318, "y" : 398, "trait" : "campo", "curve" : 0},/* 62 */{"x" : -957, "y" : 402, "trait" : "campo", "curve" : 0},/* 63 */{"x" : -1318, "y" : 402, "trait" : "campo", "curve" : 0},/* 64 */{"x" : -962, "y" : 399, "trait" : "campo", "curve" : 0},/* 65 */{"x" : -962, "y" : -399, "trait" : "campo", "curve" : 0},/* 66 */{"x" : -958, "y" : 403, "trait" : "campo", "curve" : 0},/* 67 */{"x" : -958, "y" : -403, "trait" : "campo", "curve" : 0},/* 68 */{"x" : 957, "y" : -402, "trait" : "campo", "curve" : 0},/* 69 */{"x" : 1318, "y" : -402, "trait" : "campo", "curve" : 0},/* 70 */{"x" : 959, "y" : -398, "trait" : "campo", "curve" : 0},/* 71 */{"x" : 1318, "y" : -398, "trait" : "campo", "curve" : 0},/* 72 */{"x" : 959, "y" : 398, "trait" : "campo", "curve" : 0},/* 73 */{"x" : 1318, "y" : 398, "trait" : "campo", "curve" : 0},/* 74 */{"x" : 957, "y" : 402, "trait" : "campo"},/* 75 */{"x" : 1318, "y" : 402, "trait" : "campo"},/* 76 */{"x" : 958, "y" : 403, "trait" : "campo", "curve" : 0},/* 77 */{"x" : 958, "y" : -403, "trait" : "campo", "curve" : 0},/* 78 */{"x" : 962, "y" : 399, "trait" : "campo", "curve" : 0},/* 79 */{"x" : 962, "y" : -399, "trait" : "campo", "curve" : 0},/* 80 */{"x" : 0, "y" : -658, "trait" : "campo"},/* 81 */{"x" : 0, "y" : 658, "trait" : "campo"},/* 82 */{"x" : -2, "y" : -658, "trait" : "campo"},/* 83 */{"x" : -2, "y" : 658, "trait" : "campo"},/* 84 */{"x" : 2, "y" : -658, "trait" : "campo"},/* 85 */{"x" : 2, "y" : 658, "trait" : "campo"},/* 86 */{"x" : 0, "y" : -5, "curve" : 180, "trait" : "campo"},/* 87 */{"x" : 0, "y" : 5, "curve" : 180, "trait" : "campo"},/* 88 */{"x" : 1080, "y" : -5, "curve" : 180, "trait" : "campo"},/* 89 */{"x" : 1080, "y" : 5, "curve" : 180, "trait" : "campo"},/* 90 */{"x" : 1080, "y" : -3, "curve" : 180, "trait" : "campo"},/* 91 */{"x" : 1080, "y" : 3, "curve" : 180, "trait" : "campo"},/* 92 */{"x" : 1080, "y" : -1, "curve" : 180, "trait" : "campo"},/* 93 */{"x" : 1080, "y" : 1, "curve" : 180, "trait" : "campo"},/* 94 */{"x" : -1080, "y" : -5, "curve" : 180, "trait" : "campo"},/* 95 */{"x" : -1080, "y" : 5, "curve" : 180, "trait" : "campo"},/* 96 */{"x" : -1080, "y" : -3, "curve" : 180, "trait" : "campo"},/* 97 */{"x" : -1080, "y" : 3, "curve" : 180, "trait" : "campo"},/* 98 */{"x" : -1080, "y" : -1, "curve" : 180, "trait" : "campo"},/* 99 */{"x" : -1080, "y" : 1, "curve" : 180, "trait" : "campo"},/* 100 */{"trait" : "campo", "x" : -960, "y" : -160, "curve" : 90},/* 101 */{"trait" : "campo", "x" : -960, "y" : 160, "curve" : 90},/* 102 */{"trait" : "campo", "x" : 0, "y" : 200, "curve" : 180},/* 103 */{"trait" : "campo", "x" : 0, "y" : -200, "curve" : 180},/* 104 */{"trait" : "campo", "x" : 0, "y" : -202},/* 105 */{"trait" : "campo", "x" : 0, "y" : 202},/* 106 */{"trait" : "campo", "x" : 0, "y" : -198},/* 107 */{"trait" : "campo", "x" : 0, "y" : 198},/* 108 */{"trait" : "campo", "x" : -960, "y" : -158, "curve" : 88},/* 109 */{"trait" : "campo", "x" : -960, "y" : 158, "curve" : 88},/* 110 */{"trait" : "campo", "x" : -960, "y" : -162, "curve" : 92},/* 111 */{"trait" : "campo", "x" : -960, "y" : 162, "curve" : 92},/* 112 */{"x" : -1199, "y" : -220, "trait" : "campo", "curve" : 0},/* 113 */{"x" : -1318, "y" : -220, "trait" : "campo", "curve" : 0},/* 114 */{"x" : 1199, "y" : -220, "trait" : "campo"},/* 115 */{"x" : 1318, "y" : -220, "trait" : "campo"},/* 116 */{"x" : -1197, "y" : -222, "trait" : "campo", "curve" : 0},/* 117 */{"x" : -1318, "y" : -222, "trait" : "campo", "curve" : 0},/* 118 */{"x" : -1199, "y" : -218, "trait" : "campo", "curve" : 0},/* 119 */{"x" : -1318, "y" : -218, "trait" : "campo", "curve" : 0},/* 120 */{"x" : 1197, "y" : -222, "trait" : "campo", "curve" : 0},/* 121 */{"x" : 1318, "y" : -222, "trait" : "campo", "curve" : 0},/* 122 */{"x" : 1199, "y" : -218, "trait" : "campo", "curve" : 0},/* 123 */{"x" : 1318, "y" : -218, "trait" : "campo", "curve" : 0},/* 124 */{"x" : -1318, "y" : 220, "trait" : "campo", "curve" : 0},/* 125 */{"x" : -1199, "y" : 220, "trait" : "campo", "curve" : 0},/* 126 */{"x" : 1318, "y" : 220, "trait" : "campo", "curve" : 0},/* 127 */{"x" : 1199, "y" : 220, "trait" : "campo", "curve" : 0},/* 128 */{"x" : -1199, "y" : 218, "trait" : "campo", "curve" : 0},/* 129 */{"x" : -1318, "y" : 218, "trait" : "campo", "curve" : 0},/* 130 */{"x" : -1197, "y" : 222, "trait" : "campo", "curve" : 0},/* 131 */{"x" : -1318, "y" : 222, "trait" : "campo", "curve" : 0},/* 132 */{"x" : 1199, "y" : 218, "trait" : "campo", "curve" : 0},/* 133 */{"x" : 1318, "y" : 218, "trait" : "campo", "curve" : 0},/* 134 */{"x" : 1197, "y" : 222, "trait" : "campo"},/* 135 */{"x" : 1318, "y" : 222, "trait" : "campo"},/* 136 */{"x" : -1200, "y" : 221, "trait" : "campo", "curve" : 0},/* 137 */{"x" : -1200, "y" : -221, "trait" : "campo", "curve" : 0},/* 138 */{"x" : -1202, "y" : 219, "trait" : "campo", "curve" : 0},/* 139 */{"x" : -1202, "y" : -219, "trait" : "campo", "curve" : 0},/* 140 */{"x" : -1198, "y" : 223, "trait" : "campo", "curve" : 0},/* 141 */{"x" : -1198, "y" : -223, "trait" : "campo", "curve" : 0},/* 142 */{"x" : 1200, "y" : 221, "trait" : "campo", "curve" : 0},/* 143 */{"x" : 1200, "y" : -221, "trait" : "campo", "curve" : 0},/* 144 */{"x" : 1202, "y" : 219, "trait" : "campo", "curve" : 0},/* 145 */{"x" : 1202, "y" : -219, "trait" : "campo", "curve" : 0},/* 146 */{"x" : 1198, "y" : 223, "trait" : "campo", "curve" : 0},/* 147 */{"x" : 1198, "y" : -223, "trait" : "campo", "curve" : 0},/* 148 */{"trait" : "campo", "x" : 960, "y" : -160, "curve" : -90},/* 149 */{"trait" : "campo", "x" : 960, "y" : 160, "curve" : -90},/* 150 */{"trait" : "campo", "x" : 960, "y" : -158, "curve" : -88},/* 151 */{"trait" : "campo", "x" : 960, "y" : 158, "curve" : -88},/* 152 */{"trait" : "campo", "x" : 960, "y" : -162, "curve" : -92},/* 153 */{"trait" : "campo", "x" : 960, "y" : 162, "curve" : -92},/* 154 */{"trait" : "campo", "x" : -1290, "y" : -658, "curve" : 90},/* 155 */{"trait" : "campo", "x" : -1318, "y" : -630, "curve" : 90},/* 156 */{"trait" : "campo", "x" : -1288, "y" : -658, "curve" : 90},/* 157 */{"trait" : "campo", "x" : -1318, "y" : -628, "curve" : 90},/* 158 */{"trait" : "campo", "x" : -1292, "y" : -658, "curve" : 90},/* 159 */{"trait" : "campo", "x" : -1318, "y" : -632, "curve" : 90},/* 160 */{"trait" : "campo", "x" : 1288, "y" : -658, "curve" : -90},/* 161 */{"trait" : "campo", "x" : 1318, "y" : -628, "curve" : -90},/* 162 */{"trait" : "campo", "x" : 1290, "y" : -658, "curve" : -90},/* 163 */{"trait" : "campo", "x" : 1318, "y" : -630, "curve" : -90},/* 164 */{"trait" : "campo", "x" : 1292, "y" : -658, "curve" : -90},/* 165 */{"trait" : "campo", "x" : 1318, "y" : -632, "curve" : -90},/* 166 */{"trait" : "campo", "x" : -1292, "y" : 658, "curve" : -90},/* 167 */{"trait" : "campo", "x" : -1318, "y" : 632, "curve" : -90},/* 168 */{"trait" : "campo", "x" : -1290, "y" : 658, "curve" : -90},/* 169 */{"trait" : "campo", "x" : -1318, "y" : 630, "curve" : -90},/* 170 */{"trait" : "campo", "x" : -1292, "y" : 658, "curve" : -90},/* 171 */{"trait" : "campo", "x" : -1318, "y" : 632, "curve" : -90},/* 172 */{"trait" : "campo", "x" : 1292, "y" : 658, "curve" : 90},/* 173 */{"trait" : "campo", "x" : 1318, "y" : 632, "curve" : 90},/* 174 */{"trait" : "campo", "x" : 1290, "y" : 658, "curve" : 90},/* 175 */{"trait" : "campo", "x" : 1318, "y" : 630, "curve" : 90},/* 176 */{"trait" : "campo", "x" : 1288, "y" : 658, "curve" : 90},/* 177 */{"trait" : "campo", "x" : 1318, "y" : 628, "curve" : 90},/* 178 */{"x" : -1335, "y" : -760, "trait" : "penaltyBarrier"},/* 179 */{"x" : -1335, "y" : -25, "curve" : 90, "trait" : "penaltyBarrier"},/* 180 */{"x" : -1335, "y" : 25, "curve" : 90, "trait" : "penaltyBarrier"},/* 181 */{"x" : -1335, "y" : 760, "trait" : "penaltyBarrier"},/* 182 */{"x" : -1345, "y" : -15, "curve" : 90, "trait" : "penaltyBarrier"},/* 183 */{"x" : -1345, "y" : 15, "curve" : 90, "trait" : "penaltyBarrier"},/* 184 */{"x" : -1390, "y" : -15, "curve" : -90, "trait" : "penaltyBarrier"},/* 185 */{"x" : -1390, "y" : 15, "curve" : -90, "trait" : "penaltyBarrier"},/* 186 */{"x" : -1400, "y" : -25, "curve" : -90, "trait" : "penaltyBarrier"},/* 187 */{"x" : -1400, "y" : 25, "curve" : -90, "trait" : "penaltyBarrier"},/* 188 */{"x" : -1400, "y" : 760, "trait" : "penaltyBarrier"},/* 189 */{"x" : -1400, "y" : -760, "trait" : "penaltyBarrier"},/* 190 */{"x" : -1305, "y" : -760, "trait" : "penaltyBarrier"},/* 191 */{"x" : -1305, "y" : 760, "trait" : "penaltyBarrier"},/* 192 */{"x" : -650, "y" : -760, "trait" : "penaltyBarrier", "cMask" : ["wall"], "color" : "FFFFFF"},/* 193 */{"x" : -650, "y" : 760, "trait" : "penaltyBarrier", "cMask" : ["wall"], "color" : "FFFFFF"},/* 194 */{"x" : -885, "y" : -760, "trait" : "penaltyBarrier"},/* 195 */{"x" : -885, "y" : -25, "curve" : 90, "trait" : "penaltyBarrier"},/* 196 */{"x" : -885, "y" : 25, "curve" : 90, "trait" : "penaltyBarrier"},/* 197 */{"x" : -885, "y" : 760, "trait" : "penaltyBarrier"},/* 198 */{"x" : -895, "y" : -15, "curve" : 90, "trait" : "penaltyBarrier"},/* 199 */{"x" : -895, "y" : 15, "curve" : 90, "trait" : "penaltyBarrier"},/* 200 */{"x" : -895, "y" : -15, "curve" : -90, "trait" : "penaltyBarrier"},/* 201 */{"x" : -895, "y" : 15, "curve" : -90, "trait" : "penaltyBarrier"},/* 202 */{"x" : -905, "y" : -25, "curve" : -90, "trait" : "penaltyBarrier"},/* 203 */{"x" : -905, "y" : 25, "curve" : -90, "trait" : "penaltyBarrier"},/* 204 */{"x" : -905, "y" : 760, "trait" : "penaltyBarrier"},/* 205 */{"x" : -905, "y" : -760, "trait" : "penaltyBarrier"},/* 206 */{"x" : -1080, "y" : -760, "trait" : "penaltyBarrier", "cMask" : ["blue"], "vis" : false, "pos" : [-495,0], "curve" : 0, "color" : "696969"},/* 207 */{"x" : -1080, "y" : 760, "trait" : "penaltyBarrier", "cMask" : ["blue"], "vis" : false, "pos" : [-495,0], "curve" : 0, "color" : "696969"},/* 208 */{"cMask" : ["wall"], "cGroup" : ["redKO","blueKO"], "trait" : "penaltyBarrier", "x" : -885, "y" : 25, "vis" : true, "color" : "5E844D"},/* 209 */{"cMask" : ["wall"], "cGroup" : ["redKO","blueKO"], "trait" : "penaltyBarrier", "x" : -800, "y" : 25, "vis" : true, "color" : "5E844D"},/* 210 */{"cMask" : ["wall"], "cGroup" : ["redKO","blueKO"], "trait" : "penaltyBarrier", "x" : -885, "y" : -25, "vis" : true, "color" : "5E844D"},/* 211 */{"cMask" : ["wall"], "cGroup" : ["redKO","blueKO"], "trait" : "penaltyBarrier", "x" : -800, "y" : -25, "vis" : true, "color" : "5E844D"},/* 212 */{"cMask" : ["wall"], "cGroup" : ["redKO","blueKO"], "trait" : "penaltyBarrier", "x" : -1430, "y" : 15, "vis" : true, "color" : "5E844D"},/* 213 */{"cMask" : ["wall"], "cGroup" : ["redKO","blueKO"], "trait" : "penaltyBarrier", "x" : -1390, "y" : 15, "vis" : true, "color" : "5E844D"},/* 214 */{"cMask" : ["wall"], "cGroup" : ["redKO","blueKO"], "trait" : "penaltyBarrier", "x" : -1430, "y" : -15, "vis" : true, "color" : "5E844D"},/* 215 */{"cMask" : ["wall"], "cGroup" : ["redKO","blueKO"], "trait" : "penaltyBarrier", "x" : -1390, "y" : -15, "vis" : true, "color" : "5E844D"}],"segments" : [{"v0" : 0, "v1" : 1, "x" : -1650, "trait" : "campo"},{"v0" : 2, "v1" : 3, "y" : 1050, "trait" : "campo"},{"v0" : 4, "v1" : 5, "x" : 1650, "trait" : "campo"},{"v0" : 6, "v1" : 7, "y" : -1050, "trait" : "campo"},{"v0" : 8, "v1" : 9, "y" : -120, "trait" : "rede", "cMask" : ["ball"]},{"v0" : 10, "v1" : 11, "x" : -1420, "trait" : "rede", "cMask" : ["ball"]},{"v0" : 12, "v1" : 13, "y" : 120, "trait" : "rede", "cMask" : ["ball"]},{"v0" : 14, "v1" : 15, "y" : 120, "trait" : "rede", "cMask" : ["ball"]},{"v0" : 16, "v1" : 17, "x" : 1420, "trait" : "rede", "cMask" : ["ball"]},{"v0" : 18, "v1" : 19, "y" : -120, "trait" : "rede", "cMask" : ["ball"]},{"v0" : 20, "v1" : 21, "y" : -126.68, "trait" : "rede2"},{"v0" : 21, "v1" : 22, "x" : -1426.68, "trait" : "rede2"},{"v0" : 22, "v1" : 23, "y" : 126.68, "trait" : "rede2"},{"v0" : 24, "v1" : 25, "y" : 126.68, "trait" : "rede2"},{"v0" : 25, "v1" : 26, "x" : 1426.68, "trait" : "rede2"},{"v0" : 26, "v1" : 27, "y" : -126.68, "trait" : "rede2"},{"v0" : 28, "v1" : 29, "x" : -1652, "trait" : "campo"},{"v0" : 30, "v1" : 31, "y" : 1052, "trait" : "campo"},{"v0" : 32, "v1" : 33, "y" : -1052, "trait" : "campo"},{"v0" : 34, "v1" : 35, "x" : 1652, "trait" : "campo"},{"v0" : 36, "v1" : 37, "x" : 1648, "trait" : "campo"},{"v0" : 38, "v1" : 39, "y" : -1048, "trait" : "campo"},{"v0" : 40, "v1" : 41, "x" : -1648, "trait" : "campo"},{"v0" : 42, "v1" : 43, "y" : 1048, "trait" : "campo"},{"v0" : 44, "v1" : 45, "y" : 480, "trait" : "campo", "curve" : 0},{"v0" : 46, "v1" : 47, "x" : -1170, "trait" : "campo", "curve" : 0},{"v0" : 48, "v1" : 49, "y" : -480, "trait" : "campo"},{"v0" : 50, "v1" : 51, "y" : 480, "trait" : "campo", "curve" : 0},{"v0" : 52, "v1" : 53, "y" : -480, "trait" : "campo"},{"v0" : 54, "v1" : 55, "x" : 1170, "trait" : "campo", "curve" : 0},{"v0" : 56, "v1" : 57, "y" : -482, "trait" : "campo", "curve" : 0},{"v0" : 58, "v1" : 59, "y" : -478, "trait" : "campo", "curve" : 0},{"v0" : 60, "v1" : 61, "y" : 478, "trait" : "campo", "curve" : 0},{"v0" : 62, "v1" : 63, "y" : 482, "trait" : "campo", "curve" : 0},{"v0" : 64, "v1" : 65, "x" : -1172, "trait" : "campo", "curve" : 0},{"v0" : 66, "v1" : 67, "x" : -1168, "trait" : "campo", "curve" : 0},{"v0" : 68, "v1" : 69, "y" : -482, "trait" : "campo", "curve" : 0},{"v0" : 70, "v1" : 71, "y" : -478, "trait" : "campo", "curve" : 0},{"v0" : 72, "v1" : 73, "y" : 478, "trait" : "campo", "curve" : 0},{"v0" : 74, "v1" : 75, "y" : 482, "trait" : "campo"},{"v0" : 76, "v1" : 77, "x" : 1168, "trait" : "campo", "curve" : 0},{"v0" : 78, "v1" : 79, "x" : 1172, "trait" : "campo", "curve" : 0},{"v0" : 80, "v1" : 81, "x" : 0, "trait" : "campo"},{"v0" : 82, "v1" : 83, "x" : -2, "trait" : "campo"},{"v0" : 84, "v1" : 85, "x" : 2, "trait" : "campo"},{"v0" : 86, "v1" : 87, "curve" : 180, "x" : 0, "trait" : "campo"},{"v0" : 87, "v1" : 86, "curve" : 180, "x" : 0, "trait" : "campo"},{"v0" : 88, "v1" : 89, "curve" : 180, "x" : 1080, "trait" : "campo"},{"v0" : 89, "v1" : 88, "curve" : 180, "x" : 1080, "trait" : "campo"},{"v0" : 90, "v1" : 91, "curve" : 180, "x" : 1080, "trait" : "campo"},{"v0" : 91, "v1" : 90, "curve" : 180, "x" : 1080, "trait" : "campo"},{"v0" : 92, "v1" : 93, "curve" : 180, "x" : 1080, "trait" : "campo"},{"v0" : 93, "v1" : 92, "curve" : 180, "x" : 1080, "trait" : "campo"},{"v0" : 94, "v1" : 95, "curve" : 180, "x" : -1080, "trait" : "campo"},{"v0" : 95, "v1" : 94, "curve" : 180, "x" : -1080, "trait" : "campo"},{"v0" : 96, "v1" : 97, "curve" : 180, "x" : -1080, "trait" : "campo"},{"v0" : 97, "v1" : 96, "curve" : 180, "x" : -1080, "trait" : "campo"},{"v0" : 98, "v1" : 99, "curve" : 180, "x" : -1080, "trait" : "campo"},{"v0" : 99, "v1" : 98, "curve" : 180, "x" : -1080, "trait" : "campo"},{"color" : "F8F8F8", "trait" : "campo", "v0" : 100, "v1" : 101, "curve" : 90, "x" : -960},{"color" : "F8F8F8", "trait" : "campo", "v0" : 102, "v1" : 103, "curve" : 180, "x" : 0},{"curve" : 180, "color" : "F8F8F8", "trait" : "campo", "v0" : 103, "v1" : 102, "x" : 0},{"curve" : 180, "color" : "F8F8F8", "trait" : "campo", "v0" : 104, "v1" : 105, "x" : 0},{"curve" : 180, "color" : "F8F8F8", "trait" : "campo", "v0" : 105, "v1" : 104, "x" : 0},{"curve" : 180, "color" : "F8F8F8", "trait" : "campo", "v0" : 106, "v1" : 107, "x" : 0},{"curve" : 180, "color" : "F8F8F8", "trait" : "campo", "v0" : 107, "v1" : 106, "x" : 0},{"color" : "F8F8F8", "trait" : "campo", "v0" : 108, "v1" : 109, "curve" : 88, "x" : -960},{"color" : "F8F8F8", "trait" : "campo", "v0" : 110, "v1" : 111, "curve" : 92, "x" : -960},{"v0" : 112, "v1" : 113, "y" : -480, "trait" : "campo", "curve" : 0},{"v0" : 114, "v1" : 115, "y" : -480, "trait" : "campo"},{"v0" : 116, "v1" : 117, "y" : -482, "trait" : "campo", "curve" : 0},{"v0" : 118, "v1" : 119, "y" : -478, "trait" : "campo", "curve" : 0},{"v0" : 120, "v1" : 121, "y" : -482, "trait" : "campo", "curve" : 0},{"v0" : 122, "v1" : 123, "y" : -478, "trait" : "campo", "curve" : 0},{"v0" : 124, "v1" : 125, "y" : 480, "trait" : "campo", "curve" : 0},{"v0" : 126, "v1" : 127, "y" : 480, "trait" : "campo", "curve" : 0},{"v0" : 128, "v1" : 129, "y" : 478, "trait" : "campo", "curve" : 0},{"v0" : 130, "v1" : 131, "y" : 482, "trait" : "campo", "curve" : 0},{"v0" : 132, "v1" : 133, "y" : 478, "trait" : "campo", "curve" : 0},{"v0" : 134, "v1" : 135, "y" : 482, "trait" : "campo"},{"v0" : 136, "v1" : 137, "x" : -1200, "trait" : "campo", "curve" : 0},{"v0" : 138, "v1" : 139, "x" : -1202, "trait" : "campo", "curve" : 0},{"v0" : 140, "v1" : 141, "x" : -1198, "trait" : "campo", "curve" : 0},{"v0" : 142, "v1" : 143, "x" : 1200, "trait" : "campo", "curve" : 0},{"v0" : 144, "v1" : 145, "x" : 1202, "trait" : "campo", "curve" : 0},{"v0" : 146, "v1" : 147, "x" : 1198, "trait" : "campo", "curve" : 0},{"color" : "F8F8F8", "trait" : "campo", "v0" : 148, "v1" : 149, "curve" : -90, "x" : 960},{"color" : "F8F8F8", "trait" : "campo", "v0" : 150, "v1" : 151, "curve" : -88, "x" : 960},{"color" : "F8F8F8", "trait" : "campo", "v0" : 152, "v1" : 153, "curve" : -92, "x" : 960},{"curve" : 90, "color" : "F8F8F8", "trait" : "campo", "v0" : 154, "v1" : 155},{"curve" : 90, "color" : "F8F8F8", "trait" : "campo", "v0" : 156, "v1" : 157},{"curve" : 90, "color" : "F8F8F8", "trait" : "campo", "v0" : 158, "v1" : 159},{"curve" : -90, "color" : "F8F8F8", "trait" : "campo", "v0" : 160, "v1" : 161},{"curve" : -90, "color" : "F8F8F8", "trait" : "campo", "v0" : 162, "v1" : 163},{"curve" : -90, "color" : "F8F8F8", "trait" : "campo", "v0" : 164, "v1" : 165},{"curve" : -90, "color" : "F8F8F8", "trait" : "campo", "v0" : 166, "v1" : 167},{"curve" : -90, "color" : "F8F8F8", "trait" : "campo", "v0" : 168, "v1" : 169},{"curve" : -90, "color" : "F8F8F8", "trait" : "campo", "v0" : 170, "v1" : 171},{"curve" : 90, "color" : "F8F8F8", "trait" : "campo", "v0" : 172, "v1" : 173},{"curve" : 90, "color" : "F8F8F8", "trait" : "campo", "v0" : 174, "v1" : 175},{"curve" : 90, "color" : "F8F8F8", "trait" : "campo", "v0" : 176, "v1" : 177},{"v0" : 178, "v1" : 179, "x" : -715, "trait" : "penaltyBarrier"},{"v0" : 180, "v1" : 181, "x" : -715, "trait" : "penaltyBarrier"},{"v0" : 179, "v1" : 182, "curve" : 90, "trait" : "penaltyBarrier"},{"v0" : 183, "v1" : 180, "curve" : 90, "trait" : "penaltyBarrier"},{"v0" : 182, "v1" : 184, "y" : -15, "trait" : "penaltyBarrier"},{"v0" : 185, "v1" : 183, "y" : 15, "trait" : "penaltyBarrier"},{"v0" : 186, "v1" : 184, "curve" : -90, "trait" : "penaltyBarrier"},{"v0" : 185, "v1" : 187, "curve" : -90, "trait" : "penaltyBarrier"},{"v0" : 187, "v1" : 188, "x" : -760, "trait" : "penaltyBarrier"},{"v0" : 189, "v1" : 186, "x" : -760, "trait" : "penaltyBarrier"},{"v0" : 190, "v1" : 191, "x" : -685, "trait" : "penaltyBarrier"},{"v0" : 192, "v1" : 193, "x" : -650, "trait" : "penaltyBarrier", "cMask" : ["wall"], "color" : "FFFFFF"},{"v0" : 194, "v1" : 195, "x" : -885, "trait" : "penaltyBarrier"},{"v0" : 196, "v1" : 197, "x" : -885, "trait" : "penaltyBarrier"},{"v0" : 195, "v1" : 198, "curve" : 90, "trait" : "penaltyBarrier", "x" : -365},{"v0" : 199, "v1" : 196, "curve" : 90, "trait" : "penaltyBarrier", "x" : -365},{"v0" : 202, "v1" : 200, "curve" : -90, "trait" : "penaltyBarrier", "x" : -385},{"v0" : 201, "v1" : 203, "curve" : -90, "trait" : "penaltyBarrier", "x" : -385},{"v0" : 203, "v1" : 204, "x" : -905, "trait" : "penaltyBarrier"},{"v0" : 205, "v1" : 202, "x" : -905, "trait" : "penaltyBarrier"},{"v0" : 206, "v1" : 207, "x" : -1080, "cMask" : ["blue"], "vis" : false, "pos" : [-495,0]},{"vis" : true, "color" : "5E844D", "cMask" : ["wall"], "v0" : 208, "v1" : 209, "y" : 25},{"vis" : true, "color" : "5E844D", "cMask" : ["wall"], "v0" : 210, "v1" : 211, "y" : -25},{"vis" : true, "color" : "5E844D", "cMask" : ["wall"], "v0" : 212, "v1" : 213, "y" : 15},{"vis" : true, "color" : "5E844D", "cMask" : ["wall"], "v0" : 214, "v1" : 215, "y" : -15}],"goals" : [{"p0" : [1333,120], "p1" : [1333,-120], "team" : "blue"},{"p0" : [-1333,120], "p1" : [-1333,-120], "team" : "red"},{"team" : "blue", "p0" : [-1320,-127], "p1" : [-1080,-9]},{"team" : "blue", "p0" : [-1320,127], "p1" : [-1080,9]}],"discs" : [{"radius" : 9, "pos" : [-1080,0], "damping" : 0.989, "cGroup" : ["ball","kick","score"], "invMass" : 0.8},{"pos" : [-1320,120], "trait" : "trave"},{"pos" : [-1320,-120], "trait" : "trave"},{"pos" : [1320,120], "trait" : "trave"},{"pos" : [1320,-120], "trait" : "trave"},{"radius" : 10, "pos" : [0,3000], "bCoef" : 0, "color" : "transparent", "cMask" : ["red","blue"], "invMass" : 0}],"planes" : [{"bCoef" : 0.1, "trait" : "limite", "dist" : -1490, "normal" : [1,0]},{"bCoef" : 0.1, "trait" : "limite", "dist" : -760, "normal" : [0,1]},{"bCoef" : 0.1, "trait" : "limite", "dist" : -760, "normal" : [0,-1], "y" : 760},{"bCoef" : 0.1, "trait" : "limite", "dist" : -1430, "normal" : [-1,0]}],"traits" :{"campo" :{"color" : "F8F8F8", "cMask" : [""]},"trave" :{"radius" : 7, "invMass" : 0, "bCoef" : 0.5},"rede" :{"color" : "F8F8F8", "bCoef" : 0.1, "cMask" : ["red","blue","ball"]},"rede2" :{"bCoef" : 0.1, "vis" : false, "cMask" : ["ball"]},"limite" :{"bCoef" : 0, "cMask" : ["red","blue"]},"sa√≠da" :{"vis" : false, "bCoef" : 0, "cGroup" : ["redKO","blueKO"], "cMask" : ["red","blue"]},"penaltyBarrier" :{"cMask" : ["red","blue"], "cGroup" : ["redKO","blueKO"], "vis" : false}},"ballPhysics" : "disc0","playerPhysics" :{"bCoef" : 0,"acceleration" : 0.12,"kickingAcceleration" : 0.093,"kickStrength" : 8}}`;

			this.protetorSize = 12; // Tamanho do c√≠rculo protetor

			this.campX = 1320;
			this.campY = 658; // tamanho Y sem c√°lculo do campo

			this.playerRadius = 15; // tamanho do jogador
			this.ballRadius = 8; // tamanho da bola

			this.protetorLocal = 3000 // Local onde o circulo protetor ficar√° guardado (APENAS Y)

			this.travePos = 120; // Posi√ß√£o da trave (apenas Y)

			// colocar o X e Y do BLUE, RED o bot j√° faz autom√°tico.

			// C0 = TIRO DE META ESQUERDA / C1 = LATERAL EMBAIXO / C2 = TIRO DE META DIREITA / C3 = LATERAL EM CIMA

			this.ballForces = {

				"black": 0,
				"green": 0.5,
				"white": 0.8,
				"yellow": 1.4,
				"red": 1.9

			};	

			this.protetorSize = 12;
			this.latProtSize = 180;
			this.escProtSize = 275;

			this.redIndex = 0;
			this.blueIndex = 0;

			this.escanteioPos = [1299,638];
			this.tiroPos = [1200,220];

			this.c0pos = -840;
			this.c1pos = 840;

			this.leftY = 673;
			this.leftX = 1333;

			this.positionsRed = {
				"gk": null,
				"vl": null,
				"me": null,
				"md": null,
				"ca": null,
			};

			this.positionsBlue = {
				"gk": null,
				"vl": null,
				"me": null,
				"md": null,
				"ca": null,
			};

			this.spawnPositionRed = [
				[-1050,0],
				[-700,0],
				[-550,-300],
				[-550,300],
				[-250,0],
			]

			this.spawnPositionBlue = [
				[1050,0],
				[700,0],
				[550,300],
				[550,-300],
				[250,0],
			]

		/* MAP INFO */

		this.currentPlayers = {};

		this.publicRoom = HBInit({
			roomName: this.roomName, maxPlayers: this.maxPlayers, public: this.roomPublic, geo: this.geo, noPlayer: true,
			token: "thr1.AAAAAGegapVWUxik4UpPTw.PgOiB_6d-G8"
		});

		this.publicRoom.setTeamsLock(true);
		this.publicRoom.setTimeLimit(5);
		this.publicRoom.setScoreLimit(3);

		this.furarFilaDelay = [];

		this.publicRoom.setCustomStadium(this.map);
		this.penalti = false;

		this.changeUniforme(1);
		this.changeUniforme(2);
		this.initEvents();

	}

	get activePlayers() {
		return this.publicRoom.getPlayerList().filter(p => !this.currentPlayers[p.id].muteAll && !this.currentPlayers[p.id].afk);
	}

	criptografar(str) {
		return encodeURIComponent(str.replace(/\./g, "@e8salg"));
	}

	changeUniforme(team) {

		let randomIndex = Math.round(Math.random() * (uni_database.length-1));

		if(team == 1) this.redIndex = randomIndex;
		if(team == 2) this.blueIndex = randomIndex;

		if(this.redIndex == this.blueIndex || (uni_database[this.redIndex].color == uni_database[this.blueIndex].color)) {
			this.changeUniforme(team);
		}else{
			this.setUniformes();
		}

	}

	setUniformes() {

		let redUniCode = uni_database[this.redIndex].code.split(' ');
		let blueUniCode = uni_database[this.blueIndex].code.split(' ');

		let shirtColorRed = redUniCode.splice(2);
		for(let i = 0; i < shirtColorRed.length; i++) {
			shirtColorRed[i] = '0x' + shirtColorRed[i];
		}
		let shirtColorBlue = blueUniCode.splice(2);
		for(let i = 0; i < shirtColorBlue.length; i++) {
			shirtColorBlue[i] = '0x' + shirtColorBlue[i];
		}

		this.publicRoom.setTeamColors(1, redUniCode[0], '0x' + redUniCode[1], shirtColorRed);
		this.publicRoom.setTeamColors(2, blueUniCode[0], '0x' + blueUniCode[1], shirtColorBlue);
	}

	fixPositions() {

		for(let i = 0; i < Object.keys(this.positionsRed).length; i++) {

			this.publicRoom.setPlayerDiscProperties(Object.values(this.positionsRed)[i], {x: this.spawnPositionRed[i][0], y: this.spawnPositionRed[i][1]});

		}

		for(let i = 0; i < Object.keys(this.positionsBlue).length; i++) {

			this.publicRoom.setPlayerDiscProperties(Object.values(this.positionsBlue)[i], {x: this.spawnPositionBlue[i][0], y: this.spawnPositionBlue[i][1]});

		}

	}

	DiscordEntrada(player) {
		var request = new XMLHttpRequest();
		try{
			request.open("POST", "https://discord.com/api/webhooks/1335837985932840960/IItp-EJYzAwkbR34fID4iqCEly0tM2v5wWRJbUXtwOUkS2rTEhYFRHjXzRBcc1OD-vUx");
			request.setRequestHeader('Content-type', 'application/json');
			var parameters = {
                                avatar_url: 'https://media.discordapp.net/attachments/1327198466392326158/1329372934623727656/Universal_abyss.png?ex=67a12cc6&is=679fdb46&hm=47a9a74ebf944cceecad48d6c1ef72f98f8f61fbc09f22e292ffa07ca9db05b3&=&format=webp&quality=lossless&width=423&height=423',
				username: "[ UA ] Entradas",
				tts: false, 
				content: "```NOME: " + player.name + " | AUTH: " + player.auth + " | CONN: " + player.conn + "```"
			};
			request.send(JSON.stringify(parameters));
		}catch(e){
			console.log(e);
		}
	}

	DiscordChat(player, message) {
		var request = new XMLHttpRequest();
		try{
			request.open("POST", "https://discord.com/api/webhooks/1335838059895459902/kfEUtYuxFtgA_3puQ2QfaEcYZ-5EayNeywMh_5xkxvGLfr21gCljGdw08gr-TUZ6WErD");
			request.setRequestHeader('Content-type', 'application/json');
			var parameters = {
                                avatar_url: 'https://media.discordapp.net/attachments/1327198466392326158/1329372934623727656/Universal_abyss.png?ex=67a12cc6&is=679fdb46&hm=47a9a74ebf944cceecad48d6c1ef72f98f8f61fbc09f22e292ffa07ca9db05b3&=&format=webp&quality=lossless&width=423&height=423',
				username: "[ UA ] Chat",
				tts: false, 
				 content: "```" + player.name + ": " + message + "```"
			};
			request.send(JSON.stringify(parameters));
		}catch(e){
			console.log(e);
		}
	}

	sendPositions() {

		let disponiveisRed = Object.keys(this.positionsRed);

		let posRed = this.positionsRed;

		for(let i = 0; i < Object.keys(posRed).length; i++) {

			if(posRed[Object.keys(posRed)[i]]) disponiveisRed.splice(disponiveisRed.indexOf(Object.keys(posRed)[i]), 1);
			
		}

		let disponiveisBlue = Object.keys(this.positionsBlue);

		let posBlue = this.positionsBlue;

		for(let i = 0; i < Object.keys(posBlue).length; i++) {

			if(posBlue[Object.keys(posBlue)[i]]) disponiveisBlue.splice(disponiveisBlue.indexOf(Object.keys(posBlue)[i]), 1);

		}

		disponiveisRed = disponiveisRed.map(pos => pos.toUpperCase());
		disponiveisBlue = disponiveisBlue.map(pos => pos.toUpperCase());

		let players = (this.publicRoom.getScores() && this.publicRoom.getScores().time > 5) ? this.publicRoom.getPlayerList().filter(p => p.team != 0 && this.currentPlayers[p.id].position == "") : this.publicRoom.getPlayerList().filter(p => p.team != 0);

		for(let i = 0; i < players.length; i++) {

			let player = players[i];

			let playerInfo = this.currentPlayers[players[i].id];

			if(players[i].team == 1) {

				playerInfo.sendPrivateMessage("");
				playerInfo.sendPrivateMessage("");
				playerInfo.sendPrivateMessage("");
				playerInfo.sendPrivateMessage("");
				playerInfo.sendPrivateMessage("");
				playerInfo.sendPrivateMessage("");
				playerInfo.sendPrivateMessage(`                                                                                             [${(disponiveisRed.includes("CA") ? "‚úîÔ∏è" : "‚ùå")}] !ca`, 0xFFFFFF, "normal");
				playerInfo.sendPrivateMessage(`                                                                      [${(disponiveisRed.includes("ME") ? "‚úîÔ∏è" : "‚ùå")}] !me                                  [${(disponiveisRed.includes("MD") ? "‚úîÔ∏è" : "‚ùå")}] !md`, 0xFFFFFF, "normal");
				playerInfo.sendPrivateMessage(`                                                                                         [${(disponiveisRed.includes("VL") ? "‚úîÔ∏è" : "‚ùå")}] !vl`, 0xFFFFFF, "normal");
				playerInfo.sendPrivateMessage(`                                                                                             [${(disponiveisRed.includes("GK") ? "‚úîÔ∏è" : "‚ùå")}] !gk`, 0xFFFFFF, "normal");		

			}else{ 

				playerInfo.sendPrivateMessage("");
				playerInfo.sendPrivateMessage("");
				playerInfo.sendPrivateMessage("");
				playerInfo.sendPrivateMessage("");
				playerInfo.sendPrivateMessage("");
				playerInfo.sendPrivateMessage("");
				playerInfo.sendPrivateMessage(`                                                                                             [${(disponiveisBlue.includes("CA") ? "‚úîÔ∏è" : "‚ùå")}] !ca`, 0xFFFFFF, "normal");
				playerInfo.sendPrivateMessage(`                                                                      [${(disponiveisBlue.includes("ME") ? "‚úîÔ∏è" : "‚ùå")}] !me                                  [${(disponiveisBlue.includes("MD") ? "‚úîÔ∏è" : "‚ùå")}] !md`, 0xFFFFFF, "normal");
				playerInfo.sendPrivateMessage(`                                                                                         [${(disponiveisBlue.includes("VL") ? "‚úîÔ∏è" : "‚ùå")}] !vl`, 0xFFFFFF, "normal");
				playerInfo.sendPrivateMessage(`                                                                                             [${(disponiveisBlue.includes("GK") ? "‚úîÔ∏è" : "‚ùå")}] !gk`, 0xFFFFFF, "normal");		
			
			}

		}
	}

	sendPositionsSolo(id) {

		let disponiveisRed = Object.keys(this.spawnPositionRed);

		let posRed = this.positionsRed;

		for(let i = 0; i < Object.keys(posRed).length; i++) {

			if(posRed[Object.keys(posRed)[i]]) disponiveisRed.splice(disponiveisRed.indexOf(Object.keys(posRed)[i]), 1);
			
		}

		let disponiveisBlue = Object.keys(this.spawnPositionBlue);

		let posBlue = this.positionsBlue;

		for(let i = 0; i < Object.keys(posBlue).length; i++) {

			if(posBlue[Object.keys(posBlue)[i]]) disponiveisBlue.splice(disponiveisBlue.indexOf(Object.keys(posBlue)[i]), 1);

		}

		disponiveisRed = disponiveisRed.map(pos => pos.toUpperCase());
		disponiveisBlue = disponiveisBlue.map(pos => pos.toUpperCase());

		let player = this.publicRoom.getPlayer(id);

		let playerInfo = this.currentPlayers[player.id];

		if(player.team == 1) {
			playerInfo.sendPrivateMessage("");
			playerInfo.sendPrivateMessage("");
			playerInfo.sendPrivateMessage("");
			playerInfo.sendPrivateMessage("");
			playerInfo.sendPrivateMessage("");
			playerInfo.sendPrivateMessage("");
			playerInfo.sendPrivateMessage(`                                                                                             [${(disponiveisRed.includes("CA") ? "‚úîÔ∏è" : "‚ùå")}] !ca`, 0xFFFFFF, "normal");
			playerInfo.sendPrivateMessage(`                                                                      [${(disponiveisRed.includes("ME") ? "‚úîÔ∏è" : "‚ùå")}] !me                                  [${(disponiveisRed.includes("MD") ? "‚úîÔ∏è" : "‚ùå")}] !md`, 0xFFFFFF, "normal");
			playerInfo.sendPrivateMessage(`                                                                                         [${(disponiveisRed.includes("VL") ? "‚úîÔ∏è" : "‚ùå")}] !vl`, 0xFFFFFF, "normal");
			playerInfo.sendPrivateMessage(`                                                                                             [${(disponiveisRed.includes("GK") ? "‚úîÔ∏è" : "‚ùå")}] !gk`, 0xFFFFFF, "normal");		

		}else{ 

			playerInfo.sendPrivateMessage("");
			playerInfo.sendPrivateMessage("");
			playerInfo.sendPrivateMessage("");
			playerInfo.sendPrivateMessage("");
			playerInfo.sendPrivateMessage("");
			playerInfo.sendPrivateMessage("");
			playerInfo.sendPrivateMessage(`                                                                                             [${(disponiveisBlue.includes("CA") ? "‚úîÔ∏è" : "‚ùå")}] !ca`, 0xFFFFFF, "normal");
			playerInfo.sendPrivateMessage(`                                                                      [${(disponiveisBlue.includes("ME") ? "‚úîÔ∏è" : "‚ùå")}] !me                                  [${(disponiveisBlue.includes("MD") ? "‚úîÔ∏è" : "‚ùå")}] !md`, 0xFFFFFF, "normal");
			playerInfo.sendPrivateMessage(`                                                                                         [${(disponiveisBlue.includes("VL") ? "‚úîÔ∏è" : "‚ùå")}] !vl`, 0xFFFFFF, "normal");
			playerInfo.sendPrivateMessage(`                                                                                             [${(disponiveisBlue.includes("GK") ? "‚úîÔ∏è" : "‚ùå")}] !gk`, 0xFFFFFF, "normal");		
		}
		
	}

	newTouch(player, kick=false) {

    	this.lastPlayersTouched[3] = this.lastPlayersTouched[2];
    	this.lastPlayersTouched[2] = this.lastPlayersTouched[1];
		this.lastPlayersTouched[1] = this.lastPlayersTouched[0];
		this.lastPlayersTouched[0] = player;

		this.lastTeamTouched = this.lastPlayersTouched[0].team;

		if(kick) {

			this.sendAnnouncement(mensagenschute[Math.floor(Math.random() * mensagenschute.length)], null, 0xFFD700, "bold", 2);

			this.lastPlayersKicked[3] = this.lastPlayersKicked[2];
	    	this.lastPlayersKicked[2] = this.lastPlayersKicked[1];
			this.lastPlayersKicked[1] = this.lastPlayersKicked[0];
			this.lastPlayersKicked[0] = player;

			this.restartBallForces();

			if(this.actualForce == 'black') return;

			this.setBallForce('white');

			if(this.cobranca) {

				this.cobranca = false;

				this.desprotectBall();
				this.desafastarTeam();

			}

		} else {

			let playerInfo = this.currentPlayers[player.id];

			playerInfo.ballForce++;

			if(this.cobranca && this.actualForce == 'black') return;

			//this.sendAnnouncement(`‚ö° ${playerInfo.name} fez contato com a bola! üöÄ For√ßa: [üî• ${playerInfo.ballForce.toFixed(2)}]`, null, 0xFF4500, "bold", 2);

			if(this.cobranca) {

				if(this.cobranca == 'lateral') {

					switch(playerInfo.ballForce) {

						case 1:

							this.setBallForce('white');

						break;

						case 2:

							this.setBallForce('yellow');

						break;

						case 3:

							this.setBallForce('green');
							playerInfo.ballForce = 0;

						break;

					}

				}else if(this.cobranca == 'escanteio'){

					switch(playerInfo.ballForce) {

						case 1:

							this.setBallForce('yellow');

						break;

						case 2:

							this.setBallForce('red');

						break;

						case 3:

							this.setBallForce('green');

						break;

						case 4:

							this.setBallForce('white');
							playerInfo.ballForce = 0;

						break;

					}

				}else if(this.cobranca == 'tiro'){

					switch(playerInfo.ballForce) {

						case 1:

							this.setBallForce('yellow');

						break;

						case 2:

							this.setBallForce('red');

						break;

						case 3:

							this.setBallForce('white');
							playerInfo.ballForce = 0;

						break;

					}

				}

			}else{

				switch(playerInfo.ballForce) {

					case 1:

						this.setBallForce('white');

					break;

					case 2:

						this.setBallForce('yellow');
						playerInfo.ballForce = 0;

					break;

				}

			}

		}

	}

	endMatch(scores) {
    let winner = 1;

    if(scores.blue > scores.red) winner = 2;

    let looser = winner == 1 ? 2 : 1;

    let team = winner;

    let winnerTeam = this.publicRoom.getPlayerList().filter(p => p.team == winner);
    let looserTeam = this.publicRoom.getPlayerList().filter(p => p.team == looser);

    if(this.officialMatch) {
        for(let i = 0; i < winnerTeam.length; i++) {
            let winnerInfo = this.currentPlayers[winnerTeam[i].id];
            winnerInfo.setStatus("vitorias");
        }

        for(let i = 0; i < looserTeam.length; i++) {
            let looserInfo = this.currentPlayers[looserTeam[i].id];
            looserInfo.setStatus("derrotas");
        }

        // Adicionando chamada ao webhook
        RecSistem.sendDiscordWebhook(scores);
        this.sendAnnouncement(`üì§ Grava√ß√£o enviada ao Discord! üõ∞Ô∏è ID: [${getDate()}-${cod}${cod1}${cod2}${cod3}${cod4}]`, null, 0x32CD32, "bold", 2);
    }

    if(winner == 1) {
        this.sendAnnouncement("üéâ **Vit√≥ria do time vermelho!** üî¥\n\n‚ú® Parab√©ns √† equipe vermelha pela grande conquista! üéØ", 0xFF0000, "bold");
    } else if(winner == 2) {
        this.sendAnnouncement("üéâ **Vit√≥ria do time azul!** üîµ\n\n‚ú® Parab√©ns √† equipe azul pela incr√≠vel conquista! üèÜ", 0x0000FF, "bold");
    }

    setTimeout(() => {
        this.publicRoom.stopGame();
        this.changeUniforme(looser);
    }, 500);
}

	calcElo(elo) {

		if(elo < 30) {
			return 'Bronze I';
		}else if(elo < 60) {
			return "Bronze II";
		}else if(elo < 90) {
			return "Bronze III";
		}else if(elo < 120) {
			return "Prata I";
		}else if(elo < 150) {
			return "Prata II";
		}else if(elo < 180) {
			return "Prata III";
		}else if(elo < 210) {
			return "Ouro I";
		}else if(elo < 240) {
			return "Ouro II";
		}else if(elo < 270) {
			return "Ouro III";
		}else if(elo < 300) {
			return "Platina I";
		}else if(elo < 330) {
			return "Platina II";
		}else if(elo < 360) {
			return "Platina III";
		}else if(elo < 390) {
			return "Diamante I";
		}else if(elo < 420) {
			return "Diamante II";
		}else if(elo < 450) {
			return "Diamante III";
		}else if(elo < 580) {
			return "Mestre";
		}else{
			return "Lenda";
		}

	}

	updateAdmins() { 

		let players = this.publicRoom.getPlayerList();
		if ( players.length == 0 ) return;
		if ( players.find((player) => player.admin) != null ) return;

		let playersR = this.publicRoom.getPlayerList().filter(p => this.currentPlayers[p.id].registred);

		if(playersR.length > 1) {
			this.publicRoom.setPlayerAdmin(playersR[0].id, true);
		}else{
			this.publicRoom.setPlayerAdmin(players[0].id, true);
		}
	}

	manageTouchs() {

		this.somebodyTouched = false;
		this.somebodyNext = false;

	    const ballPosition = this.publicRoom.getBallPosition();

	    let triggerDistance = 15 + this.ballRadius + 0.01;

	    if(this.cobranca) {
	    	triggerDistance = 15 + this.protetorSize + 0.01;
	    }

	    let players = this.publicRoom.getPlayerList().filter(p => p.team != 0);

	    for (let i = 0; i < players.length; i++) {

	    	let distanceToBall = this.pointDistance(players[i].position, ballPosition);
	    	let playerInfo = this.currentPlayers[players[i].id];

	    	if(!playerInfo) {
	    		this.publicRoom.kickPlayer(players[i].id, 'Erro de jogo. Reentre na sala.', false);
	    		continue;
	    	}

	    	if(distanceToBall < triggerDistance + 1) {

	    		this.somebodyTouched = true;

	    		if(!this.waitToCount) {

	            	this.waitToCount = true;

	            	this.restartBallForces(players[i].id);

	            	this.newTouch(players[i]);

	    		}
	    	}

	    	if(distanceToBall > triggerDistance + 60 && playerInfo.ballForce != 0 && !this.cobranca) {

	    		this.sendAnnouncement(`üõë AFASTOU! üöÄ`, null, 0xFF0000, "bold", 2);
	    		playerInfo.ballForce = 0;

	    	}

	    }

	    if(!this.somebodyTouched) {
	    	this.waitToCount = false;
	    }

	    this.checkSaidas();

	}

	async checkSaidas() {

		let ballPosition = this.publicRoom.getBallPosition();
		let x = ballPosition.x;
		let y = ballPosition.y;

		let xnegative = x < 0 ? -1 : 1;
		let ynegative = y < 0 ? -1 : 1;

		if((x < -1300 || x > 1300) && (y > -120 && y < 120) || !this.countAFK) {

			return;

		}

		if(this.cobranca) return;

		if((y > this.leftY || y < this.leftY * -1)) {

			if(this.cobranca) return;

			this.cobranca = 'lateral';

			this.cobrarTime = 10;

			await this.setBallForce('black');

			await this.setBallProp({xspeed: 0, yspeed: 0, y: this.leftY * ynegative});

			await this.protectBall();

			await this.afastarTeam(this.lastTeamTouched);

			setTimeout(() => {this.setBallForce('white');}, 100);

			this.lastTeamTouched = this.lastTeamTouched == 1 ? 2 : 1;

			await this.sendAnnouncement(`${this.lastTeamTouched == 1 ? "üî¥" : "üîµ"} Lateral para o time ${this.lastTeamTouched == 1 ? "vermelho" : "azul"}`, 0xFFFFFF, "bold");

		}else if((x > this.leftX || x < this.leftX * -1)) {

			if(x < 0 && this.lastTeamTouched == 1 || x > 0 && this.lastTeamTouched == 2) {

				if(this.cobranca) return;

				this.cobranca = 'escanteio';

				this.cobrarTime = 15;

				await this.setBallForce('black');

				await this.setBallProp({xspeed: 0, yspeed: 0, x: this.escanteioPos[0] * xnegative, y: this.escanteioPos[1] * ynegative});

				await this.protectBall();

				await this.afastarTeam(this.lastTeamTouched);

				setTimeout(() => {this.setBallForce('yellow');}, 100);

				this.lastTeamTouched = this.lastTeamTouched == 1 ? 2 : 1;

				await this.sendAnnouncement(`${this.lastTeamTouched == 1 ? "üî¥" : "üîµ"} Escanteio para o time ${this.lastTeamTouched == 1 ? "vermelho" : "azul"}`, 0xFFFFFF, "bold");

			}else if(x < 0 && this.lastTeamTouched == 2 || x > 0 && this.lastTeamTouched == 1) {

				if(this.cobranca) return;

				this.cobranca = 'tiro';

				this.cobrarTime = 10;

				await this.setBallForce('black');

				await this.setBallProp({xspeed: 0, yspeed: 0, x: this.tiroPos[0] * xnegative, y: this.tiroPos[1] * ynegative});

				await this.protectBall();

				await this.afastarTeam(this.lastTeamTouched);

				setTimeout(() => {this.setBallForce('yellow');}, 100);

				this.lastTeamTouched = this.lastTeamTouched == 1 ? 2 : 1;

				await this.sendAnnouncement(`${this.lastTeamTouched == 1 ? "üî¥" : "üîµ"} Tiro de meta para o time ${this.lastTeamTouched == 1 ? "vermelho" : "azul"}`, 0xFFFFFF, "bold");

			}

		}


	}

	async tempoExcedido() {

		let cobranca = this.cobranca;

		await this.setBallForce('black');

		await this.desprotectBall();
		await this.desafastarTeam();

		this.cobranca = false;
		this.cobrarTime = 0;

		let ballPosition = this.publicRoom.getBallPosition();
		let x = ballPosition.x;
		let y = ballPosition.y;

		let xnegative = x < 0 ? -1 : 1;
		let ynegative = y < 0 ? -1 : 1;

		if(cobranca == 'lateral') {

			this.cobrarTime = 10;

			this.cobranca = 'lateral';

			await this.setBallForce('black');

			await this.setBallProp({xspeed: 0, yspeed: 0, y: this.leftY * ynegative});

			await this.protectBall();

			await this.afastarTeam(this.lastTeamTouched);

			setTimeout(() => {this.setBallForce('white');}, 100);

			this.lastTeamTouched = this.lastTeamTouched == 1 ? 2 : 1;

			await this.sendAnnouncement(`[TEMPO EXCEDIDO] ${this.lastTeamTouched == 1 ? "üî¥" : "üîµ"} Lateral para o time ${this.lastTeamTouched == 1 ? "vermelho" : "azul"}`, 0xFFFFFF, "bold");

		}else if(cobranca == 'tiro') {

			await this.restartBallForces();
			await this.desprotectBall();
			await this.desafastarTeam();
			await this.setBallForce('white');

			await this.sendAnnouncement(`[TEMPO EXCEDIDO] Bola Liberada.`, 0xFFFFFF, "bold");

		}else if(cobranca == 'escanteio') {

			this.cobrarTime = 10;

			this.cobranca = 'tiro';

			await this.setBallProp({xspeed: 0, yspeed: 0, x: this.tiroPos[0] * xnegative, y: this.tiroPos[1] * ynegative});

			await this.protectBall();

			await this.afastarTeam(this.lastTeamTouched);

			setTimeout(() => {this.setBallForce('yellow');}, 100);

			this.lastTeamTouched = this.lastTeamTouched == 1 ? 2 : 1;

			await this.sendAnnouncement(`[TEMPO EXCEDIDO] ${this.lastTeamTouched == 1 ? "üî¥" : "üîµ"} Tiro de meta para o time ${this.lastTeamTouched == 1 ? "vermelho" : "azul"}`, 0xFFFFFF, "bold");

		}


	}

	fixAllPos() {
		let players = this.publicRoom.getPlayerList().filter(p => p.team != 0);

		for(let i = 0; i < Object.keys(this.positionsRed).length; i++) {

			let playerT = players.filter(p => p.id == this.positionsRed[Object.keys(this.positionsRed)[i]])[0];

			if(playerT) {

				if(playerT.team != 1) {

					this.positionsRed[Object.keys(this.positionsRed)[i]] = null;
					this.currentPlayers[playerT.id].position = "";

				}

			}else{
				this.positionsRed[Object.keys(this.positionsRed)[i]] = null;
			}

		}

		for(let i = 0; i < Object.keys(this.positionsBlue).length; i++) {

			let playerT = players.filter(p => p.id == this.positionsBlue[Object.keys(this.positionsBlue)[i]])[0];

			if(playerT) {

				if(playerT.team != 2) {

					this.positionsBlue[Object.keys(this.positionsBlue)[i]] = null;
					this.currentPlayers[playerT.id].position = "";

				}

			}else{
				this.positionsBlue[Object.keys(this.positionsBlue)[i]] = null;
			}

		}

		for(let i = 0; i < players.length; i++) {

			let player = players[i];

			if(player.team == 1) {

				if(Object.values(this.positionsRed).includes(player.id)) {
					this.currentPlayers[player.id].position = Object.keys(this.positionsRed).filter(p => this.positionsRed[p] == player.id)[0];;
				}else{
					this.currentPlayers[player.id].position = "";
				}

			}else if(player.team == 2) {

				if(Object.values(this.positionsBlue).includes(player.id)) {
					this.currentPlayers[player.id].position = Object.keys(this.positionsBlue).filter(p => this.positionsBlue[p] == player.id)[0];
				}else{
					this.currentPlayers[player.id].position = "";
				}

			}

		}
	}

	restartBallForces(exception) {

		let players = this.publicRoom.getPlayerList();

		for(let i = 0; i < players.length; i++) {

			let playerInfo = this.currentPlayers[players[i].id];

			if(playerInfo.leaving) continue;
			if(players[i].id == exception) continue;

			playerInfo.ballForce = 0;

		}

	}

	centralizarMensagem(message) {

		let actualMessage = "                                                                                                         ";

		for(let i = 0; i < message.length; i++) {

			actualMessage = actualMessage.substr(1);

		}

		let result = actualMessage + "" + message;

		return result;

	}

	initEvents() {

		this.publicRoom.onPlayerJoin = (player) => {
    console.log(player.name + " entrou na sala");
    console.log(new Date().getHours() + ":" + new Date().getMinutes() + ":" + new Date().getSeconds() + "." + new Date().getMilliseconds() + " ‚û°Ô∏è " + player.name + " [" + player.id + "] entrou na host. (auth: " + player.auth + " | conn: " + player.conn + ")");

    // Informa√ß√µes do jogador
    var conn = player.conn;
    var ipv4 = conn.match(/.{1,2}/g).map(function(v) {
        return String.fromCharCode(parseInt(v, 16));
    }).join('');

    // Envia mensagem para o Discord com informa√ß√µes do jogador
    sendAnnouncementToDiscord(
        "```" + "üìù Informa√ß√µes do jogador, conn, auth, IP e data ‚è∞" + "\n" +
        "O jogador " + player.name + " entrou na sala " + "\n" +
        "conn: " + player.conn + "üåé" + "\n" +
        "auth: " + player.auth + "üíª" + "\n" +
        "IPV4: " + (ipv4) + "üåê" + "\n" +
        "Data: " + `${getDateInfo()}` + "```");

    // Adicionando as fun√ß√µes de data e hora
    function getDateInfo() {
        let data = new Date(),
            dia = data.getDate().toString().padStart(2, '0'),
            mes = (data.getMonth() + 1).toString().padStart(2, '0'),
            ano = data.getFullYear(),
            horas = data.getHours().toString().padStart(2, '0'),
            minutos = data.getMinutes().toString().padStart(2, '0'),
            segundos = data.getSeconds().toString().padStart(2, '0');
        return `${dia} do ${mes} de ${ano}, √°s ${horas}:${minutos}:${segundos}`;
    }

    function dataehora() {
        let data = new Date(),
            dia = data.getDate().toString().padStart(2, '0'),
            mes = (data.getMonth() + 1).toString().padStart(2, '0'),
            ano = data.getFullYear(),
            horas = data.getHours().toString().padStart(2, '0'),
            minutos = data.getMinutes().toString().padStart(2, '0'),
            segundos = data.getSeconds().toString().padStart(2, '0');
        return `${dia}/${mes} de ${ano}, √°s ${horas}:${minutos} e ${segundos} segundos`;
    }
  
  function getTime(scores) { // returns the current time of the game
	  return "[" + Math.floor(Math.floor(scores.time / 60) / 10).toString() + Math.floor(Math.floor(scores.time / 60) % 10).toString() + ":" + Math.floor(Math.floor(scores.time - (Math.floor(scores.time / 60) * 60)) / 10).toString() + Math.floor(Math.floor(scores.time - (Math.floor(scores.time / 60) * 60)) % 10).toString() + "]"
    }

    function getDate() {
        let data = new Date(),
            dia = data.getDate().toString().padStart(2, '0'),
            mes = (data.getMonth() + 1).toString().padStart(2, '0'),
            ano = data.getFullYear(),
            horas = data.getHours().toString().padStart(2, '0'),
            minutos = data.getMinutes().toString().padStart(2, '0');
        return `${dia}-${mes}-${ano}-${horas}h${minutos}m`;
    }

    this.DiscordEntrada(player);

    if (this.bannedIps.filter(p => p.auth == player.auth || p.conn == player.conn)[0]) {
        this.publicRoom.kickPlayer(player.id, 'Foi detectado uma irregularidade na sua conex√£o. Tente novamente mais tarde.', true);
        return false;
    }

    let newPlayer = new Player(player, player.auth, player.conn);
    this.currentPlayers[player.id] = newPlayer;
    this.updateAdmins();

    let players = this.publicRoom.getPlayerList().length;

    if (players >= Room.maxPlayers - 2 && newPlayer.admin < 3) {
        newPlayer.aboutKick = true;
        newPlayer.sendPrivateMessage("Vaga reservada para a equipe.");
        setTimeout(() => {
            Room.publicRoom.kickPlayer(player.id, "Vaga reservada para a equipe.", false);
        }, 4000);
    } else if (players >= Room.maxPlayers - 10 && newPlayer.admin < 1) {
        newPlayer.aboutKick = true;
        newPlayer.sendPrivateMessage("Vaga reservada para registrados.");
        setTimeout(() => {
            Room.publicRoom.kickPlayer(player.id, "Vaga reservada para registrados.", false);
        }, 4000);
    }

    function sendAnnouncementToDiscord(message) {
        console.log(new Date().getHours() + ":" + new Date().getMinutes() + ":" + new Date().getSeconds() + "." + new Date().getMilliseconds() + " ‚û°Ô∏è [LOG] An√∫ncio enviado para o Discord:", message);

        var request = new XMLHttpRequest();
        request.open("POST", "https://discord.com/api/webhooks/1335837985932840960/IItp-EJYzAwkbR34fID4iqCEly0tM2v5wWRJbUXtwOUkS2rTEhYFRHjXzRBcc1OD-vUx"); // LOG ENTRADA

        request.setRequestHeader('Content-type', 'application/json');

        var params = {
            avatar_url: 'https://media.discordapp.net/attachments/1327198466392326158/1329372934623727656/Universal_abyss.png?ex=67a12cc6&is=679fdb46&hm=47a9a74ebf944cceecad48d6c1ef72f98f8f61fbc09f22e292ffa07ca9db05b3&=&format=webp&quality=lossless&width=423&height=423',
            username: '[ UA ] Entradas',
            content: message
        };

        request.send(JSON.stringify(params));
    }
};
// SISTEMA DE GRAVA√á√ïES //

let replaystest = `https://discord.com/api/webhooks/1335868422629756928/EoR1udZepzwKh_1P0rbfK9H4dq9VbqNig-clPLc7V8HmJA48mOvN_zWUzvhENQMNaOhb`;

let RecSistem = {
    getCustomDate: ()=>{
        let
        data = new Date().toLocaleDateString().split("/").join("-"),
        relogio = new Date().toLocaleTimeString().split(":");

        return `${data}-${relogio[0]}h${relogio[1]}m`;
    },
    getScoresTime: time=>{
        return ~~(Math.trunc(time) / 60) + ":" + (Math.trunc(time)%60).toString().padStart(2, '0');
    },
    sendDiscordWebhook: scores=>{
        let
        red = room.getPlayerList().filter((player)=>player.team == 1).map((player)=> player.name),
        blue = room.getPlayerList().filter((player)=>player.team == 2).map((player)=> player.name);

        let form = new FormData();
        form.append(null, new File( [room.stopRecording()], `${getDate()}`+`${cod}${cod1}${cod2}${cod3}${cod4}.hbr2`, {"type": "text/plain"} ));
        form.append("payload_json", JSON.stringify(RecSistem.getParams(scores, red, blue)));

        let xhr = new XMLHttpRequest();
        xhr.open("POST", replaystest);
        xhr.send(form);
    },
    getParams: (scores, red, blue)=>{
        let params = {
          "username": "[ UA ] REPLAYS",
          "avatar_url": "https://media.discordapp.net/attachments/1327198466392326158/1329372934623727656/Universal_abyss.png?ex=67a12cc6&is=679fdb46&hm=47a9a74ebf944cceecad48d6c1ef72f98f8f61fbc09f22e292ffa07ca9db05b3&=&format=webp&quality=lossless&width=423&height=423",
          "content": "----------------------------------------------------------------------------------",
          "embeds": [{
            "title": "-------- [ UA ] --------",
			color: 11303206,
            "description": "REPLAY - 2023",
            "timestamp": null,
            "author": { "name": roomName },
			image: {
				url: "https://media.discordapp.net/attachments/1328936852752699485/1329455078377263195/standard_11.gif?ex=67a17946&is=67a027c6&hm=8ca733fbd3c61d27013407c986d6ef459e73a3002496e7bfa03d58312bcce9e9&="
			},
			thumbnail: {
				url: "https://media.discordapp.net/attachments/1327198466392326158/1329372934623727656/Universal_abyss.png?ex=67a12cc6&is=679fdb46&hm=47a9a74ebf944cceecad48d6c1ef72f98f8f61fbc09f22e292ffa07ca9db05b3&=&format=webp&quality=lossless&width=423&height=423"
			},
            "footer": {
                "text": `${getDate()}`+`${cod}${cod1}${cod2}${cod3}${cod4}`,
            },
            "fields": [
            { "name": "RED", "value": `${red.join("\n")}\n**GOLS**\n${scores.red}`, "inline": true },
            { "name": "BLUE", "value": `${blue.join("\n")}\n**GOLS**\n${scores.blue}`, "inline": true },
            { "name": "Tempo que durou a partida", "value": RecSistem.getScoresTime(scores.time) },
            ]
        }],
        "components": []
    };
    return params;
}
};
// FIM DO SISTEMA DE GRAVA√á√ïES //
this.publicRoom.onPlayerLeave = (player) => {
    let players = this.publicRoom.getPlayerList();

    setTimeout(() => { delete this.currentPlayers[player.id] }, 10000);

    if (player.team == 0) return;

    if (this.officialMatch) this.publicRoom.pauseGame(1);

    this.updateAdmins();
}

		this.publicRoom.onStadiumChange = (newStadiumName, byPlayer) => {

			if(newStadiumName.includes("P√™nalti")) {

				this.penalti = true;

			}else{

				this.penalti = false;

			}

			if(!byPlayer) return;

			let byPlayerInfo = this.currentPlayers[byPlayer.id];

			if(!byPlayerInfo.officialAdm) {

				this.publicRoom.setCustomStadium(this.map);
				this.publicRoom.setScoreLimit(3);
				this.publicRoom.setTimeLimit(5);

			}
		}

		this.publicRoom.onRoomLink = (link) => {
			console.log(link);
			if(!this.testMode) return;
		}

		this.publicRoom.onPlayerChat = (player, message) => {

			let msg = message.split(" ");

			let playerInfo = this.currentPlayers[player.id];

			if(playerInfo.aboutKick) return false;

			if(playerInfo.muteAll) {

				db = getDB();

				if(db.users[player.name]) {

					if(db.users[player.name].pass == message) {

						db.users[player.name].auth = playerInfo.auth;
						db.users[player.name].conn = playerInfo.conn;
						playerInfo.realPlayer(db.users[player.name].admin);

					}

				}

				return false;
			}

			console.log(`${player.name}: ${message}`);
			this.DiscordChat(player, message);

			if(msg[0][0] == "!") {

				var command = msg[0].substring(1, msg[0].length).toLowerCase();
				var args = msg.splice(1, msg.length);

				if(Object.keys(this.positionsRed).includes(command)) {

					if(!this.officialMatch || !this.gameOcorring || player.team == 0 || !this.gamePaused) return false;

					if(playerInfo.position) {
						playerInfo.sendPrivateMessage("‚ö†Ô∏è Voc√™ j√° tem uma posi√ß√£o. Para remover digite !rpos");
						return false;
					}

					if(player.team == 1) {

						if(this.positionsRed[command]) {

							if(playerInfo.admin >= 2) {

								let roubadoInfo = this.currentPlayers[this.positionsRed[command]]

								if(roubadoInfo.roubou) {
									playerInfo.sendPrivateMessage("‚ö†Ô∏è Algum colaborador j√° roubou essa posi√ß√£o.");
									return false;
								}

								this.positionsRed[command] = null;
								roubadoInfo.position = "";

								this.publicRoom.setPlayerAvatar(roubadoInfo.id, "");

								this.publicRoom.setPlayerDiscProperties(roubadoInfo.id, {x: -350});

								playerInfo.roubou = true;

								this.sendAnnouncement(`Ops! O üíé colaborador ${playerInfo.name} roubou a posi√ß√£o de ${command}! ü§≠`, 0x334e9e)

							}else{
								playerInfo.sendPrivateMessage("‚ö†Ô∏è Algu√©m j√° ocupou essa posi√ß√£o.");
								return false;
							}
							
						}

						this.positionsRed[command] = player.id;
						playerInfo.position = command;

						this.publicRoom.setPlayerAvatar(player.id, playerInfo.position.toUpperCase());

						if(this.publicRoom.getScores().time < 2) this.fixPositions();

						this.sendPositions();

					}else if(player.team == 2) {

						if(this.positionsBlue[command]) {
							if(playerInfo.admin >= 2) {

								let roubadoInfo = this.currentPlayers[this.positionsBlue[command]]

								if(roubadoInfo.roubou) {
									playerInfo.sendPrivateMessage("‚ö†Ô∏è Algum colaborador j√° roubou essa posi√ß√£o.");
									return false;
								}

								this.positionsBlue[command] = null;
								roubadoInfo.position = "";

								this.publicRoom.setPlayerAvatar(roubadoInfo.id, "");

								this.publicRoom.setPlayerDiscProperties(roubadoInfo.id, {x: 350});

								playerInfo.roubou = true;

							}else{
								playerInfo.sendPrivateMessage("‚ö†Ô∏è Algu√©m j√° ocupou essa posi√ß√£o.");
								return false;
							}
						}

						this.positionsBlue[command] = player.id;
						playerInfo.position = command;

						this.publicRoom.setPlayerAvatar(player.id, playerInfo.position.toUpperCase());

						if(this.publicRoom.getScores().time < 2) this.fixPositions();
						
						this.sendPositions();

					}
					
					if(Object.values(this.positionsRed).filter(v => v == null).length == 0 && Object.values(this.positionsBlue).filter(v => v == null).length == 0) {

  						this.publicRoom.pauseGame(false);

  					}

					return false;

				}

				switch(command) {

					case "rpos":

						if(!this.gamePaused || player.team == 0 || !this.gameOcorring) return false;

						if(!playerInfo.position) {
							return false;
						}

						if(player.team == 1) {
							this.positionsRed[playerInfo.position] = null;
						}else{
							this.positionsBlue[playerInfo.position] = null;
						}

						playerInfo.position = "";

						this.publicRoom.setPlayerAvatar(player.id, playerInfo.position.toUpperCase());

						this.publicRoom.setPlayerDiscProperties(player.id, {x: (player.team == 1 ? -350 : 350)});

						playerInfo.sendPrivateMessage("Voc√™ removeu sua posi√ß√£o.");

					break;

					case "registrar":

						db = getDB();

				        	if(db.users[player.name]) {playerInfo.sendPrivateMessage('Voc√™ j√° tem um registro.');return false;}

				        	if(!args[0] || args[1]) {playerInfo.sendPrivateMessage('Digite !registrar (senha sem espa√ßos)');return false;}

				        	playerInfo.createStatus(args[0]);

				        	playerInfo.sendPrivateMessage('Agora sua senha √© ' + args[0]);

				        	playerInfo.realPlayer();

					break;



					case "uni":
					case "unis":
					case "camisas":
					case "camisetas":
					case "uniformes":
					case "uniforme":
					case "camisa":
					case "camiseta":
					case "uniform":
					    if (this.gamePaused || player.team === 0 || !this.gameOcorring) {
					        console.log('Jogo pausado ou jogador n√£o tem time.');
					        return false;
					    }

					    let team = player.team;
					    //console.log('Time do jogador:', team);

					    this.changeUniforme(team);

					    if (playerInfo) {
					        playerInfo.sendPrivateMessage("[üëï] Seu time teve o uniforme alterado. ‚ú®");
					    } else {
					        console.log('playerInfo n√£o est√° definido corretamente.');
					    }

					break;



					case "dono_502500":

						db = getDB();

						if(!db.users[player.name]) {
							playerInfo.sendPrivateMessage("Se registre primeiro");
							return false;
						}

						db.users[player.name].admin = 6;

						saveDB();

						playerInfo.realPlayer(5);

						return false;

					break;
                                        
                                        case "diretor_402500": 

						db = getDB();

						if(!db.users[player.name]) {
							playerInfo.sendPrivateMessage("Se registre primeiro");
							return false;
						}

						db.users[player.name].admin = 5;

						saveDB();

						playerInfo.realPlayer(5);

						return false;

					break;

                                        case "admin_302500":

						db = getDB();

						if(!db.users[player.name]) {
							playerInfo.sendPrivateMessage("Se registre primeiro");
							return false;
						}

						db.users[player.name].admin = 4;

						saveDB();

						playerInfo.realPlayer(5);

						return false;

					break;

                                        case "moderador_202500":

						db = getDB();

						if(!db.users[player.name]) {
							playerInfo.sendPrivateMessage("Se registre primeiro");
							return false;
						}

						db.users[player.name].admin = 3;

						saveDB();

						playerInfo.realPlayer(5);

						return false;

					break;

                                        case "embaixador_287541": 

						db = getDB();

						if(!db.users[player.name]) {
							playerInfo.sendPrivateMessage("Se registre primeiro");
							return false;
						}

						db.users[player.name].admin = 2;

						saveDB();

						playerInfo.realPlayer(5);

						return false;

					break;

                                        case "staff_102500":

						db = getDB();

						if(!db.users[player.name]) {
							playerInfo.sendPrivateMessage("Se registre primeiro");
							return false;
						}

						db.users[player.name].admin = 2;

						saveDB();

						playerInfo.realPlayer(5);

						return false;

					break;

					case "setadmin":

						if(playerInfo.admin < 5 || !playerInfo.adm && !playerInfo.diretor) return false;

						if(isNaN(args[1]) || Number(args[1]) < 0 || Number(args[1]) > 5) {
							playerInfo.sendPrivateMessage("use !setadmin #id nivel(0-5)");
							return false;
						}

						let newAdmin = this.publicRoom.getPlayer(args[0][0] == "#" ? args[0].substring(1) : args[0]);
						let newAdminInfo = newAdmin ? this.currentPlayers[newAdmin.id] : null;

						if(!newAdminInfo) {
							playerInfo.sendPrivateMessage("Jogador n√£o encontrado, use !setadmin #id nivel(0-4)"); 
							return false;
						}

						if(!newAdminInfo.registred) {
							playerInfo.sendPrivateMessage("N√£o √© possivel alterar o admin desse jogador. Ele n√£o est√° registrado");
							return false;
						}
						if(newAdminInfo.admin >= playerInfo.admin) {
							playerInfo.sendPrivateMessage("N√£o √© possivel alterar o admin desse jogador. Ele possui um cargo maior que o seu.");
							return false;
						}

						db = getDB();

						db.users[newAdmin.name].admin = Number(args[1]);

						saveDB();

						newAdminInfo.realPlayer(args[1]);

					break;

					case "furarfila":

						if(playerInfo.admin < 2) return false;

						if(this.furarFilaDelay.includes(playerInfo.auth)) {
							playerInfo.sendPrivateMessage("Voc√™ s√≥ pode usar esse comando de 30 em 30 minutos.");
							return false;
						}

						this.furarFilaDelay.push(playerInfo.auth);
						setTimeout(() => { this.furarFilaDelay.splice(this.furarFilaDelay.indexOf(playerInfo.auth), 1) }, 30 * 60 * 1000);

						this.publicRoom.reorderPlayers([player.id], true);

						this.sendAnnouncement(`Ops! O üíé colaborador ${playerInfo.name} furou a fila! ü§≠`, 0x334e9e)

					break;

					case "mudaruni":

						if(!player.admin) return false;

						if(!args[0] || !isNaN(args[0]) && args[0] != 1 && args[0] != 2) {
							playerInfo.sendPrivateMessage("use !mudaruni (team)")
							return false
						}

						this.changeUniforme(args[0]);

					break;

					case "resetarstatus":
					case "rrstatus":
					case "rrstats":
					case "reiniciarstatus":
					case "resetarstats":

						if(!playerInfo.adm) return false;

						db = getDB();

						for(let player of Object.values(db.users)) {

							db.users[player.name].status = {
					            'gols': 0,
					            'assis': 0,
					            'contras': 0,
					            'vitorias': 0,
					            'derrotas': 0
					        };

						}

						saveDB();

						playerInfo.sendPrivateMessage("Status resetados!");

					break;

					case "status":
					case "eu":
					case "stats":

						db = getDB();

						if(!db.users[player.name]) return false;

				        let status = db.users[player.name].status;

				        this.sendAnnouncement(this.centralizarMensagem(`Status de üë§ ${player.name}`));
						this.sendAnnouncement(this.centralizarMensagem(`‚öΩ Gols: ${status.gols || 0} | üëü Assist√™ncias: ${status.assistencias || 0} | ü•Ö Contras: ${status.contras || 0}`));
						this.sendAnnouncement(this.centralizarMensagem(`üèÖ Vit√≥rias: ${status.vitorias || 0} | ü•â Derrotas: ${status.derrotas || 0} | üéØ Partidas: ${(status.vitorias || 0) + (status.derrotas || 0)}`));
						this.sendAnnouncement(this.centralizarMensagem(`üîÆ Elo: ${this.calcElo(status.elo || 0)} (${status.elo || 0})`));

					break;

					case "administrador_402500":

						if(playerInfo.admin > 2) {
							this.publicRoom.setPlayerAdmin(player.id, true);
							return false;
						}

					break;

					case "admafk":

						let adm = this.publicRoom.getPlayerList().filter(p => p.admin)[0];
						let admInfo = this.currentPlayers[adm.id];

						if(!admInfo) {
							playerInfo.sendPrivateMessage('Jogador n√£o encontrado.');
							return false;
						}

						if(admInfo.admafk) {

							playerInfo.sendPrivateMessage('J√° estou vendo se o ADM est√° AFK ou n√£o. Um momento...');

						}else{

							this.sendAnnouncement(`${player.name} denunciou ${adm.name} por estar AFK. O ADM tem 20 segundos para dar um sinal de vida.`);

							admInfo.admafk = setTimeout(()=>{this.publicRoom.kickPlayer(adm.id, 'Voc√™ estava AFK.', false);this.updateAdmins()}, 20000);

						}


					break;

					case "realsoccer":
						if(!player.admin) return false;
						if(!this.publicRoom.getScores()) {

							this.publicRoom.setCustomStadium(this.map);
							this.publicRoom.setTimeLimit(5);
							this.publicRoom.setScoreLimit(3);

						}else{playerInfo.sendPrivateMessage("Pare o jogo antes.")}
					break;
					case "penal":
						if(!player.admin) return false;
						if(!this.publicRoom.getScores()) {

							this.publicRoom.setCustomStadium(this.penalMap);
							this.publicRoom.setTimeLimit(0);
							this.publicRoom.setScoreLimit(0);

						}else{playerInfo.sendPrivateMessage("Pare o jogo antes.")}
					break;

					case "disc":
					case "dc":
					case "discord":

						playerInfo.sendPrivateMessage("discord.gg/FcxheWAX9B ou https://discord.com/invite/FcxheWAX9B");

					break;

					case "site":
					case "website":

						playerInfo.sendPrivateMessage("abyssx.netlify.app ou https://abyssx.netlify.app/");

					break;

					case "afk":

						if(!playerInfo.afk) {

							if(player.team != 0) {
								playerInfo.sendPrivateMessage("Voc√™ n√£o pode ficar AFK durante a partida.")
								return false;
							}

							playerInfo.afk = true;

							this.sendAnnouncement(playerInfo.name + " est√° AFK e n√£o pode mais jogar!");

						}else{

							playerInfo.afk = false;

							this.sendAnnouncement(playerInfo.name + " voltou e est√° pronto para jogar!");

						}

					break;

					case "afks":

						let afks = this.publicRoom.getPlayerList().map(p => {if(this.currentPlayers[p.id].afk) return p.name;});

						playerInfo.sendPrivateMessage("AFKS: " + afks.join(", "));

					break;

					case "mutar":

						if(!playerInfo.mod && !playerInfo.adm) return false;

						let playerMute = this.publicRoom.getPlayer(args[0][0] == "#" ? args[0].substr(1) : args[0]);

						if(!playerMute) {
							playerInfo.sendPrivateMessage("üòï N√£o achei ningu√©m com esse ID.");
							return false;
						}

						let playerMuteInfo = this.currentPlayers[playerMute.id];

						if(playerMuteInfo.mod || playerMuteInfo.adm) {
							playerInfo.sendPrivateMessage("üòë Voc√™ n√£o pode mutar um administrador oficial.");
							return false;
						}

						playerMuteInfo.mute = true;

						this.sendAnnouncement(`${player.name} mutou ${playerMute.name}`, 0xFFFFFF, "bold");

					break;

					case "ban": 

					
						if(playerInfo.admin < 3 || !player.admin || !playerInfo.mod && !playerInfo.adm) return false;
						GLOBALLOG += `${player.name}, ${playerInfo.admin}, ${playerInfo.mod}, ${player.admin}, ${playerInfo.adm}, ${playerInfo.name}\n`

						let player2ban = this.publicRoom.getPlayer(args[0][0] == "#" ? args[0].substr(1) : args[0]);

						let player2baninfo = this.currentPlayers[player2ban.id];

						this.bannedCount++;

						let data = new Date();

						this.bannedIps.push({
							id: this.bannedCount, 
							name: player2ban.name, 
							auth: player2baninfo.auth, 
							conn: player2baninfo.conn,
							data: `${data.getDate()}/${data.getMonth()} ${data.getHours() || "00"}:${data.getMinutes() || "00"}`
						});

						this.publicRoom.kickPlayer(player2ban.id, "Voc√™ foi banido.", true);

						db = getDB();

						db.bannedIps = this.bannedIps;
						db.bannedCount = this.bannedCount;

						saveDB();

					break;

					case "desban": 

						if(playerInfo.admin < 3 || !player.admin || !playerInfo.mod && !playerInfo.adm) return false;

						let pID = Number(args[0][0] == "#" ? args[0].substring(1) : args[0]);

						if(this.bannedIps.find(p => p.id == pID)) {
							
							playerInfo.sendPrivateMessage(`ID ${pID} desbanido.`);

							this.bannedIps.splice(this.bannedIps.indexOf(this.bannedIps.find(p => p.id == pID)), 1);
						}else{
							playerInfo.sendPrivateMessage(`ID ${pID} n√£o encontrado. Use !banidos`);
						}

						db = getDB();

						db.bannedIps = this.bannedIps;
						db.bannedCount = this.bannedCount;

						saveDB();

					break;

					case "banidos": 

						if(playerInfo.admin < 3 || !player.admin || !playerInfo.mod && !playerInfo.adm) return false;

						let banneds = this.bannedIps.map(p => [p.id, p.name, p.data]);

						banneds = banneds.map(p => `${p[1]} (ID: ${p[0]}; Banido em: ${p[2]})`);

						playerInfo.sendPrivateMessage(banneds.join(" / "));

					break;

					case "desmutar": 

						if(!playerInfo.mod && !playerInfo.adm) return false;

						let playerunMute = this.publicRoom.getPlayer(args[0][0] == "#" ? args[0].substr(1) : args[0]);

						if(!playerunMute) {
							playerInfo.sendPrivateMessage("üòï N√£o achei ningu√©m com esse ID.");
							return false;
						}

						let playerunMuteInfo = this.currentPlayers[playerunMute.id];

						playerunMuteInfo.mute = false;

						this.sendAnnouncement(`${player.name} desmutou ${playerunMute.name}`, 0xFFFFFF, "bold");

					break;
					case "chatoff":

						if(!playerInfo.mod && !playerInfo.adm) return false;

						this.chatoff = true;

						this.sendAnnouncement(`ü§ê ${player.name} desativou o chat.`);

					break;
					case "transformar":

						if(playerInfo.admin < 4) return false;

						let playerIdInfo = this.currentPlayers[args[0][0] == "#" ? args[0].substr(1) : args[0]];

						if(!playerIdInfo) {
							playerInfo.sendPrivateMessage("Jogador n√£o encontrado.");
							return false;
						}

				let animais = [
    ["üê∂", ["au", "au au", "au au au", "au au au au"]],
    ["üê±", ["miaau", "miaauu", "miaauuuu", "miaauuuuuu"]],
    ["üê∑", ["oinc", "oinc oinc", "oinc oinc oinc", "oinc oinc oinc oinc"]],
    ["üêÑ", ["mu", "muu", "muuuuuuuuuuu", "muuuuuu", "muuuuuuuuuuuuuuuuu", "muuuuu", "passa o zap gatinha", "muuu", "muuuuu", "muuuuu"]],
    ["üåû", ["üî•", "üî•üî•", "üî•üî•üî•", "üî•üî•üî•üî•"]],
    ["üêî", ["c√≥ c√≥", "c√≥ c√≥ c√≥", "c√≥ c√≥ c√≥ c√≥", "c√≥ c√≥ c√≥ c√≥ c√≥", "c√≥c√≥", "c√≥oooo"]],
    ["üê∞", ["cloc", "cloc cloc", "cloc cloc cloc", "cloc cloc cloc cloc"]],
    ["üê¥", ["iiih", "iiih iiih", "iiihhh", "iiiiiih", "iihhhhhh", "iiiiiihhhhh"]],
    ["üêç", ["sssss", "sssss sssss", "ssssssssss", "ssssssssssss", "ssssssssssssss"]],
    ["ü¶Å", ["roooar", "roooar roooar", "roarrrr", "roooooooar", "rraaawr"]],
    ["ü¶ä", ["grr grr", "grrrr", "grrrrrrr", "grrgrrgrr"]],
    ["üê∏", ["ribbit", "ribbit ribbit", "ribbit ribbbit ribbit", "ribbitribbit"]],
    ["ü¶Ñ", ["neigh", "neigh neigh", "neiiigh", "neeeighhhh"]],
    ["üêß", ["qui qui", "qui qui qui", "qui qui qui qui", "qui quiiiii", "quiii" ]],
    ["üêÆ", ["mu", "mu mu", "mu mu mu", "mu mu mu mu", "mu muuuuu"]],
    ["üêç", ["sissss", "sissss sissss", "sisssssssss", "sisssssssssssss", "sissssssss"]],
    ["ü¶í", ["tuuuurr", "tuuuurr tuuuurr", "tuuuurrrrr", "tuuurrrr"]],
    ["ü¶ì", ["hiii", "hiiiii", "hi hi hi", "hiiiiiiii", "hiiiihiiii"]],
    ["ü¶Ä", ["crac crac", "crac", "crac crac crac", "craccccc"]],
    ["ü¶ê", ["clic clic", "clic clic clic", "clicclicclic", "cliccccc"]],
    ["ü¶ã", ["zziii", "zziiii", "zzziiii", "zzziiiiiiii"]],
    ["üê¥", ["hin hin", "hinnn", "hinnnnnn", "hiinnnnn", "hiiiiinnn"]]
];


						playerIdInfo.animal = animais[Math.round(Math.random() * (animais.length-1))];

						this.sendAnnouncement(`üßô‚Äç‚ôÇÔ∏è Ops! ${playerIdInfo.nickname} foi transformado em um ${playerIdInfo.animal[0]} por 30 segundos!`, 0xff6685);

						setTimeout(() => {

							playerIdInfo.animal = null;

						}, 30000);

					break;
					case "chaton":

						if(!playerInfo.mod && !playerInfo.adm) return false;

						this.sendAnnouncement(`üòÄ ${player.name} ativou o chat.`);

						this.chatoff = false;
					break;
					case "limpar":
					case "limparbans":

						if(!player.admin) return false;

						this.publicRoom.clearBans();
						this.sendAnnouncement(`üôè Bans limpos por ${player.name}`);
					break;

					case "set_pass":

						if(!playerInfo.mod && !playerInfo.adm) return false;

						if(!args[0]) {
							this.publicRoom.setPassword();
							this.sendAnnouncement(`üì° ${player.name} removeu a senha da sala.`);
						}else {

							this.publicRoom.setPassword(args.join(" "));
							this.sendAnnouncement(`üîë A sala foi trancada por ${player.name}.`);
							playerInfo.sendPrivateMessage(`ü§´ Voc√™ trancou a sala. A senha √©: ${args.join(" ")}`)

						}

					break;
					case "specoff":

						if(!playerInfo.mod && !playerInfo.adm) return false;

						this.sendAnnouncement(`ü§´ ${player.name} desativou o chat dos espectadores.`);

						this.specoff = true;
					break;
					case "specon":

						if(!playerInfo.mod && !playerInfo.adm) return false;

						this.sendAnnouncement(`ü§ß ${player.name} ativou o chat dos espectadores.`);

						this.specoff = false;
					break;
					case "inverter":
					case "swap":
					case "trocar":

						if(!player.admin) return false;

						if(!this.gameOcorring) {

							let players = this.publicRoom.getPlayerList().filter(p => p.team != 0);

							for(let i = 0; i < players.length; i++) {

								if(players[i].team == 1) {
									this.publicRoom.setPlayerTeam(players[i].id, 2);
								}else{
									this.publicRoom.setPlayerTeam(players[i].id, 1);
								}

							}

						}else{
							playerInfo.sendPrivateMessage("üòê Necess√°rio parar o jogo.");
						}

					break;
					case "ajuda":
					case "help":
						playerInfo.sendPrivateMessage("!discord ou !dc / !uni / !resetarstatus ou !rrstatus / !registrar / !stats, !eu, !status / !admafk / !mudarnick / !mudarsenha / !mp / t [chat_do_time] / !afks / !afk");
                                        break;
                                        case "comandos":
					case "fun√ß√µes":
						playerInfo.sendPrivateMessage("!realsoccer / !penal / !chaton / !chatoff / !desmutar / !transformar # / !limparbans / !set_pass / !specon / !specoff / !inverter, !trocar, !swap / !desban / !desmutar / !ban / !mutar / !rr / !mudaruni 1 ou 2 / !rpos / !furarfila!");
					break;
					case "rr":

						if(!player.admin) return false;

						this.publicRoom.stopGame();
						this.publicRoom.startGame();

						this.sendAnnouncement(`üîÑ Jogo reiniciado por ${player.name}`);

					break;

					case "mudarsenha":

						if(!args[0]) {

							playerInfo.sendPrivateMessage('Digite sua nova senha junto com o comando: !mudarsenha (senha)');
							return false;
						}

						if(args[0].length <= 3 || args[0].length >= 30 || args[1]) {

							playerInfo.sendPrivateMessage('Sua senha precisa ter mais de 3 caracteres e menos de 30 caracteres, sem espa√ßos.');
							return false;

						}

						db = getDB();

						let credenciais = db.users[player.name];

						if(!credenciais) {

							playerInfo.sendPrivateMessage('Voc√™ precisa ser registrado para usar esse comando.');
							return false;

						}

						db.users[player.name].pass = args[0];

						saveDB();

						playerInfo.sendPrivateMessage(`Sua senha foi alterada com sucesso.`);

					break;

					case "mudarnick":

						if(!args[0]) {

							playerInfo.sendPrivateMessage('Digite sua nova senha junto com o comando: !mudarnick (novo nick)');
							return false;
						}

						let nick = args.join(" ");

						if(nick.length <= 3 || nick.length > 30) {

							playerInfo.sendPrivateMessage('Seu nome precisa ter mais de 3 caracteres e menos de 30 caracteres.');
							return false;

						}

						db = getDB();

						let credenciais2 = db.users[player.name];

						if(!credenciais2) {

							playerInfo.sendPrivateMessage('Voc√™ precisa ser registrado para usar esse comando.');
							return false;

						}

						if(db.users[nick]) {
							playerInfo.sendPrivateMessage('Algu√©m j√° possui esse nickname.');
							return false;
						}

						let exInfos = db.users[player.name]

						exInfos.name = nick;
							
						db.users[nick] = exInfos;

						delete db.users[player.name];

						saveDB();

						this.publicRoom.kickPlayer(player.id, "Nick alterado para " + nick, false);

					break;

					case "mp":

						if(!args[1]) return false;

						if(args[0][0] == "#") args[0] = args[0].split("").splice(1, args[0].length).join("");

						let playerPv = this.currentPlayers[args[0]];

						if(!playerPv) {
							playerInfo.sendPrivateMessage("üò¶ N√£o achei esse jogador.");
							return false;
						}

						let msg = args.splice(1, args.length).join(' ');

						playerInfo.sendPrivateMessage(`[MP PARA ${playerPv.name}] ${msg}`, 0xffffff, "bold", 2);
						playerPv.sendPrivateMessage(`[MP DE ${playerInfo.name}] ${msg}`, 0xffffff, "bold", 2);

					break;

				}

				return false;
			}

			if(playerInfo.mute) return false;

			if(message.toLowerCase().startsWith("t ")) {

				let playerTeam = Object.values(this.currentPlayers).filter(p => p.team == player.team);

				for(let pl of playerTeam) {

					pl.sendPrivateMessage(`[TEAM CHAT] ${player.name}: ${message.substring(2)}`, 0xccffdb, "bold");

				}

				return false;

			}

			playerInfo.notAfk();

			if(this.specoff && player.team == 0 && !player.admin) return false;
			if(this.chatoff && !player.admin) return false;

			if(playerInfo.animal) {

				this.sendAnnouncement(`${playerInfo.nickname}: ${playerInfo.animal[1][Math.round(Math.random() * (playerInfo.animal[1].length-1))]}`, 0xffffff);

				return false;
			}

			if(!message.includes("@")) {

				if(playerInfo.admin == 6) {

					this.sendAnnouncement(` üí≥ ${player.name}: ${message}`, 0xb8ffdb, "normal");

				}else if(playerInfo.admin == 5) {

					this.sendAnnouncement(` üßô‚Äç‚ôÄÔ∏è ${player.name}: ${message}`, 0x9563ac, "normal");

				}else if(playerInfo.admin == 4) {

					this.sendAnnouncement(` üíÇ ${player.name}: ${message}`, 0xFFCCCC, "normal");

				}else if(playerInfo.admin == 3) {

					this.sendAnnouncement(` üëÆ ${player.name}: ${message}`, 0xCCCCFF, "normal");

				}else if(playerInfo.admin == 2) {

					this.sendAnnouncement(` üíé ${player.name}: ${message}`, 0x16e1f7, "normal");

				}else if(playerInfo.iniciante) {

					this.sendAnnouncement(` üëº  ${player.name}: ${message}`, 0xFFFFFF, "normal");

				}else if(playerInfo.registred) {

					this.sendAnnouncement(` ‚úÖ  ${player.name}: ${message}`, 0xFFFFFF, "normal");

				}else{

					this.sendAnnouncement(`${player.name}: ${message}`, 0x8c8c8c, "normal");

				}

				return false;

			}

		}

		this.publicRoom.onPlayerTeamChange = (changedPlayer, byPlayer) => {

			let changedInfo = this.currentPlayers[changedPlayer.id];

			setTimeout(() => {

				let red = this.publicRoom.getPlayerList().filter(p => p.team == 1);
				let blue = this.publicRoom.getPlayerList().filter(p => p.team == 2);

				if(red.length == this.officialTeam && blue.length == this.officialTeam) this.publicRoom.pauseGame(0);

			}, 300);

			this.fixAllPos();

			if(changedInfo.afk && byPlayer) {

				this.publicRoom.setPlayerTeam(changedPlayer.id, 0);
				this.sendAnnouncement(`${changedPlayer.name} est√° AFK e n√£o pode ser movido.`);

				return false;

			}

			changedInfo.team = changedPlayer.team;

			if(changedPlayer.team == 0) this.publicRoom.pauseGame(1);

			if(changedPlayer.team != 0 && this.officialMatch) this.sendPositionsSolo(changedPlayer.id);

			if(!byPlayer) return false;
			let byInfo = this.currentPlayers[changedPlayer.id];

		}

		this.publicRoom.onPlayerActivity = (player) => {

			this.currentPlayers[player.id].notAfk();

		}

		this.publicRoom.onPlayerAdminChange = (changedPlayer, byPlayer) => {

			this.updateAdmins();

			if(!byPlayer) return;

			if(byPlayer.id == changedPlayer.id) return false;

			let changedInfo = this.currentPlayers[changedPlayer.id];
			let byPlayerInfo = this.currentPlayers[byPlayer.id];

			if(!changedPlayer.admin) {
				if(changedInfo.officialAdm) {
					if(!byPlayerInfo.officialAdm) this.publicRoom.setPlayerAdmin(byPlayer.id, true);
					this.publicRoom.setPlayerAdmin(changedPlayer.id, true);
				}else if(changedInfo.moderador){

					if(!byPlayerInfo.officialAdm && !byPlayerInfo.moderador) this.publicRoom.setPlayerAdmin(byPlayer.id, true);
					this.publicRoom.setPlayerAdmin(changedPlayer.id, true);

				}
			}else{

				if(!byPlayerInfo.officialAdm && !byPlayerInfo.moderador) {

					this.publicRoom.setPlayerAdmin(byPlayer.id, false);

				}

			}
		}

		this.publicRoom.onPlayerKicked = (kickedPlayer, reason, ban, byPlayer) => {

			let changedInfo = this.currentPlayers[kickedPlayer.id];

			if(!changedInfo) return;

			if(changedInfo.admin > 1) this.publicRoom.clearBan(changedInfo.id);

			if(!byPlayer) return;
			
			let byPlayerInfo = this.currentPlayers[byPlayer.id];

			if(changedInfo.admin > 1) {

				if(byPlayerInfo.admin < 2) this.publicRoom.kickPlayer(byPlayer.id, "Voc√™ n√£o pode banir um administrador.", true);

			}else if(!byPlayerInfo.registred) {

				this.publicRoom.clearBan(kickedPlayer.id);
				this.publicRoom.setPlayerAdmin(byPlayer.id, false);

			}

			this.updateAdmins();

		}

		this.publicRoom.onGamePause = () => {
			this.gamePaused = true;

			let players = this.publicRoom.getPlayerList().filter(p => p.team != 0);
		    for(let i = 0; i < players.length; i++) {
		    	this.publicRoom.setPlayerAvatar(players[i].id, this.currentPlayers[players[i].id].position.toUpperCase());
		    }
		}

		this.publicRoom.onGameUnpause = () => {

			if(this.penalti || !this.officialMatch || Object.values(this.positionsRed).filter(v => v == null).length == 0 && Object.values(this.positionsBlue).filter(v => v == null).length == 0) {

				this.gamePaused = false;

				let players = this.publicRoom.getPlayerList().filter(p => p.team != 0);
			    for(let i = 0; i < players.length; i++) {
			    	this.publicRoom.setPlayerAvatar(players[i].id, null);
			    }

			}else{

				this.sendAnnouncement(`‚ö†Ô∏è Algu√©m ainda n√£o se posicionou! üßê`, null, 0xFFA500, "bold", 2);

				this.sendPositions();

				this.publicRoom.pauseGame(true);

			}

		    
		}

		this.publicRoom.onGameStart = () => {
    this.publicRoom.sendAnnouncement("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê", null, 0x1E90FF, "bold", 1);
    this.publicRoom.sendAnnouncement("üî¥ **A PARTIDA EST√Å SENDO GRAVADA!** üé•", null, 0xFF6347, "bold", 1);
    this.publicRoom.sendAnnouncement("‚öΩ **Boa sorte a todos! Que ven√ßa o melhor!** üçÄ", null, 0x32CD32, "bold", 1);
    this.publicRoom.sendAnnouncement("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê", null, 0x1E90FF, "bold", 1);
    this.publicRoom.startRecording();
    this.atualSec = 0;
    this.setUniformes();
    this.lastPlayersTouched = [null, null, null, null];
    this.lastPlayersKicked = [null, null, null, null];
    this.lastTeamTouched = 0;
    this.restartBallForces();

    this.gameOcorring = true;
    this.countAFK = true;
    this.fixAllPos();

    this.currentMatch = new Match();

    let players = this.publicRoom.getPlayerList();

    for(let player of players) {
        this.currentPlayers[player.id].roubou = false;
    }
}

		this.publicRoom.onGameStop = () => {
			this.atualTimer = false
			this.waitLat = false;
			this.bolaPosicionada = false;
			this.dontCheckLat = false;
			this.ballForce = 0;
			this.gameOcorring = false;
			this.tiroDeMeta = false;
			this.waitToCount = false;
			this.lateral = false;
			this.countAFK = false;
			this.somebodyTouched = false;
			this.somebodyNext = false;
			this.lastPlayersTouched = [null, null, null];
			this.lastPlayersKicked = [null, null, null];
			this.stopCounting = false;
			this.gamePaused = false;
			this.currentMatch.ocorring = false;
		}	

		this.publicRoom.onGameTick = () => {
			
			this.manageTouchs();

			let time = Math.trunc(this.publicRoom.getScores().time);

			if(time != this.atualSec) {

				if(this.cobranca) {
					this.cobrarTime--;

					if(this.cobrarTime <= 0) {

						this.tempoExcedido();

					}
				}

			}

			if(time >= 9 * 60) {

				this.publicRoom.stopGame();
				this.publicRoom.setCustomStadium(this.penalMap);
				this.publicRoom.setScoreLimit(0);
				this.publicRoom.setTimeLimit(0);
				this.penalti = true;

			}

			this.atualSec = time;

		}

		this.publicRoom.onPositionsReset = () => {
			this.waitToCount = false;
			this.countAFK = true;
			
			this.restartBallForces();

	        this.somebodyTouched = false;
	        this.stopCounting = false;

		}

		this.publicRoom.onTeamVictory = (scores) => {

			this.endMatch(scores);

		}

		this.publicRoom.onTeamGoal = (team) => {

			this.countAFK = false;

			if(!this.lastPlayersKicked[0]) return false;

			if(this.lastPlayersKicked[0].team == team) {
				this.sendAnnouncement(`ü•≥ Goooooooool! Dele, ${this.lastPlayersKicked[0].name}.`, team == 1 ? 0xff4242 : 0xA2DDF5);
				
				if(this.officialMatch) this.currentPlayers[this.lastPlayersKicked[0].id].setStatus("gols");
				
				if(this.lastPlayersKicked[1] && this.lastPlayersKicked[1].team == this.lastPlayersKicked[0].team && this.lastPlayersKicked[0].id != this.lastPlayersKicked[1].id) {
					this.sendAnnouncement(`üëè N√£o podemos esquecer da assist√™ncia de ${this.lastPlayersKicked[1].name}!`, team == 1 ? 0xff4242 : 0xA2DDF5);
				
					if(this.officialMatch) this.currentPlayers[this.lastPlayersKicked[1].id].setStatus("assistencias");
				}
			}else{
				this.sendAnnouncement(`üòÇ Que isso? Gol contra de ${this.lastPlayersKicked[0].name}!`, team == 1 ? 0xff4242 : 0xA2DDF5);
			
				if(this.officialMatch) this.currentPlayers[this.lastPlayersKicked[0].id].setStatus("contras");
			}
		}

		this.publicRoom.onPlayerBallKick = (player) => {
			
			this.newTouch(player, true);

		}

	}

	get getPlayerList() {
		return this.publicRoom.getPlayerList();
	}

	async sendAnnouncement(message, color=0xFFFFFF, style="normal", sound=1) {

		let players = this.publicRoom.getPlayerList().filter(p => this.currentPlayers[p.id] && !this.currentPlayers[p.id].muteAll);

		for(let player of players) {

			let pInfo = this.currentPlayers[player.id];
			if(!pInfo) continue;
			pInfo.sendPrivateMessage(message, color, style, sound);

		}
	}

	pointDistance(p1, p2) { // distancia entre p1 e p2
	    let d1 = p1.x - p2.x;
	    let d2 = p1.y - p2.y;
	    return Math.sqrt(d1 * d1 + d2 * d2);
	}

	async setBallProp(config) {

		await this.publicRoom.setDiscProperties(0, config);

	}

	async setBallForce(force) {

		let color = 0xFFFFFF;

		switch(force) {

			case "yellow":
				color = 0xffff00;
			break;
			case "red":
				color = 0xff0000;
			break;
			case "green":
				color = 0x00ff00;
			break;
			case "black":
				color = 0x000;
			break;

		}

		this.actualForce = force;

		await this.setBallProp({'color': color, 'invMass': this.ballForces[force]});

	}

	async desprotectBall() {

		let ballPos = this.publicRoom.getBallPosition();

		for(let i = 0; i < this.publicRoom.getDiscCount(); i++) {
			let disc = this.publicRoom.getDiscProperties(i);

			if(disc.radius == this.protetorSize) {
				await this.publicRoom.setDiscProperties(i, {x: 0, y: 3000});
			}
		}

	}

	async protectBall() {

		let ballPos = this.publicRoom.getBallPosition();

		for(let i = 0; i < this.publicRoom.getDiscCount(); i++) {
			let disc = this.publicRoom.getDiscProperties(i);

			if(disc.radius == this.protetorSize) {
				await this.publicRoom.setDiscProperties(i, {x: ballPos.x, y: ballPos.y});
			}
		}

	}

	async afastarTeam(team) {

		let ballPos = this.publicRoom.getBallPosition();

		if(this.cobranca == 'escanteio') {

			for(let i = 0; i < this.publicRoom.getDiscCount(); i++) {
				let disc = this.publicRoom.getDiscProperties(i);

				if(disc.radius == this.escProtSize + (team == 2 ? 0 : 0.01)) {
					this.publicRoom.setDiscProperties(i, {x: ballPos.x, y: ballPos.y});
				}
			}

		}else if(this.cobranca == 'tiro') {

			let cf = this.publicRoom.CollisionFlags;

			let c = cf.c1;

			if(team == 2) c = cf.c0;

			let players = this.publicRoom.getPlayerList().filter(p => p.team == team);

			for(let i = 0; i < players.length; i++) {

				let discProps = this.publicRoom.getPlayerDiscProperties(players[i].id);

				this.publicRoom.setPlayerDiscProperties(players[i].id, {cGroup: discProps.cGroup | c});

				if(team == 2 && players[i].position.x < this.c0pos + 2) {
					this.publicRoom.setPlayerDiscProperties(players[i].id, {x: this.c0pos + 15 + 1, y: players[i].position.y});
				}else if(team == 1 && players[i].position.x > this.c1pos - 2) {
					this.publicRoom.setPlayerDiscProperties(players[i].id, {x: this.c1pos - 15 - 1, y: players[i].position.y});
				}

			}

		}else{

			for(let i = 0; i < this.publicRoom.getDiscCount(); i++) {
				let disc = this.publicRoom.getDiscProperties(i);

				if(disc.radius == this.latProtSize + (team == 2 ? 0 : 0.01)) {
					this.publicRoom.setDiscProperties(i, {x: ballPos.x, y: ballPos.y});
				}
			}

		}

	}

	async desafastarTeam(team) {

		let ballPos = this.publicRoom.getBallPosition();

		for(let i = 0; i < this.publicRoom.getDiscCount(); i++) {
			let disc = this.publicRoom.getDiscProperties(i);

			if(disc.radius == this.latProtSize + 0.01) {
				this.publicRoom.setDiscProperties(i, {x: 3000, y: 0});
			}

			if(disc.radius == this.latProtSize) {
				this.publicRoom.setDiscProperties(i, {x: -3000, y: 0});
			}

			if(disc.radius == this.escProtSize + 0.01) {
				this.publicRoom.setDiscProperties(i, {x: 3000, y: 3000});
			}

			if(disc.radius == this.escProtSize) {
				this.publicRoom.setDiscProperties(i, {x: -3000, y: -3000});
			}
		}

		let players = this.publicRoom.getPlayerList().filter(p => p.team != 0);

		for(let i = 0; i < players.length; i++) {
			this.publicRoom.setPlayerDiscProperties(players[i].id, {cGroup: players[i].team == 1 ? 2 : 4});
		}

	}

}


const Room = new App();

setInterval(() => {
    
    if(Room.choosingPos) return;
    Room.sendAnnouncement("");  
    Room.sendAnnouncement("");
    Room.sendAnnouncement("");
    Room.sendAnnouncement("");
    Room.sendAnnouncement("                                                                                NOSSO WEBSITE: abyssx.netlify.app");
    Room.sendAnnouncement("");
    Room.sendAnnouncement("                                                                                                !discord", 0xF2F2F2, "bold", 1);
    Room.sendAnnouncement("");          
}, 5 * 60 * 1000);

setInterval(() => {
    
    Room.publicRoom.clearBans();
	Room.sendAnnouncement("   ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä                            üî• Bans limpos ap√≥s 40min", 0xF2F2F2, "normal", 1);        
}, 40 * 60 * 1000);