const USER_DATABASE = "USER_DATABASE";

let
roomNameString = "🐦 Phoenix-Arena-Oficial | x3 |"
    room = HBInit({
	roomName: roomNameString, // nome da sua hospedagem
	maxPlayers: 30, // quantidade de players que essa sala pode suportar, maximo 30
	public: true, // true para sala publica, false para sala privada.
        playerName: "",
        token: "thr1.AAAAAGeNuk6j7FMvszc_bw.dQkABZ_AwPI",
	geo : { code : "KR", lat : -20.287541, lon : -44.4809}, // 
	noPlayer: true// false para host com bot, true para host sem bot
})

let
prefixString = "!",
bansURL = 'https://discord.com/api/webhooks/1295785794501480569/AzszTQZjD9U37MVKMkAp0LqVEehVNp2xr8axviJvNnlIaKxBGgQYU2Lr8hQXlIE5FxVB',
JogadoresBanidosObject = {};

let Request = {
	post: (player, content)=>{
		let params = {
			"username": `${player.name} aplicou um banimento`,
			"avatar_url": "",
			"content": content,
			"url": "",
		};

		fetch(bansURL, {
			method: "POST",
			headers: new Headers({ "Content-Type": "application/json" }),
			body: JSON.stringify(params)
		})
	}
};

let Comandos = {
	ban: (player, tempo, conn, motivo)=>{
		let aliasTempoArray = ["s", "m", "h", "d"];

		if (!parseInt(tempo[0])) room.sendAnnouncement(`${tempo} não é um número inteiro.`, player.id);
		else {
			if (tempo.toString().length < 2) room.sendAnnouncement(`Você precisa colocar o tempo. ex: 3m`, player.id);
			else {
				if (!aliasTempoArray.includes(tempo[1])) room.sendAnnouncement("Você não colocou se vai ser minuto ou horas. ex: 5h", player.id);
				else {
					if (conn == undefined) room.sendAnnouncement("Você não digitou o conn.", player.id);
					else {
						if (JogadoresBanidosObject[conn]) room.sendAnnouncement(`[${conn}] já foi banido`, player.id);
							else {
								if (motivo == undefined) room.sendAnnouncement("Motivo não definido", player.id);
									else {
									let motivoSemBarra = motivo.split("_").join(" ");
									conn[player.name] = player.name;
									JogadoresBanidosObject[conn] = { tempo: tempo, motivo: motivoSemBarra, autor: player.name, name: player.conn};
									Request.post(player, `[${conn}]\nsala: ${roomName}\ntempo: ${tempo[0]} ${tempo[1] == "s" ? "segundos" : tempo[1] == "m" ? "minutos" : tempo[1] == "h" ? "horas" : tempo[1] == "d" ? "dias" : "Tempo não detectado."}\nMOTIVO: ${motivoSemBarra}`);

							room.sendAnnouncement(`[${conn}] foi banido por ${tempo[0]} ${aliasTempoArray[0] ? "segundos" : aliasTempoArray[1] ? "minutos" : aliasTempoArray[2] ? "horas" : aliasTempoArray[3] ? "dias" : "aliasTempoArray não tem esse tempo"}`, player.id);

							setTimeout(()=>{
							delete JogadoresBanidosObject[conn];
							}, tempo[1] == "s" ? 1000*tempo[0] : tempo[1] == "m" ? 1000*60*tempo[0] : tempo[1] == "h" ? 1000*60*60*tempo[0] : tempo[1] == "d" ? 1000*60*60*24*tempo[0] : null)
						}
					}
				}
			}
			}
		}
	},
	infoban: (player, conn)=>{
		if (conn == undefined) room.sendAnnouncement("Você não digitou o conn.", player.id);
		else {
			if (!JogadoresBanidosObject[conn]) room.sendAnnouncement(`[${conn}] não foi banido.`, player.id);
			else room.sendAnnouncement(`CONN: ${conn}\nAUTOR: ${JogadoresBanidosObject[conn].autor}\nTEMPO: ${JogadoresBanidosObject[conn].tempo}`, player.id);
		}
	}
};


const playerRadius = 15;
var ballRadius = 6.35;
const triggerDistance = playerRadius + ballRadius + 0.01;

var afkLimit = 12; // cronometro de limite de AFK
var drawTimeLimit = Infinity; // tempo de empate, escolha um número para definir quanto tempo de limite para o jogo ser empatado, deixe Infinity para não ocorrer empates.
var maxTeamSize = 3;
var slowMode = 0;

const Team = { SPECTATORS: 0, RED: 1, BLUE: 2 };
const team = { SPEC: 0, RED: 1, BLUE: 2 };
var extendedP = [];
const eP = { ID: 0, AUTH: 1, CONN: 2, AFK: 3, ACT: 4, GK: 5, MUTE: 6 };
const Ss = { GA: 0, WI: 1, DR: 2, LS: 3, WR: 4, GL: 5, AS: 6, GK: 7, CS: 8, CP: 9, RL: 10, NK: 11 }

var ModoChatPausado = [];

var players;
var teamR;
var teamB;
var teamS;
var lastTeamTouched;
var lastPlayersTouched; 
var countAFK = false; 
var activePlay = false; 
var goldenGoal = false;
var SMSet = new Set()
var banList = []
var game;
var GKList = ["", ""];
var Rposs = 0;
var Bposs = 0;
var point = [{ "x": 0, "y": 0 }, { "x": 0, "y": 0 }]; 
var ballSpeed;
var lastWinner = Team.SPECTATORS;
var streak = 0;
var allBlues = []; 
var allReds = []; 
var inChooseMode = false; 
var redCaptainChoice = "";
var blueCaptainChoice = "";
var chooseTime = 20;
var timeOutCap;
var checkTimeVariable = false; 
var statNumber = 0;
var endGameVariable = false; 
var resettingTeams = false;
var capLeft = false;
var statInterval = 6;

var bloquear_comando = []
var block_comando = [];
var limit = 30;

let registros = new Map()
var checkregister = []
var checkchat = []
var logins = []

var L1 = [''] 
var L2 = [''] 
var L3 = [''] 
var L4 = ['']
var L5 = ['']
var L6 = [''] 
var L7 = ['']
var L8 = [""]
var L9 = [""]
var L10 = [""]
var L11 = [""]
var L12 = [""]
var L13 = [""]
var L14 = [""]
var L15 = [""]

const entradapersonalizadabras = "O vip premium entrou na sala"
var Bras = ["", ""];

const entradapersonalizadafominha = "O brabo fominha entrou pra arregaçar."
var fominha = [""];

const entradapersonalizadazum = "O Trovão faz zuuum e entra na sala ⚡"
var zum = [""];

const entradapersonalizadazx = "chegou pra amassar geral"
var zx = ["", "", ""];

const entradapersonalizadawaxie = ""
var waxie= ["", "", "ent"];

const puskasoutubro = ""

const cL1 = []
const fL1 = []	
const cL2 = []
const fL2 = []	
const cL3 = []
const fL3 = []	
const cL4 = []
const fL4 = []	
const cL5 = []
const fL5 = []
const cL6 = []
const fL6 = []
const cL7 = []
const fL7 = [] 
const cL8 = []
const fL8 = [] 
const cL9 = []
const fL9 = [] 
const cL10 = []
const fL10 = [] 
const cL11 = []
const fL11 = [] 
const cL12 = []
const fL12 = [] 
const cL13 = []
const fL13 = [] 
const cL14 = []
const fL14 = [] 
const cL15 = []
const fL15 = [] 

const premium = ["", "", "", ""]; //MVP+
const supremo = ["kxx", "ent"]; // MVP++
const booster =["", "𝔾𝕠𝕝𝕕𝕖𝕟 ぁ"];
const vips = ["",
"",
"",
"",
"",
""];

const semlimiteafk = ["ent",
"kxx",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
""];

var jogadoresvips = 
[["L$.Dzn", "177.128.85.26"],
["luiz1844", "177.220.172.58"], //da pra testar agora
["", ""],
["", ""],
["", ""],
["", ""],
["", ""],
["", ""]
];

const verificados = [
'', 
"kxx",
"",
"ent",
"𝔾𝕠𝕝𝕕𝕖𝕟 ぁ",
"",
""];

const fundador = [
"ent",
"",
""];

const staff = [
"",
"𝔾𝕠𝕝𝕕𝕖𝕟 ぁ",
"kxx",
"",
"ent",
"",
"",
"",
""];

const adminF = ["", "", "ent"] //fundador
		
const adminG = [
"",
"",
"",
"",
""]; //administradores

const adminM = ["𝔾𝕠𝕝𝕕𝕖𝕟 ぁ", "", ""]; //moderadores

const adminE= ["kxx"]; //estagiarios

var administradores = 
[["Joao", ""],
["L$.Dzn", "177.128.85.26"],
["luiz1844", "177.220.172.58"],
["", ""],
["", ""],
["", ""],
["", ""],
["", ""]
];
var WebHookURL = "" 
var report = '';
var tempoMensagem = 1000;

var conns = []
var playerConn = []
var tempoDePause = 1000*15; // 5 segundos de pause.
var pausePlayers = []; // Os players que digitarem o comando "!p" terão seus Ids puxados para um array "pausePlayers".
var pauseGame = true; // Pause = true | unPause = false.
var partida = true; // Partida não iniciada = true | Partida iniciada = false.

var blacklist = [
	{Nick:"", ipv4: "", Auth: "", Conn: ""},
	{Nick:"", ipv4: "", Auth: "", Conn: ""},
	{Nick:"", ipv4: "", Auth: "", Conn: ""},
	{Nick:"", ipv4: "", Auth: "", Conn: ""}];
	
let votekickTimes = {}; //This holds the amount of votes which the players used.
let votekickCount = {}; //This holds the amount of votes which were done against each of the players.
let linkhaxcolors = 'https://htmlcolorcodes.com/';
let erro = 'Você não tem permissão para executar esse comando.';
let cor_definida = 'você escolheu a cor ';
let fonte_definida = 'você escolheu a fonte ';
let erroapi = 'essa não e uma fonte fornecida pela API, aqui está a lista de todas possiveis \n';
let replaystest = `https://discord.com/api/webhooks/1295786208739201168/GZf8DuDtGI5MKFskEroAQ4jSbk2ELIMa2alWgkAH7r5lo-cuGfIkkX1zJJFkrV0ttva6`;

let
palavras = [
"VADIA", "vadia", "sua vadia", "SUA VADIA", "SUA PROSTITUTA", "sua prostituta",
"VAGABUNDA", "vagabunda","sua vagabunda", "SUA VAGABUNDA",
"filho da puta",
"FILHO DA PUTA", 
"pnc",
"pau no cu",
"seu lixo",
"SEU LIXO",
"PNC",
"PAU NO CU",
"desgraça",
"DESGRAÇA",
"sua vagabunda", "SUA VAGABUNDA", "seu vagabundo", "SEU VAGABUNDO",
"Se mata", "SE MATA", "se mata", "seu desgraçado", "sua desgraçada", "SEU DESGRAÇADO", "SUA DESGRAÇADA",
"se suicida", "SE SUICIDA"
],
regex = new RegExp(palavras.join("|"), 'gi');

let
linkmsg = [
"https://",
"http://", 
"http://www"],
link = new RegExp(linkmsg.join("|"), 'gi');

let
travasmsg = ["ఌ佹砕Ĉ⼈渻䬭॑⬺爂᰾ᜪ䉧ᬯ㍸᜖ᘬ慩㙲Ԑ瀩ञࠣ笋℉⨄㐷紪権ਛൽ㔙怅㬆癕⨴琐ḉ≼崪", "ᙻḻ⨂㈿爇䕦ᴵ灾㸏眮ቡᄸ܍礂海學㰌⬦ ѫ⼕ย⌑ḷ㠕ፃ㤕㌋␢眢砬ⵯ煾Ⱘ縂㉰匊㤀ह稫ᝈⴾㄫ㤒", "䉊", "؈ି", "㔞帱ॹࠚⰯἯ浸ἱᔞ፭ਮ娮ف㤮〕", "㱳⬗ᅷд甇ᜯ⩿ᤶⱁ戃 椏缁⼐獾⌱മ㈐ᵲ桨ԷᴑĿᑆ㨤ఴ⑸甈⨘Ѳ∯㘴䁔ح฾،ฌ瘪"],
travas = new RegExp(travasmsg.join("|"), 'gi');

let
travamsg = ["㧫璧�觭䢜潇ကᩨ쀡ఈ泄찉넾﫤㏭�緺", "▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓", "㧫", "璧", "懈౩䊀脁潡䣚⾤㸼짠ब", "뗲᭾�띀急蔹⹉ꆣせㆉ였鷀Ú錘陈搳窇㉕"],
trava = new RegExp(travamsg.join("|"), 'gi');

let
sistmsg = ["꧁꧂꧃꧄�꧅ꦸꦹꦺꩵꩶ꩷꩸꩹ꩺ▓▒░▄█▀─█▀██▄█▀█▀█▬쵃쵄쵅쵆쵇쵈쵉쵊쵋쵌쵍쵎쵏�쵐쵑쵒�襤拉", "臘", "蠟", "廊", "朗", "䱡䱢䱣䱤䱥䱦䱧䱨▉▇█▂▃▄▂▃"];

sist = new RegExp(sistmsg.join("|"), 'gi');

let
antitrmsg = ["홍수홍수홍수홍수홍수홍수홍수홍수홍수홍수홍수홍수홍수홍수홍수홍수홍수홍수홍수홍수홍수홍수홍수홍수홍수홍수홍수홍수", "홍수홍수홍수홍수홍수홍수홍수홍수홍수홍수홍수홍수홍수홍수홍수홍수홍수홍수홍수", "홍수홍수홍수홍수홍수홍수홍수홍", "수", "홍", "수", "홍", "수", "홍수홍수홍수홍수홍", "수홍수홍수홍수홍수홍수홍수홍수홍수"];
antitr = new RegExp(antitrmsg.join("|"), 'gi');

let
antitramsg = ["㧫璧�觭䢜潇ကᩨ쀡ఈ泄찉넾saw﫤㏭�緺�堲昸⸐낧懈౩䊀脁潡䣚⾤㸼짠ब꺅�ﹴﯰ﹟ﵿ࿿", "빏⿠雴㰯첇브쾞�읨⎘堌�̃㭎掌�䑂吺쏘뗲᭾�띀急蔹♤⹉ꆣせㆉ였鷀ú錘陈搳窇㉕ꙕ鄲欙莚쁃◑첶㘥䅺", "ǫ", "呡", "讬", "ꯩ", "䌻⨣�馫㷈搊ꌈ恘㠄陌颓̌谆", "鞿å 䆔⽪ﭓ櫆陗썆㾑쾛炦͝薐�翺￧祋ۓ"];
antitra = new RegExp(antitramsg.join("|"), 'gi');

let
antitravamsg = [" ▁▂▃▄▅▆▇█▉㑈㑉㑊㑋㑌㑍㑎㑏㑐㑑㑒㑓㑔㑕㑖㑗", "㑘㑙㑚㑛㑜㑝㑞㑟㑠㑢㑣㑤㑥㑦㑧㑨㑩㑪㑫㑬㑭㑮㑯㑰㑱㑲㑳㑴㑵㑶㑷㑸㑹㑺㑻㑼㑽㑾㒀㒁", "꧁꧂꧃꧄�꧅ꦸꦹꦺꦻꩵꩶ꩷꩸꩹ꩺ", "▓▒░", "▄█▀", "─█▀██", "▄█▀█▀█▬", "쵃쵄쵅쵆쵇쵈쵉쵊쵋쵌쵍쵎쵏�쵐쵑쵒�", "襤拉臘蠟廊朗䱡䱢䱣䱤䱥䱦䱧䱨▉▇█▂▃▄▂▃"];
antitrava = new RegExp(antitravamsg.join("|"), 'gi');

let
racmsg = [
	"sua macaca",
	"sua negra",
	"sua preta",
	"SUA PRETA",
	"SUA NEGRA",
	"SUA MACACA",
	"seu macaco",
	"seu negro",
	"seu preto",
	"SEU PRETO",
	"SEU NEGRO",
	"SEU MACACO",
	"voce é macaco",
	"voce é preto",
	"voce é negro",
	"VOCE É MACACO",
	"VOCE É PRETO",
	"VOCE É NEGRO",
	"voce e macaco",
	"voce e preto",
	"voce e negro",
	"VOCE e MACACO",
	"VOCE e PRETO",
	"VOCE e NEGRO",
	"preto macaco",
	"macaco preto",
	"seu macaco preto",
	"seu preto macaco",
	"seu negro macaco preto",
	"seu macaco preto negro",
	"seu preto negro macaco",
	"SEU NEGRO MACACO PRETO",
	"SEU MACACO PRETO NEGRO",
	"SEU PRETO NEGRO MACACO",
	"seu marrom",
	"SEU MARROM",
	"sua marrom",
	"SUA MARROM",
	"seu macaquinho",
	"SEU MACAQUINHO",
	"sua macaquinha",
	"SUA MACAQUINHA"];
racismo = new RegExp(racmsg.join("|"), 'gi');

function autobans(message) {

    var request = new XMLHttpRequest();
    request.open("POST","https://discord.com/api/webhooks/1295786309864001586/IeUiLb_7dBQpah1J8UDxdLbSAx2-QQCSB5qiABazZaOPgoDwwvwuzx4-n9szq3g-A3wY");

    request.setRequestHeader('Content-type', 'application/json');

    var params = {
		embeds: [
			{
				fields: [],
				title: "Banimento auto aplicado",
				color: 16777215,
				footer: {
					text: "© PHOENIX all reserved."
				},
				author: { "name": roomNameString },
				image: {
					url: "https://cdn.discordapp.com/attachments/1293563559242104843/1295787897064128564/OIP_6.jpeg?ex=670fec05&is=670e9a85&hm=0b9d2bc2ea52b893ac62bacc2b4c4859f9f3dfa70da639dd3f3effa3397b5678&"
				},
				thumbnail: {
					url: "https://cdn.discordapp.com/attachments/1293563559242104843/1295787897064128564/OIP_6.jpeg?ex=670fec05&is=670e9a85&hm=0b9d2bc2ea52b893ac62bacc2b4c4859f9f3dfa70da639dd3f3effa3397b5678&"
				}
			}
		],
        avatar_url: 'https://cdn.discordapp.com/attachments/1293563559242104843/1295787897064128564/OIP_6.jpeg?ex=670fec05&is=670e9a85&hm=0b9d2bc2ea52b893ac62bacc2b4c4859f9f3dfa70da639dd3f3effa3397b5678&',
        username: 'PHOENIX',
        content: message
    };

    request.send(JSON.stringify(params));
}

let Cor = {
	Vermelho: 0xFA5646,
	Laranja: 0xFFC12F,
	Verde: 0x7DFA89,
	Azul: 0x05C5FF,
	Amrelo: 0xFFFF17,
	Cinza: 0xCCCCCC,
	Branco: 0xFFFFFF,
	Azulclaro: 0x6ECAFF,
	Powderblue: 0xB0E0E6,
	Roxo: 0x800080,
	Platina: 0xE5E4E2,
	Ouro: 0xffd700,
	Prata: 0xd5d5d5,
	Bronze: 0x896728,
	Thistle: 0xD8BFD8,
	Khaki: 0xF0E68C,
	AliceBlue: 0xF0F8FF,
	GhostWhite: 0xF8F8FF,
	Snow: 0xFFFAFA,
	Seashell:0xFFF5EE,
	FloralWhite: 0xFFFAF0,
	WhiteSmoke: 0xF5F5F5,
	Beige: 0xF5F5DC,
	OldLace:	0xFDF5E6,
	Ivory:	0xFFFFF0,
	Linen:	0xFAF0E6,
	Cornsilk: 0xFFF8DC,
	AntiqueWhite: 0xFAEBD7,
	BlanchedAlmond: 0xFFEBCD,
	Bisque: 0xFFE4C4,
	LightYellow: 0xFFFFE0,
	LemonChiffon: 0xFFFACD,
	LightGoldenrodYellow: 0xFAFAD2,
	PapayaWhip: 0xFFEFD5,
	PeachPuff: 0xFFDAB9,
	Moccasin: 0xFFE4B5,
	PaleGoldenrod: 0xEEE8AA,
	Azulescuro: 0x426AD6
	}

	var spamArray = [0, 0, 0, 0, 0, 0]
	var mutado = []
	
	var info = {
		amarelo: 0xFFFF17,
		vermelho: 0xFA5646,
		negrito: 'bold',
		desmutar: 240000,
	}
	
	function detectarspam(player, message) {
		spamArray.push(player.id)
		
		if (mutado.includes(player.name) == false && spamArray[spamArray.length - 1] === player.id && spamArray[spamArray.length - 2] === player.id) {
		setTimeout(_ => {  if (spamArray[spamArray.length - 2] === player.id){ player.id = spamArray[spamArray.length = 0];	}}, info.desmutar - 230000) }
	
		if (mutado.includes(player.name) == false && spamArray[spamArray.length - 1] === player.id && spamArray[spamArray.length - 2] === player.id && spamArray[spamArray.length - 3] === player.id) {
		setTimeout(_ => {  if (spamArray[spamArray.length - 3] === player.id){ player.id = spamArray[spamArray.length = 0];	}}, info.desmutar - 230000) }
	
		if (mutado.includes(player.name) == false && spamArray[spamArray.length - 1] === player.id && spamArray[spamArray.length - 2] === player.id && spamArray[spamArray.length - 3] === player.id && spamArray[spamArray.length - 4] === player.id) {
		setTimeout(_ => {  if (spamArray[spamArray.length - 4] === player.id){ player.id = spamArray[spamArray.length = 0];	}}, info.desmutar - 230000) }
		
		if (mutado.includes(player.name) == false && spamArray[spamArray.length - 1] === player.id && spamArray[spamArray.length - 2] === player.id && spamArray[spamArray.length - 3] === player.id && spamArray[spamArray.length - 4] === player.id && spamArray[spamArray.length - 5] === player.id) {
		room.sendAnnouncement("[PV] Você pode ser punido por fazer 'SPAM', escreva devagar!", player.id, info.vermelho, info.negrito)
		setTimeout(_ => {  if (spamArray[spamArray.length - 5] === player.id){ player.id = spamArray[spamArray.length = 0];	}}, info.desmutar - 230000) }
		
		if (mutado.includes(player.name) == false && spamArray[spamArray.length - 1] === player.id && spamArray[spamArray.length - 2] === player.id && spamArray[spamArray.length - 3] === player.id && spamArray[spamArray.length - 4] === player.id && spamArray[spamArray.length - 5] === player.id && spamArray[spamArray.length - 6] === player.id) {
		room.sendAnnouncement(player.name + "🚫 foi mutado por fazer spam 🚫 ", null, info.amarelo, info.negrito)
		mutado.push(player.name)
		
		setTimeout(() => {
		var remover = mutado.indexOf(player.name) + mutado.splice(remover, 1)
		room.sendAnnouncement('[PV] você foi desmutado, chat liberado.', player.id, info.amarelo, info.negrito)
		}, info.desmutar) // temporizador
		
		}
	}

let RecSistem = {
    getCustomDate: ()=>{
        let
        data = new Date().toLocaleDateString().split("/").join("-"),
        relogio = new Date().toLocaleTimeString().split(":");

        return `${data}-${relogio[0]}h${relogio[1]}m`;
    },
    getScoresTime: time=>{
        return ~~(Math.trunc(time) / 60) + ":" + (Math.trunc(time)%60).toString().padStart(2, '0');
    },
    sendDiscordWebhook: scores=>{
        let
        red = room.getPlayerList().filter((player)=>player.team == 1).map((player)=> player.name),
        blue = room.getPlayerList().filter((player)=>player.team == 2).map((player)=> player.name);

        let form = new FormData();
        form.append(null, new File( [room.stopRecording()], `${getDate()}`+`${cod}${cod1}${cod2}${cod3}${cod4}.hbr2`, {"type": "text/plain"} ));
        form.append("payload_json", JSON.stringify(RecSistem.getParams(scores, red, blue)));

        let xhr = new XMLHttpRequest();
        xhr.open("POST", replaystest);
        xhr.send(form);
    },
    getParams: (scores, red, blue)=>{
        let params = {
          "username": "PHOENIX | NIVEL",
          "avatar_url": "https://cdn.discordapp.com/attachments/1293563559242104843/1295787897064128564/OIP_6.jpeg?ex=670fec05&is=670e9a85&hm=0b9d2bc2ea52b893ac62bacc2b4c4859f9f3dfa70da639dd3f3effa3397b5678&",
          "content": "----------------------------------------------------------------------------------",
          "embeds": [{
            "title": "-------- PHOENIX --------",
			color: 16777215,
            "description": "REPLAY - 2024",
            "timestamp": null,
            "author": { "name": roomNameString },
			image: {
				url: "https://cdn.discordapp.com/icons/1294421927955398768/ca42dbe00bc52a2ab16f69b71610380f.png?size=2048"
			},
			thumbnail: {
				url: "https://cdn.discordapp.com/icons/1294421927955398768/ca42dbe00bc52a2ab16f69b71610380f.png?size=2048"
			},
            "footer": {
                "text": `${getDate()}`+`${cod}${cod1}${cod2}${cod3}${cod4}`,
            },
            "fields": [
            { "name": "RED", "value": `${red.join("\n")}\n**GOLS**\n${scores.red}`, "inline": true },
            { "name": "BLUE", "value": `${blue.join("\n")}\n**GOLS**\n${scores.blue}`, "inline": true },
            { "name": "Tempo que durudou a partida", "value": RecSistem.getScoresTime(scores.time) },
            ]
        }],
        "components": []
    };
    return params;
}
};
//FIM LET'S

//CONST'S	

const votedPlayers = new Set() //The set of players which were voted.
const disc = 'https://discord.gg/DKEDYsvaBt';
const comandovip = 'Comando exclusivo para VIPS, Seja vip para desbloquer esse comando!';
const capitães = 'Apenas capitães do time podem escolher uniforme.';
const capitãespausar = 'Apenas capitães do time podem pausar a partida.';
const corsucesso = 'Cor alterada com sucesso.'
const PnZ = [""];

const resetarAvatarEm = 3;
const fontsdisp = ["normal", "bold", "italic", "small"];
const Negrito = 'bold';
const Italic = 'italic';
const Normal = 'normal';

const frasesGOL = [
"GOLAÇO DE ",
"UM BELISSIMO GOL DE ",
"QUE FINALIZAÇÃO SENHORES, É DE ",
"UMA BELA FINALIZAÇÃO DE ",
"A-DI-VI-NHA, GOLLLLLLLLLLLL DE "

]; // Frases de gol

  const frasesASS = [
",GRANDE PASSE DE ",
",PASSE MONSTRUOSO DE ",
",QUE ASSISTENCIA FENOMENAL DE ",
]; // Frases de assistencias

  const golcontra = [
",GOL CONTRA, QUE ISSO ",
]; // Frases de gol contra
	

  const WINRED = [
" RED VENCEU O BLUE MAIS UMA VEZ, POR ",
" RED É PAI DO BLUE, VENCEU POR ",
" GRANDE VITÓRIA DO RED, PLACAR: " ];

  const WINBLUE = [
" BLUE VENCEU O RED MAIS UMA VEZ, POR ",
" BLUE É PAI DO RED, VENCEU POR ",
" GRANDE VITÓRIA DO BLUE, PLACAR: " ];
  
  const sbt = [
	" UHHHHHHHHHHHHHHHHHHHHHH",
	" SERÁ QUE VAI SAIR UM GOL?",
	" HOJE VAI TER ZEBRA, PODE TER CERTEZA!!",
	" EM PLENO 2025, OS TIMES ESTÃO MUITO RUIM KKKKK"
];

const oemessagem = [
	' OPA, VAI PARA AONDE JOGADOR?!',
	' CREDO, QUE OEEEE FOI ESSE KKKKK',
	' NUSSAAAAA, PASSOU LOTADOOOO KKKK',
	' EPAAAAA, PASSOU VOANDO AQUI EM MARTE KK!',
	' RECEBAAAA, E RECEBEU UM OE INCRIVEL',
	' WOWWWW, ESSE BETA LEVOU UM OE',
	' HAHAHAHA, O CARA PASSOU LOTADO',
	' SEM COMENTÁRIOS PARA ESSE OE',
	' F, ESSE PASSOU LOTADO NA VELOCIDADE DA LUZ',
	" SENHORRRRRR, QUE OEEEEE FOI ESSEEEEEE!"
];

const code = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0'];
const code1 = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0'];
const code2 = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0'];
const code3 = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0'];
const code4 = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0'];


var cod = code[(Math.random() * code.length) | 0]
var cod1 = code1[(Math.random() * code.length) | 0]
var cod2 = code2[(Math.random() * code.length) | 0]
var cod3 = code3[(Math.random() * code.length) | 0]
var cod4 = code4[(Math.random() * code.length) | 0]


const URLs = {
	chat: "https://discord.com/api/webhooks/1295788698838892605/suFNeA04nvJb9wjeX4gE2oYQ0-EkI1gG4_RS7HDJF9v41IIlgKckYGs287oahhHQwwlV" //coloca 5 reais o basico o mais pika uns 20 ou 15 só pra conseguir sustentar a vps (pode ser)
};

room.setTeamsLock(true)
var Mapa = `{"name":"Futsal x3","width":620,"height":270,"spawnDistance":350,"bg":{"type":"hockey","width":550,"height":240,"kickOffRadius":80,"cornerRadius":0},"vertexes":[{"x":550,"y":240,"trait":"ballArea"},{"x":550,"y":-240,"trait":"ballArea"},{"x":0,"y":270,"trait":"kickOffBarrier"},{"x":0,"y":80,"bCoef":0.15,"trait":"kickOffBarrier","color":"F8F8F8","vis":true,"curve":180},{"x":0,"y":-80,"bCoef":0.15,"trait":"kickOffBarrier","color":"F8F8F8","vis":true,"curve":180},{"x":0,"y":-270,"trait":"kickOffBarrier"},{"x":-550,"y":-80,"cMask":["red","blue","ball"],"trait":"goalNet","curve":0,"color":"F8F8F8","pos":[-700,-80]},{"x":-590,"y":-80,"cMask":["red","blue","ball"],"trait":"goalNet","curve":0,"color":"F8F8F8","pos":[-700,-80]},{"x":-590,"y":80,"cMask":["red","blue","ball"],"trait":"goalNet","curve":0,"color":"F8F8F8","pos":[-700,80]},{"x":-550,"y":80,"cMask":["red","blue","ball"],"trait":"goalNet","curve":0,"color":"F8F8F8","pos":[-700,80]},{"x":550,"y":-80,"cMask":["red","blue","ball"],"trait":"goalNet","curve":0,"color":"F8F8F8","pos":[700,-80]},{"x":590,"y":-80,"cMask":["red","blue","ball"],"trait":"goalNet","curve":0,"color":"F8F8F8","pos":[700,-80]},{"x":590,"y":80,"cMask":["red","blue","ball"],"trait":"goalNet","curve":0,"color":"F8F8F8","pos":[700,80]},{"x":550,"y":80,"cMask":["red","blue","ball"],"trait":"goalNet","curve":0,"color":"F8F8F8","pos":[700,80]},{"x":-550,"y":80,"bCoef":1.15,"cMask":["ball"],"trait":"ballArea","color":"F8F8F8","pos":[-700,80]},{"x":-550,"y":240,"bCoef":1.15,"cMask":["ball"],"trait":"ballArea","color":"F8F8F8"},{"x":-550,"y":-80,"bCoef":1.15,"cMask":["ball"],"trait":"ballArea","color":"F8F8F8","pos":[-700,-80]},{"x":-550,"y":-240,"bCoef":1.15,"cMask":["ball"],"trait":"ballArea","color":"F8F8F8"},{"x":-550,"y":240,"bCoef":1,"cMask":["ball"],"trait":"ballArea"},{"x":550,"y":240,"bCoef":1,"cMask":["ball"],"trait":"ballArea"},{"x":550,"y":80,"bCoef":1.15,"cMask":["ball"],"trait":"ballArea","pos":[700,80]},{"x":550,"y":240,"bCoef":1.15,"cMask":["ball"],"trait":"ballArea"},{"x":550,"y":-240,"bCoef":1.15,"cMask":["ball"],"trait":"ballArea","color":"F8F8F8"},{"x":550,"y":-80,"bCoef":1.15,"cMask":["ball"],"trait":"ballArea","color":"F8F8F8","pos":[700,-80]},{"x":550,"y":-240,"bCoef":0,"cMask":["ball"],"trait":"ballArea"},{"x":550,"y":-240,"bCoef":0,"cMask":["ball"],"trait":"ballArea"},{"x":-550,"y":-240,"bCoef":1,"cMask":["ball"],"trait":"ballArea","curve":0},{"x":550,"y":-240,"bCoef":1,"cMask":["ball"],"trait":"ballArea","curve":0},{"x":0,"y":-240,"bCoef":0.1,"cMask":["red","blue"],"cGroup":["redKO","blueKO"],"trait":"kickOffBarrier"},{"x":0,"y":-80,"bCoef":0.1,"cMask":["red","blue"],"cGroup":["redKO","blueKO"],"trait":"kickOffBarrier"},{"x":0,"y":80,"bCoef":0.1,"cMask":["red","blue"],"cGroup":["redKO","blueKO"],"trait":"kickOffBarrier"},{"x":0,"y":240,"bCoef":0.1,"cMask":["red","blue"],"cGroup":["redKO","blueKO"],"trait":"kickOffBarrier"},{"x":0,"y":-80,"bCoef":0.1,"cMask":["red","blue"],"trait":"kickOffBarrier","vis":true,"color":"F8F8F8"},{"x":0,"y":80,"bCoef":0.1,"cMask":["red","blue"],"trait":"kickOffBarrier","vis":true,"color":"F8F8F8"},{"x":0,"y":80,"trait":"kickOffBarrier","color":"F8F8F8","vis":true,"curve":-180},{"x":0,"y":-80,"trait":"kickOffBarrier","color":"F8F8F8","vis":true,"curve":-180},{"x":0,"y":80,"trait":"kickOffBarrier","color":"F8F8F8","vis":true,"curve":0},{"x":0,"y":-80,"trait":"kickOffBarrier","color":"F8F8F8","vis":true,"curve":0},{"x":-557.5,"y":80,"bCoef":1,"cMask":["ball"],"trait":"ballArea","curve":0,"vis":false,"pos":[-700,80]},{"x":-557.5,"y":240,"bCoef":1,"cMask":["ball"],"trait":"ballArea","curve":0,"vis":false},{"x":-557.5,"y":-240,"bCoef":1,"cMask":["ball"],"trait":"ballArea","vis":false,"curve":0},{"x":-557.5,"y":-80,"bCoef":1,"cMask":["ball"],"trait":"ballArea","vis":false,"curve":0,"pos":[-700,-80]},{"x":557.5,"y":-240,"bCoef":1,"cMask":["ball"],"trait":"ballArea","vis":false,"curve":0},{"x":557.5,"y":-80,"bCoef":1,"cMask":["ball"],"trait":"ballArea","vis":false,"curve":0,"pos":[700,-80]},{"x":557.5,"y":80,"bCoef":1,"cMask":["ball"],"trait":"ballArea","curve":0,"vis":false,"pos":[700,80]},{"x":557.5,"y":240,"bCoef":1,"cMask":["ball"],"trait":"ballArea","curve":0,"vis":false},{"x":0,"y":-80,"bCoef":0.1,"trait":"line"},{"x":0,"y":80,"bCoef":0.1,"trait":"line"},{"x":-550,"y":-80,"bCoef":0.1,"trait":"line"},{"x":-550,"y":80,"bCoef":0.1,"trait":"line"},{"x":550,"y":-80,"bCoef":0.1,"trait":"line"},{"x":550,"y":80,"bCoef":0.1,"trait":"line"},{"x":-240,"y":256,"bCoef":0.1,"trait":"line"},{"x":-120,"y":256,"bCoef":0.1,"trait":"line"},{"x":-240,"y":-256,"bCoef":0.1,"trait":"line"},{"x":-120,"y":-224,"bCoef":0.1,"trait":"line"},{"x":-120,"y":-256,"bCoef":0.1,"trait":"line"},{"x":240,"y":256,"bCoef":0.1,"trait":"line"},{"x":120,"y":224,"bCoef":0.1,"trait":"line"},{"x":120,"y":256,"bCoef":0.1,"trait":"line"},{"x":240,"y":-224,"bCoef":0.1,"trait":"line"},{"x":240,"y":-256,"bCoef":0.1,"trait":"line"},{"x":120,"y":-224,"bCoef":0.1,"trait":"line"},{"x":120,"y":-256,"bCoef":0.1,"trait":"line"},{"x":-381,"y":240,"bCoef":0.1,"trait":"line"},{"x":-381,"y":256,"bCoef":0.1,"trait":"line"},{"x":-550,"y":200,"bCoef":0.1,"trait":"line","color":"F8F8F8","curve":-90},{"x":-390,"y":70,"bCoef":0.1,"trait":"line","color":"F8F8F8","curve":0},{"x":-550,"y":226,"bCoef":0.1,"trait":"line","curve":-90},{"x":-536,"y":240,"bCoef":0.1,"trait":"line","curve":-90},{"x":-550,"y":-200,"bCoef":0.1,"trait":"line","color":"F8F8F8","curve":90},{"x":-390,"y":-70,"bCoef":0.1,"trait":"line","color":"F8F8F8","curve":0},{"x":-550,"y":-226,"bCoef":0.1,"trait":"line","curve":90},{"x":-536,"y":-240,"bCoef":0.1,"trait":"line","curve":90},{"x":-556,"y":123,"bCoef":0.1,"trait":"line"},{"x":-575,"y":123,"bCoef":0.1,"trait":"line"},{"x":556,"y":123,"bCoef":0.1,"trait":"line"},{"x":575,"y":123,"bCoef":0.1,"trait":"line"},{"x":-556,"y":-123,"bCoef":0.1,"trait":"line"},{"x":-575,"y":-123,"bCoef":0.1,"trait":"line"},{"x":556,"y":-123,"bCoef":0.1,"trait":"line"},{"x":575,"y":-123,"bCoef":0.1,"trait":"line"},{"x":-381,"y":-240,"bCoef":0.1,"trait":"line"},{"x":-381,"y":-256,"bCoef":0.1,"trait":"line"},{"x":381,"y":240,"bCoef":0.1,"trait":"line"},{"x":381,"y":256,"bCoef":0.1,"trait":"line"},{"x":381,"y":-240,"bCoef":0.1,"trait":"line"},{"x":381,"y":-256,"bCoef":0.1,"trait":"line"},{"x":550,"y":-226,"bCoef":0.1,"trait":"line","curve":-90},{"x":536,"y":-240,"bCoef":0.1,"trait":"line","curve":-90},{"x":550,"y":226,"bCoef":0.1,"trait":"line","curve":90},{"x":536,"y":240,"bCoef":0.1,"trait":"line","curve":90},{"x":550,"y":200,"bCoef":0.1,"trait":"line","color":"F8F8F8","curve":90},{"x":390,"y":70,"bCoef":0.1,"trait":"line","color":"F8F8F8","curve":90},{"x":550,"y":-200,"bCoef":0.1,"trait":"line","color":"F8F8F8","curve":-90},{"x":390,"y":-70,"bCoef":0.1,"trait":"line","color":"F8F8F8","curve":-90},{"x":390,"y":70,"bCoef":0.1,"trait":"line","color":"F8F8F8","curve":0},{"x":390,"y":-70,"bCoef":0.1,"trait":"line","color":"F8F8F8","curve":0},{"x":-375,"y":1,"bCoef":0.1,"trait":"line","curve":180},{"x":-375,"y":-1,"bCoef":0.1,"trait":"line","curve":180},{"x":-375,"y":3,"bCoef":0.1,"trait":"line","curve":180},{"x":-375,"y":-3,"bCoef":0.1,"trait":"line","curve":180},{"x":-375,"y":-2,"bCoef":0.1,"trait":"line","curve":180},{"x":-375,"y":2,"bCoef":0.1,"trait":"line","curve":180},{"x":-375,"y":-3.5,"bCoef":0.1,"trait":"line","curve":180},{"x":-375,"y":3.5,"bCoef":0.1,"trait":"line","curve":180},{"x":375,"y":1,"bCoef":0.1,"trait":"line","curve":180},{"x":375,"y":-1,"bCoef":0.1,"trait":"line","curve":180},{"x":375,"y":3,"bCoef":0.1,"trait":"line","curve":180},{"x":375,"y":-3,"bCoef":0.1,"trait":"line","curve":180},{"x":375,"y":-2,"bCoef":0.1,"trait":"line","curve":180},{"x":375,"y":2,"bCoef":0.1,"trait":"line","curve":180},{"x":375,"y":-3.5,"bCoef":0.1,"trait":"line","curve":180},{"x":375,"y":3.5,"bCoef":0.1,"trait":"line","curve":180},{"x":-277.5,"y":1,"bCoef":0.1,"trait":"line","curve":180},{"x":-277.5,"y":-1,"bCoef":0.1,"trait":"line","curve":180},{"x":-277.5,"y":3,"bCoef":0.1,"trait":"line","curve":180},{"x":-277.5,"y":-3,"bCoef":0.1,"trait":"line","curve":180},{"x":-277.5,"y":-2,"bCoef":0.1,"trait":"line","curve":180},{"x":-277.5,"y":2,"bCoef":0.1,"trait":"line","curve":180},{"x":-277.5,"y":-3.5,"bCoef":0.1,"trait":"line","curve":180},{"x":-277.5,"y":3.5,"bCoef":0.1,"trait":"line","curve":180},{"x":277.5,"y":1,"bCoef":0.1,"trait":"line","curve":180},{"x":277.5,"y":-1,"bCoef":0.1,"trait":"line","curve":180},{"x":277.5,"y":3,"bCoef":0.1,"trait":"line","curve":180},{"x":277.5,"y":-3,"bCoef":0.1,"trait":"line","curve":180},{"x":277.5,"y":-2,"bCoef":0.1,"trait":"line","curve":180},{"x":277.5,"y":2,"bCoef":0.1,"trait":"line","curve":180},{"x":277.5,"y":-3.5,"bCoef":0.1,"trait":"line","curve":180},{"x":277.5,"y":3.5,"bCoef":0.1,"trait":"line","curve":180}],"segments":[{"v0":6,"v1":7,"curve":0,"color":"F8F8F8","cMask":["red","blue","ball"],"trait":"goalNet","pos":[-700,-80],"y":-80},{"v0":7,"v1":8,"color":"F8F8F8","cMask":["red","blue","ball"],"trait":"goalNet","x":-590},{"v0":8,"v1":9,"curve":0,"color":"F8F8F8","cMask":["red","blue","ball"],"trait":"goalNet","pos":[-700,80],"y":80},{"v0":10,"v1":11,"curve":0,"color":"F8F8F8","cMask":["red","blue","ball"],"trait":"goalNet","pos":[700,-80],"y":-80},{"v0":11,"v1":12,"color":"F8F8F8","cMask":["red","blue","ball"],"trait":"goalNet","x":590},{"v0":12,"v1":13,"curve":0,"color":"F8F8F8","cMask":["red","blue","ball"],"trait":"goalNet","pos":[700,80],"y":80},{"v0":2,"v1":3,"trait":"kickOffBarrier"},{"v0":3,"v1":4,"curve":180,"vis":true,"color":"F8F8F8","bCoef":0.15,"cGroup":["blueKO"],"trait":"kickOffBarrier"},{"v0":3,"v1":4,"curve":-180,"vis":true,"color":"F8F8F8","bCoef":0.15,"cGroup":["redKO"],"trait":"kickOffBarrier"},{"v0":4,"v1":5,"trait":"kickOffBarrier"},{"v0":14,"v1":15,"vis":true,"color":"F8F8F8","bCoef":1.15,"cMask":["ball"],"trait":"ballArea","x":-550},{"v0":16,"v1":17,"vis":true,"color":"F8F8F8","bCoef":1.15,"cMask":["ball"],"trait":"ballArea","x":-550},{"v0":18,"v1":19,"vis":true,"color":"F8F8F8","bCoef":1,"cMask":["ball"],"trait":"ballArea","y":240},{"v0":20,"v1":21,"vis":true,"color":"F8F8F8","bCoef":1.15,"cMask":["ball"],"trait":"ballArea","x":550},{"v0":22,"v1":23,"vis":true,"color":"F8F8F8","bCoef":1.15,"cMask":["ball"],"trait":"ballArea","x":550},{"v0":24,"v1":25,"vis":true,"color":"F8F8F8","bCoef":0,"cMask":["ball"],"trait":"ballArea","x":550,"y":-240},{"v0":26,"v1":27,"curve":0,"vis":true,"color":"F8F8F8","bCoef":1,"cMask":["ball"],"trait":"ballArea","y":-240},{"v0":28,"v1":29,"vis":true,"color":"F8F8F8","bCoef":0.1,"cMask":["red","blue"],"cGroup":["redKO","blueKO"],"trait":"kickOffBarrier"},{"v0":30,"v1":31,"vis":true,"color":"F8F8F8","bCoef":0.1,"cMask":["red","blue"],"cGroup":["redKO","blueKO"],"trait":"kickOffBarrier"},{"v0":38,"v1":39,"curve":0,"vis":false,"color":"F8F8F8","bCoef":1,"cMask":["ball"],"trait":"ballArea","x":-557.5},{"v0":40,"v1":41,"curve":0,"vis":false,"color":"F8F8F8","bCoef":1,"cMask":["ball"],"trait":"ballArea","x":-557.5},{"v0":42,"v1":43,"curve":0,"vis":false,"color":"F8F8F8","bCoef":1,"cMask":["ball"],"trait":"ballArea","x":557.5},{"v0":44,"v1":45,"curve":0,"vis":false,"color":"F8F8F8","bCoef":1,"cMask":["ball"],"trait":"ballArea","x":557.5},{"v0":46,"v1":47,"curve":0,"vis":true,"color":"F8F8F8","bCoef":0.1,"trait":"line","x":0},{"v0":48,"v1":49,"curve":0,"vis":true,"color":"F8F8F8","bCoef":0.1,"trait":"line","x":-550},{"v0":50,"v1":51,"curve":0,"vis":true,"color":"F8F8F8","bCoef":0.1,"trait":"line","x":550},{"v0":64,"v1":65,"curve":0,"vis":true,"color":"F8F8F8","bCoef":0.1,"trait":"line","x":-381},{"v0":66,"v1":67,"curve":-90,"vis":true,"color":"F8F8F8","bCoef":0.1,"trait":"line"},{"v0":69,"v1":68,"curve":-90,"vis":true,"color":"F8F8F8","bCoef":0.1,"trait":"line"},{"v0":70,"v1":71,"curve":90,"vis":true,"color":"F8F8F8","bCoef":0.1,"trait":"line"},{"v0":67,"v1":71,"curve":0,"vis":true,"color":"F8F8F8","bCoef":0.1,"trait":"line"},{"v0":73,"v1":72,"curve":90,"vis":true,"color":"F8F8F8","bCoef":0.1,"trait":"line"},{"v0":74,"v1":75,"curve":0,"vis":true,"color":"F8F8F8","bCoef":0.1,"trait":"line","x":-240,"y":123},{"v0":76,"v1":77,"curve":0,"vis":true,"color":"F8F8F8","bCoef":0.1,"trait":"line","x":-240,"y":123},{"v0":78,"v1":79,"curve":0,"vis":true,"color":"F8F8F8","bCoef":0.1,"trait":"line","x":-240,"y":-123},{"v0":80,"v1":81,"curve":0,"vis":true,"color":"F8F8F8","bCoef":0.1,"trait":"line","x":-240,"y":-123},{"v0":82,"v1":83,"curve":0,"vis":true,"color":"F8F8F8","bCoef":0.1,"trait":"line","x":-381},{"v0":84,"v1":85,"curve":0,"vis":true,"color":"F8F8F8","bCoef":0.1,"trait":"line","x":381},{"v0":86,"v1":87,"curve":0,"vis":true,"color":"F8F8F8","bCoef":0.1,"trait":"line","x":381},{"v0":89,"v1":88,"curve":-90,"vis":true,"color":"F8F8F8","bCoef":0.1,"trait":"line"},{"v0":91,"v1":90,"curve":90,"vis":true,"color":"F8F8F8","bCoef":0.1,"trait":"line"},{"v0":92,"v1":93,"curve":90,"vis":true,"color":"F8F8F8","bCoef":0.1,"trait":"line"},{"v0":94,"v1":95,"curve":-90,"vis":true,"color":"F8F8F8","bCoef":0.1,"trait":"line"},{"v0":96,"v1":97,"curve":0,"vis":true,"color":"F8F8F8","bCoef":0.1,"trait":"line","x":390},{"v0":99,"v1":98,"curve":180,"vis":true,"color":"F8F8F8","bCoef":0.1,"trait":"line","x":-375},{"v0":98,"v1":99,"curve":180,"vis":true,"color":"F8F8F8","bCoef":0.1,"trait":"line","x":-375},{"v0":101,"v1":100,"curve":180,"vis":true,"color":"F8F8F8","bCoef":0.1,"trait":"line","x":-375},{"v0":100,"v1":101,"curve":180,"vis":true,"color":"F8F8F8","bCoef":0.1,"trait":"line","x":-375},{"v0":103,"v1":102,"curve":180,"vis":true,"color":"F8F8F8","bCoef":0.1,"trait":"line","x":-375},{"v0":102,"v1":103,"curve":180,"vis":true,"color":"F8F8F8","bCoef":0.1,"trait":"line","x":-375},{"v0":105,"v1":104,"curve":180,"vis":true,"color":"F8F8F8","bCoef":0.1,"trait":"line","x":-375},{"v0":104,"v1":105,"curve":180,"vis":true,"color":"F8F8F8","bCoef":0.1,"trait":"line","x":-375},{"v0":107,"v1":106,"curve":180,"vis":true,"color":"F8F8F8","bCoef":0.1,"trait":"line","x":375},{"v0":106,"v1":107,"curve":180,"vis":true,"color":"F8F8F8","bCoef":0.1,"trait":"line","x":375},{"v0":109,"v1":108,"curve":180,"vis":true,"color":"F8F8F8","bCoef":0.1,"trait":"line","x":375},{"v0":108,"v1":109,"curve":180,"vis":true,"color":"F8F8F8","bCoef":0.1,"trait":"line","x":375},{"v0":111,"v1":110,"curve":180,"vis":true,"color":"F8F8F8","bCoef":0.1,"trait":"line","x":375},{"v0":110,"v1":111,"curve":180,"vis":true,"color":"F8F8F8","bCoef":0.1,"trait":"line","x":375},{"v0":113,"v1":112,"curve":180,"vis":true,"color":"F8F8F8","bCoef":0.1,"trait":"line","x":375},{"v0":112,"v1":113,"curve":180,"vis":true,"color":"F8F8F8","bCoef":0.1,"trait":"line","x":375},{"v0":115,"v1":114,"curve":180,"vis":true,"color":"F8F8F8","bCoef":0.1,"trait":"line","x":-277.5},{"v0":114,"v1":115,"curve":180,"vis":true,"color":"F8F8F8","bCoef":0.1,"trait":"line","x":-277.5},{"v0":117,"v1":116,"curve":180,"vis":true,"color":"F8F8F8","bCoef":0.1,"trait":"line","x":-277.5},{"v0":116,"v1":117,"curve":180,"vis":true,"color":"F8F8F8","bCoef":0.1,"trait":"line","x":-277.5},{"v0":119,"v1":118,"curve":180,"vis":true,"color":"F8F8F8","bCoef":0.1,"trait":"line","x":-277.5},{"v0":118,"v1":119,"curve":180,"vis":true,"color":"F8F8F8","bCoef":0.1,"trait":"line","x":-277.5},{"v0":121,"v1":120,"curve":180,"vis":true,"color":"F8F8F8","bCoef":0.1,"trait":"line","x":-277.5},{"v0":120,"v1":121,"curve":180,"vis":true,"color":"F8F8F8","bCoef":0.1,"trait":"line","x":-277.5},{"v0":123,"v1":122,"curve":180,"vis":true,"color":"F8F8F8","bCoef":0.1,"trait":"line","x":277.5},{"v0":122,"v1":123,"curve":180,"vis":true,"color":"F8F8F8","bCoef":0.1,"trait":"line","x":277.5},{"v0":125,"v1":124,"curve":180,"vis":true,"color":"F8F8F8","bCoef":0.1,"trait":"line","x":277.5},{"v0":124,"v1":125,"curve":180,"vis":true,"color":"F8F8F8","bCoef":0.1,"trait":"line","x":277.5},{"v0":127,"v1":126,"curve":180,"vis":true,"color":"F8F8F8","bCoef":0.1,"trait":"line","x":277.5},{"v0":126,"v1":127,"curve":180,"vis":true,"color":"F8F8F8","bCoef":0.1,"trait":"line","x":277.5},{"v0":129,"v1":128,"curve":180,"vis":true,"color":"F8F8F8","bCoef":0.1,"trait":"line","x":277.5},{"v0":128,"v1":129,"curve":180,"vis":true,"color":"F8F8F8","bCoef":0.1,"trait":"line","x":277.5}],"goals":[{"p0":[-557.5,-80],"p1":[-557.5,80],"team":"red"},{"p0":[557.5,80],"p1":[557.5,-80],"team":"blue"}],"discs":[{"radius":5,"pos":[-550,80],"color":"FF6666","trait":"goalPost","y":80},{"radius":5,"pos":[-550,-80],"color":"FF6666","trait":"goalPost","y":-80,"x":-560},{"radius":5,"pos":[550,80],"color":"6666FF","trait":"goalPost","y":80},{"radius":5,"pos":[550,-80],"color":"6666FF","trait":"goalPost","y":-80},{"radius":3,"invMass":0,"pos":[-550,240],"color":"FFCC00","bCoef":0.1,"trait":"line"},{"radius":3,"invMass":0,"pos":[-550,-240],"color":"FFCC00","bCoef":0.1,"trait":"line"},{"radius":3,"invMass":0,"pos":[550,-240],"color":"FFCC00","bCoef":0.1,"trait":"line"},{"radius":3,"invMass":0,"pos":[550,240],"color":"FFCC00","bCoef":0.1,"trait":"line"}],"planes":[{"normal":[0,1],"dist":-240,"bCoef":1,"trait":"ballArea","vis":false,"curve":0},{"normal":[0,-1],"dist":-240,"bCoef":1,"trait":"ballArea"},{"normal":[0,1],"dist":-270,"bCoef":0.1},{"normal":[0,-1],"dist":-270,"bCoef":0.1},{"normal":[1,0],"dist":-620,"bCoef":0.1},{"normal":[-1,0],"dist":-620,"bCoef":0.1},{"normal":[1,0],"dist":-620,"bCoef":0.1,"trait":"ballArea","vis":false,"curve":0},{"normal":[-1,0],"dist":-620,"bCoef":0.1,"trait":"ballArea","vis":false,"curve":0}],"traits":{"ballArea":{"vis":false,"bCoef":1,"cMask":["ball"]},"goalPost":{"radius":8,"invMass":0,"bCoef":0.5},"goalNet":{"vis":true,"bCoef":0.1,"cMask":["ball"]},"line":{"vis":true,"bCoef":0.1,"cMask":[""]},"kickOffBarrier":{"vis":false,"bCoef":0.1,"cGroup":["redKO","blueKO"],"cMask":["red","blue"]}},"playerPhysics":{"bCoef":0,"acceleration":0.11,"kickingAcceleration":0.083,"kickStrength":5},"ballPhysics":{"radius":6.25,"bCoef":0.4,"invMass":1.5,"damping":0.99,"color":"FFCC00"}}`;
const scoreMapa = 2; // Limite de pontuação do jogo
const tempoMapa = 2; // Limite de tempo do jogo

loadMap(Mapa, scoreMapa, tempoMapa);

setInterval(() => { // local aonde stats dos players são armazenadas
	if(Object.keys(localStorage).includes("_grecaptcha")){
	localStorage.removeItem("_grecaptcha")
	  var tableau = []
	  if (statNumber % 5 == 0) {
		  Object.keys(localStorage).forEach(function (key) { if (!["player_name", "view_mode", "geo", "avatar", "player_auth_key"].includes(key)) { tableau.push([(JSON.parse(localStorage.getItem(key))[Ss.NK]), (JSON.parse(localStorage.getItem(key))[Ss.GA])]); } });
		  if (tableau.length < 5) {
			  return false;
		  }
		  tableau.sort(function (a, b) { return b[1] - a[1]; });
		  console.log("Jogos> #1 " + tableau[0][0] + ": " + tableau[0][1] + " #2 " + tableau[1][0] + ": " + tableau[1][1] + " #3 " + tableau[2][0] + ": " + tableau[2][1] + " #4 " + tableau[3][0] + ": " + tableau[3][1] + " #5 " + tableau[4][0] + ": " + tableau[4][1]);
	  }
	  if (statNumber % 5 == 1) {
		  Object.keys(localStorage).forEach(function (key) { if (!["player_name", "view_mode", "geo", "avatar", "player_auth_key"].includes(key)) { tableau.push([(JSON.parse(localStorage.getItem(key))[Ss.NK]), (JSON.parse(localStorage.getItem(key))[Ss.WI])]); } });
		  if (tableau.length < 5) {
			  return false;
		  }
		  tableau.sort(function (a, b) { return b[1] - a[1]; });
		  console.log("Vitórias> #1 " + tableau[0][0] + ": " + tableau[0][1] + " #2 " + tableau[1][0] + ": " + tableau[1][1] + " #3 " + tableau[2][0] + ": " + tableau[2][1] + " #4 " + tableau[3][0] + ": " + tableau[3][1] + " #5 " + tableau[4][0] + ": " + tableau[4][1]);
	  }
	  if (statNumber % 5 == 2) {
		  Object.keys(localStorage).forEach(function (key) { if (!["player_name", "view_mode", "geo", "avatar", "player_auth_key"].includes(key)) { tableau.push([(JSON.parse(localStorage.getItem(key))[Ss.NK]), (JSON.parse(localStorage.getItem(key))[Ss.GL])]); } });
		  if (tableau.length < 5) {
			  return false;
		  }
		  tableau.sort(function (a, b) { return b[1] - a[1]; });
		  console.logt("Gols> #1 " + tableau[0][0] + ": " + tableau[0][1] + " #2 " + tableau[1][0] + ": " + tableau[1][1] + " #3 " + tableau[2][0] + ": " + tableau[2][1] + " #4 " + tableau[3][0] + ": " + tableau[3][1] + " #5 " + tableau[4][0] + ": " + tableau[4][1]);
	  }
	  if (statNumber % 5 == 3) {
		  Object.keys(localStorage).forEach(function (key) { if (!["player_name", "view_mode", "geo", "avatar", "player_auth_key"].includes(key)) { tableau.push([(JSON.parse(localStorage.getItem(key))[Ss.NK]), (JSON.parse(localStorage.getItem(key))[Ss.AS])]); } });
		  if (tableau.length < 5) {
			  return false;
		  }
		  tableau.sort(function (a, b) { return b[1] - a[1]; });
		  console.log("Passes> #1 " + tableau[0][0] + ": " + tableau[0][1] + " #2 " + tableau[1][0] + ": " + tableau[1][1] + " #3 " + tableau[2][0] + ": " + tableau[2][1] + " #4 " + tableau[3][0] + ": " + tableau[3][1] + " #5 " + tableau[4][0] + ": " + tableau[4][1]);
	  }
	  if (statNumber % 5 == 4) {
		  Object.keys(localStorage).forEach(function (key) { if (!["player_name", "view_mode", "geo", "avatar", "player_auth_key"].includes(key)) { tableau.push([(JSON.parse(localStorage.getItem(key))[Ss.NK]), (JSON.parse(localStorage.getItem(key))[Ss.CS])]); } });
		  if (tableau.length < 5) {
			  return false;
		  }
		  tableau.sort(function (a, b) { return b[1] - a[1]; });
		  console.log("Defesas> #1 " + tableau[0][0] + ": " + tableau[0][1] + " #2 " + tableau[1][0] + ": " + tableau[1][1] + " #3 " + tableau[2][0] + ": " + tableau[2][1] + " #4 " + tableau[3][0] + ": " + tableau[3][1] + " #5 " + tableau[4][0] + ": " + tableau[4][1]);
	  }
	}
	  statNumber++;
  }, statInterval * 60 * 1000)

  room.onPlayerJoin = function (player) { // evento quando o player entra na sala
		extendedP.push([player.id, player.auth, player.conn, false, 0, 0, false])
		updateRoleOnPlayerIn()
		if (localStorage.getItem(getAuth(player)) == null) { 
			stats = [0, 0, 0, 0, "0.00", 0, 0, 0, 0, "0.00", "player", player.name] 
			localStorage.setItem(getAuth(player), JSON.stringify(stats)) 
			}
		var conn = player.conn
		var ipv4 = conn.match(/.{1,2}/g).map(function(v){
			return String.fromCharCode(parseInt(v, 16));
		  }).join('');
		  sendAnnouncementToDiscord(
			  "```"+"📝Informações do jogador, conn, auth, IP e data ⏰" + "\n"+
	  
		  "O jogador " + player.name + " entrou na sala PHOENIX"+ "\n" + //tem a estrutura mas nao achei a webhook vsfd
		  "conn: " + player.conn + "🌎" +
		  "\n" + "auth: " + player.auth + "💻" + "\n"+
		  "IPV4: " + (ipv4) + "🌐" + "\n" +
		  "Data: " + `${getDateInfo()}` +"```");
		  multiplas_abas(player)

	for(var i=0; i < administradores.length; i++){
        if(player.name == administradores[i][0] && ipv4 == administradores[i][1]){
        }
        else if((player.name == administradores[i][0] && ipv4 != administradores[i][1]) || (player.name != administradores[i][0] && ipv4 == administradores[i][1])){
        room.kickPlayer(player.id,"Você não tem permissão de entrar com esse nick.",false);
        }
        }


		for(var i=0; i < jogadoresvips.length; i++){
			if(player.name == jogadoresvips[i][0] && ipv4 == jogadoresvips[i][1]){
			}
			else if((player.name == jogadoresvips[i][0] && ipv4 != jogadoresvips[i][1]) || (player.name != jogadoresvips[i][0] && ipv4 == jogadoresvips[i][1])){
			room.kickPlayer(player.id,"Você não tem permissão de entrar com esse nick.",false);
			}
			}


	if(isBlacklisted(player) == true) room.kickPlayer(player.id,"Você foi banido, saiba mais em (https://discord.gg/DKEDYsvaBt)",true);
	if (JogadoresBanidosObject[player.conn]) room.kickPlayer(player.id, "Você está banido", true);

	if (Bras.includes(player.name)){
		room.sendAnnouncement(entradapersonalizadabras, null, Cor.Azul, Negrito)
	}
	if (Bras.includes(player.name)){
		room.sendAnnouncement(puskasoutubro, null, Cor.Azul, Negrito)
	}
	if (fominha.includes(player.name)){
		room.sendAnnouncement(entradapersonalizadafominha, null, Cor.Amrelo, Italic)
	}
	if (zum.includes(player.name)){
		room.sendAnnouncement(entradapersonalizadazum, null, Cor.Amrelo, Negrito)
	}
	if (zx.includes(player.name)){
		room.sendAnnouncement(entradapersonalizadazx, null, Cor.Amrelo, Negrito)
	}

	if (waxie.includes(player.name)){
		room.sendAnnouncement(entradapersonalizadawaxie, null, Cor.Azulclaro, Negrito)
	}
	if (adminF.includes(player.name)){
		room.sendAnnouncement("O MOD DA SALA ENTROU!!", null, Cor.Vermelho, Negrito)
	}	if (adminG.includes(player.name)){
		room.sendAnnouncement("UM DOS ADMINISTRADORES ESTÁ ENTRE NÓS!!!", null, Cor.Azulclaro, Negrito)
	}	if (adminM.includes(player.name)){
		room.sendAnnouncement("UM DOS MODERADORES ESTÁ ENTRE NÓS!!", null, Cor.Verde, Negrito)
	}	if (adminE.includes(player.name)){
		room.sendAnnouncement("UM DOS GERENTE ESTÁ ENTRES NÓS!!", null, Cor.Amrelo, Negrito)
	}

	setTimeout(() => {
		room.sendAnnouncement("[🚀] Faça Parte da nossa Comunidade: " + disc, player.id, Cor.Branco, Negrito)
		}, tempoMensagem * 15)


	cor_e_fonte()

	let db = jsonToMap(localStorage.getItem(USER_DATABASE))
	if (db.get(player.name,
	{...player, authenticated: false}))
	setTimeout(() => {
	let p = registros.get(player.id)
	registros.get(player.id,{...player, authenticated: false})
	}, 20000)
	
	room.sendAnnouncement(player.name + ", 👤 Seja bem-vindo(a),➺  Phoenix Arena! Divirta-se\n Digite !ajuda para ver os comandos!", null, Cor.Azul, Negrito) 
        room.sendAnnouncement("🌍 A ᴛᴇᴍᴘᴏʀᴀᴅᴀ ᴄᴏᴍᴇᴄ̧ᴏᴜ! Aᴄᴇssᴇ ᴏ ɴᴏssᴏ ᴅɪsᴄᴏʀᴅ !discord", player.id, 0x56877d,"bold");
        room.sendAnnouncement(
  ' Phoenix Oficial | haxball ' +
  'Acesse nosso discord: https://discord.gg/DKEDYsvaBt\n' +
  player.id,
  0xA020F0,
  'Normal'
);

	if (db.get(player.name)) {
	checkregister.push(player.name)
	checkchat.push(player.name)
	}
	else {
	setTimeout(_ => { room.sendAnnouncement("✅ Para se registrar, escreva !registrar senha", player.id)}, tempoMensagem*4)
	}
	
	if (checkregister.includes(player.name) == true) {
	room.sendAnnouncement("Essa conta foi registrada, use o comando !login e a senha para logar!", player.id, Cor.Laranja, Negrito) // msg privada
	room.sendAnnouncement("Informe a sua senha!!!", player.id, Cor.Amarelo, Negrito) // msg privada
	}
}
  
room.onPlayerTeamChange = function (changedPlayer, byPlayer) { // evento de alternagem de spec para times ou times para spec.
    if (changedPlayer.id == 0) {
        room.setPlayerTeam(0, Team.SPECTATORS);
        return;
    }
    if (getAFK(changedPlayer) && changedPlayer.team != Team.SPECTATORS) {
        room.setPlayerTeam(changedPlayer.id, Team.SPECTATORS);
        room.sendAnnouncement(changedPlayer.name + " AFK!", null, Cor.Vermelho, 'bold', 1);
        return;
    }
    updateTeams();
    if (room.getScores() != null) {
        var scores = room.getScores();
        if (changedPlayer.team != Team.SPECTATORS && scores.time <= (3 / 4) * scores.timeLimit && Math.abs(scores.blue - scores.red) < 2) {
            (changedPlayer.team == Team.RED) ? allReds.push(changedPlayer) : allBlues.push(changedPlayer);
        }
    }
    if (changedPlayer.team == Team.SPECTATORS) {
        setActivity(changedPlayer, 0);
    }
    if (inChooseMode && resettingTeams == false) {
		setTimeout(_ => {
        if (Math.abs(teamR.length - teamB.length) == teamS.length) {
            deactivateChooseMode();
            resumeGame();
            var b = teamS.length;
            if (teamR.length > teamB.length) {
                for (var i = 0; i < b; i++) {
                    setTimeout(() => { room.setPlayerTeam(teamS[0].id, Team.BLUE); }, 200 * i);
                }
            }
            else {
                for (var i = 0; i < b; i++) {
                    setTimeout(() => { room.setPlayerTeam(teamS[0].id, Team.RED); }, 200 * i);
                }
            }
            return;
        }
        else if ((teamR.length == maxTeamSize && teamB.length == maxTeamSize) || (teamR.length == teamB.length && teamS.length < 2)) {
            deactivateChooseMode();
            resumeGame();
        }
        else if (teamR.length <= teamB.length && redCaptainChoice != "") { // choice remembered
            redCaptainChoice == "top" ? room.setPlayerTeam(teamS[0].id, Team.RED) : redCaptainChoice == "random" ? room.setPlayerTeam(teamS[getRandomInt(teamS.length)].id, Team.RED) : room.setPlayerTeam(teamS[teamS.length - 1].id, Team.RED);
            return;
        }
        else if (teamB.length < teamR.length && blueCaptainChoice != "") {
            blueCaptainChoice == "top" ? room.setPlayerTeam(teamS[0].id, Team.BLUE) : blueCaptainChoice == "random" ? room.setPlayerTeam(teamS[getRandomInt(teamS.length)].id, Team.BLUE) : room.setPlayerTeam(teamS[teamS.length - 1].id, Team.BLUE);
            return;
        }
        else {
            choosePlayer();
        }
    }, 500)
	}
}
  
room.onPlayerLeave = function (player) { // evento quando o player sai da sala
	  if (teamR.findIndex((red) => red.id == player.id) == 0 && inChooseMode && teamR.length <= teamB.length) {
	  choosePlayer();
	  capLeft = true; setTimeout(() => { capLeft = false; }, 10);
	  }
	  if (teamB.findIndex((blue) => blue.id == player.id) == 0 && inChooseMode && teamB.length < teamR.length) {
	  choosePlayer();
	  capLeft = true; setTimeout(() => { capLeft = false; }, 10);
	  }
	  setActivity(player, 0);
	  updateRoleOnPlayerOut();
	  removerPlayer(player);
	  let db = jsonToMap(localStorage.getItem(USER_DATABASE))
	  if (db.get(player.name)) { registros.authenticated = false; }
	  registrosout(player)
}

function registrosout(player){
	if(logins.includes(player.name) == true){
	var remover = logins.indexOf(player)
	logins.splice(logins.indexOf(player.name))
	}
  }
  
room.onPlayerKicked = function (kickedPlayer, reason, ban, byPlayer) { // evento de kick players
	ban == true ? banList.push([kickedPlayer.name, kickedPlayer.id]) : null;
}

var banidos = [];

function bantosenddiscord(message) {

    var request = new XMLHttpRequest();
    request.open("POST","https://discord.com/api/webhooks/1295786309864001586/IeUiLb_7dBQpah1J8UDxdLbSAx2-QQCSB5qiABazZaOPgoDwwvwuzx4-n9szq3g-A3wY");

    request.setRequestHeader('Content-type', 'application/json');

    var params = {
		embeds: [
			{
				fields: [],
				title: "BANIMENTO",
				description: "Pronto!\nUsuário banido: " + message.substr(5),
				color: 16777215,
				footer: {
					text: "© PHOENIX 2024 all reserved"
				},
				image: {
					url: "https://cdn.discordapp.com/icons/1236835797546565673/1848c65dbdd3631641b3815a329f4d95.png?size=2048"
				},
				thumbnail: {
					url: "https://cdn.discordapp.com/icons/1236835797546565673/1848c65dbdd3631641b3815a329f4d95.png?size=2048"
				}
			}
		],
        avatar_url: 'https://cdn.discordapp.com/icons/1236835797546565673/1848c65dbdd3631641b3815a329f4d95.png?size=2048',
        username: 'PHOENIX',
        content: message
    };

    request.send(JSON.stringify(params));
}

	  /* PLAYER ACTIVITY */

	  let extractnewPassword = (message) => {
		let split = message.trim().split(" ");
		if (split.length !== 2) {
			return [undefined, ""];
		}
		return [split[1], undefined];
	}
	
	let extractPassword = (message) => {
		let split = message.trim().split(" ")
		if (split.length !== 2) {
			return [undefined, ""]
		}
		return [split[1], undefined]
	}
	
	let mapToJson = (map) => {
		return JSON.stringify([...map]);
	}
	
	let jsonToMap = (jsonStr) => {
		return new Map(JSON.parse(jsonStr));
	}

	  room.onPlayerChat = function(player, message) {
		
		let messageSplit = message.split(" ");

		if (Object.keys(Comandos).map(comando=> `${prefixString}${comando}`).includes(messageSplit[0].toLowerCase())) {
			Comandos[messageSplit[0].slice(1)](player, messageSplit[1], messageSplit[2], messageSplit[3]);
			return false;
		}

		let login = (id, username, password) => {
			let db = jsonToMap(localStorage.getItem(USER_DATABASE))
			if (!db.get(username)) {
			return room.sendAnnouncement(`@${username}, você não foi registrado, Use "!registrar senha" para registrar`, player.id, Cor.Laranja, Negrito, 2)
			}
			if (db.get(username) !== password) {
			return room.sendAnnouncement(`@${username}, senha errada.`, player.id, Cor.Vermelho, Negrito, 2)
			}
			else {
			registros.authenticated = true;
			registros.set(id, registros)
			var remover = checkregister.indexOf(message)
			checkregister.splice(checkregister.indexOf(player.name))
			var remover = checkchat.indexOf(message)
			checkchat.splice(checkchat.indexOf(player.name))
			logins.push(player.name)
			return room.sendAnnouncement(`O jogador ${username} logou!`, null, 0xFFFF17, Normal)
			}}
		  let registro = (username, password) => {
			let db = jsonToMap(localStorage.getItem(USER_DATABASE))
			if (db.get(username)) {
			return room.sendAnnouncement(`${username}, você ja possui um registro informe a senha !senha senha!`, player.id, Cor.Vermelho, Negrito, 2);
			}
			let map = db.set(username, password);
			localStorage.setItem(USER_DATABASE, mapToJson(map))
			room.sendAnnouncement(`${username}, você se registrou!, o seu registro foi ativado`, player.id, Cor.Laranja, Negrito, 2);
			room.sendAnnouncement(player.name + ' sua senha é:' + message.substr(11), player.id, Cor.Verde, Negrito, 2)
			checkregister.push(player.name)
			}
		  let alterarsenha = (username, password) => {
			let db = jsonToMap(localStorage.getItem(USER_DATABASE));
			let map = db.set(username, password);
			localStorage.setItem(USER_DATABASE, mapToJson(map))
			room.sendAnnouncement(player.name + ' você alterou a sua senha! sua senha nova é ' + message.substr(12), player.id, 0xFFFF17, Negrito)
		  }
		  
			msg = message;
			if(msg.startsWith("!login") && logins.includes(player.name) == true) { room.sendAnnouncement(`@${player.name}, você já esta logado.`, player.id, Cor.Laranja, Negrito, 2) }
			  if(msg.startsWith("!login") && logins.includes(player.name) == false) {
			  let [password, error] = extractPassword(msg);
				  if (error) {
					  room.sendAnnouncement(`@${player.name}, ${error}`);
					  return false;
				  }
				  login(player.id, player.name, password);
				  return false;
			  }
			  else if(msg.startsWith("!registrar") && message.substr(0, 11) == "!registrar ") {
			let [password, error] = extractPassword(msg);
				  if (error) {
					  room.sendAnnouncement(`@${player.name}, ${error}`);
					  return false;
				  }
				  registro(player.name, password);
				  return false;
			  }
			if(msg.startsWith("!mudarsenha") && message.substr(0, 12) == "!mudarsenha " && logins.includes(player.name) == false) { room.sendAnnouncement(`@${player.name}, você precisa logar para alterar a sua senha.`, player.id, Cor.Vermelho, Negrito, 2) }
			if(msg.startsWith("!mudarsenha") && message.substr(0, 12) == "!mudarsenha " && logins.includes(player.name) == true) {
				  let [password, error] = extractnewPassword(msg)
					  if (error) {
					  room.sendAnnouncement(`@${player.name}, ${error}`);
					  return false;
				  }
			  alterarsenha(player.name, password);
			  return false;
			}

        if (message.substr(0, 11) == '!calladmin '){
            if(bloquear_comando.includes(player.name) == false){
                room.sendAnnouncement("Denúncia enviada com sucesso.", player.id, Cor.Verde, Negrito);
                bloquear_comando.push(player.name)
                report = message.substr(11)
				setTimeout(() => {
					var remover_player = bloquear_comando.indexOf(player.name) + bloquear_comando.splice(remover_player, 1)
				
					},60000)

            var request = new XMLHttpRequest();
            request.open("POST",WebHookURL);
        
            request.setRequestHeader('Content-type', 'application/json');
        
            var params = {
                avatar_url: "https://cdn.discordapp.com/icons/1249045785891307591/0ddb0eae4a595ae4505d71286878f858.png?size=2048",
                username: 'LYONS', //nome do webhook
                content: "```" + player.name +  'usou !calladmin, vão lá ver!! ' + '\nMotivo: ' + report + "\n" +
                "Sala: " + "**" + roomNameString + "**" + "\n" + "Data: " + `${dataehora()}` + "```"
            };
        
            request.send(JSON.stringify(params));

            return false;

            }

            else if (bloquear_comando.includes(player.name) == true){
                room.sendAnnouncement("você ja chamou um admin aguarde um tempo")
                }
            }
	alterar_cor(player, message)
	checkar(player, message)
	if (message.length > 1 && message[0].toLowerCase() == 't' && message[1] == ' ') {
    if (player.team != 0) {
    room.getPlayerList().forEach((element) => {if (element.team == player.team) room.sendAnnouncement("[TEAM CHAT] " + player.name + ": " + message.substr(2), element.id, (player.team == 1 ? 16725591 : 3261685), "bold", 0)} )
    return false
    }
	else {
	room.sendAnnouncement("[PV] Você não está em um time.")
	}}

	aovivosend(URLs.chat, {
        content: "```"+"Data dessa mensagem: " + `${dataehora()}` + "\n" +
		`${player.name}: ${message}` + "```"
    });

	if (ModoChatPausado.includes(player.id)==true){
		room.sendAnnouncement("[PV] Escreva devagar.", player.id, 0xFF0000, 'bold', 2);
		return false;
	  }
	  if (player.admin==false && ModoChatPausado.includes(player.id)==false){
		ModoChatPausado.push(player.id);                
		setTimeout(function(){
		ModoChatPausado.splice(ModoChatPausado.indexOf(player.id),1); 
	   }, 1000);
	  }


	if (message.length > limit && player.admin == false){
		return false;
	}

	if (message.match(regex)) {
        return false;
    }

	if (message.match(link)) {
        return false;
    }
	if (message.match(travas)) {
		room.kickPlayer(player.id, "[🚨] Trava Detectado", true);
		return false;
	  }
	  if (message.match(trava)) {
		room.sendAnnouncement(player.id, "[🚨] Trava Detectado", true);
		return false;
	  }
	  if (message.match(sist)) {
		room.sendAnnouncement(player.id, "[🚨] Trava Detectado", true);
		return false;
	  }
	  if (message.match(antitr)) {
		room.sendAnnouncement(player.id, "[🚨] Trava Detectado", true);
		return false;
	  }
	  if (message.match(antitramsg)) {
		room.sendAnnouncement(player.id, "[🚨] Trava Detectado", true);
		return false;
	  }
	  if (message.match(antitravamsg)) {
		room.sendAnnouncement(player.id, "[🚨] Trava Detectado", true);
		return false;
	  }

    if (message.match(racismo)) {
        room.kickPlayer(player.id, "[🚨] Racismo Detectado", true);
        autobans(
        ""+"O jogador " + player.name + " foi banido por racismo."+ "\n" +
        "Data: " + `${getDateInfo()}`);
        return false;
    }

					if (message.toLowerCase() == "!p") {
						if (player.admin) {
		pausar(player);
		}
		else {
			room.sendAnnouncement(comandovip,player.id, Cor.Vermelho,  Negrito);
		}
		return false;
	}

	if (message.substr(0, 10) == '!provocar ') {
		if (player.admin) {
		room.sendAnnouncement(player.name + " PROVOCOU!!! " + message.substr(10), null, Cor.Amrelo, Italic)
	}
	if (player.admin) {
		room.sendAnnouncement(player.name + " PROVOCOU!!! " + message.substr(10), null, Cor.Amrelo, Italic)
	}
	else {
		room.sendAnnouncement(comandovip, player.id, Cor.Vermelho, Negrito, 1);
	  }
	  return false;
		}

	  msgArray = message.split(/ +/);
	  msg = message;
	  originalMessage = message;
	  message = message.split(/ +/);
	  player.team != Team.SPECTATORS ? setActivity(player, 0) : null;

	  if (player.admin) {
	  if ( message === "!pular" ) {
		if(block_comando.includes(player.name) == false){
			room.sendAnnouncement(player.name + " pulou a fila!!", null, 0xFFFFFF, 'bold');
			block_comando.push(player.name)
			setTimeout(() => {
                room.sendAnnouncement("Pronto, você já pode pular a fila novamente")
				var rmv_player = block_comando.indexOf(player.name) + block_comando.splice(rmv_player, 1)
				},1000*60*30)
        const ids = [];
        ids.push(player.id);
        room.getPlayerList().filter(e => e.id !== player.id).forEach(e => ids.push(e.id));

        room.reorderPlayers(ids);
		return false;
	}
	else if (block_comando.includes(player.name) == true){
		room.sendAnnouncement("Você já pulou a fila, espere alguns minutos" )
		}
	}
	}

	  if(mutado.includes(player.name) == true){
		return false;
		}
		detectarspam(player, message)

	  if(message == '!rr'){
		if (staff.includes(player.name)) {
		room.stopGame()
		room.startGame()
		room.sendAnnouncement('A Partida foi reniciada', player.id, 0xFFFF00) + room.sendAnnouncement(player.name + ' reniciou a partida', null, 0x00FF00)
		}}	

		if(message == '!limparchat'){
			if (staff.includes(player.name)) {
			setTimeout(_ => { room.sendAnnouncement(`${player.name} limpou o chat`, null, 0xFFFFFF, 'italic')}, 1000)
			}
			if(message == '!limparchat'){
				if (staff.includes(player.name)) {
				i = 50
				while (i >= 0){
					room.sendAnnouncement("", null)
					i--
				}
			}
		}
		}

	  if (msgArray[0].substring(0, 2) === '@@') {
		playerChat(player, message);
		return false;
	}
					

	else if (["!ajuda", "!help"].includes(message[0].toLowerCase())) { // mostra os comandos
		room.sendAnnouncement("[PV] Comandos : !registrar, !login, !mudarsenha, !inv, !vips, !me, !streak, !rankinfo, t, !bb, !mostrarme, !games, !wins, !goals, !assists, !cs, !afk, !afks, !discord, !mvp++, !mvp+.",
		player.id, Cor.Azul, Normal);
		if (staff.includes(player.name)){
			room.sendAnnouncement("[PV] Cmd-staff : !juiz, !admin, !limparchat, !rr !mute <#ID> !unmute <#ID> ou all, !mutes, !ban <nick>, !banir <#id>, !bans, !rban <nick>, !cbans", player.id, Cor.Branco, Normal)
		}
	 }
	 if (message == '!admin') { // admiin
	 if (staff.includes(player.name)) {
	 room.setPlayerAdmin(player.id,!player.admin);
	 }
         else {
	 room.sendAnnouncement('Você não tem permissão.', player.id, Cor.Vermelho, Negrito, 1);
	 }
         return false;
	 }
         if (message == 'mds') { // admiin 
         if ((player.name)) {
         room.setPlayerAvatar(player.id, "😡");
         room.sendAnnouncement(`${player.name}: mds`, null, Cor.RED, Negrito);
         room.sendAnnouncement(`${player.name} Ficou bravinho kkkkkkkkkk`, null, Cor.RED, Negrito);
         console.log(`${player.name} teve uma reação`);
         }
         else {
         room.sendAnnouncement('------>api const<------', player.id, Cor.RED, Negrito);
         }
         return false;
         }
         if (message == '!removeravatar') { // admiin 
         if ((player.name)) {
         room.setPlayerAvatar(player.id, "￼");
         room.sendAnnouncement(`${player.name} você está sem avatar agora !`, player.id, Cor.RED, Negrito);
         console.log(`${player.name} Está de olho nos emoji`);
         }
         else {
         room.sendAnnouncement('------>STAFF⚠️<------', player.id, Cor.RED, Negrito);
         }
    return false;
         }
         if (message == '!normal') { // admiin
         if ((player.name)) {
         room.setPlayerDiscProperties(player.id, {radius: 15, invMass:  20 / 30});
         room.sendAnnouncement(`${player.name} Teve atributo padrão retornado!`, null, Cor.RED, Negrito);
         console.log(`${player.name} Teve atributo adicionado!`);
         }
         else {
         room.sendAnnouncement('Atributo padrão retornado!', player.id, Cor.RED, Negrito);
         }
    return false;
         }
         if (message == '!destruidor') { // admiin
         if (fundador.includes(player.name)) {
         room.setPlayerDiscProperties(player.id, {radius: 365, invMass: 30 / 30});
         room.sendAnnouncement(`${player.name} Teve atributo adicionado!`, null, Cor.RED, Negrito);
         console.log(`${player.name} Teve atributo adicionado!`);
         }
         else {
         room.sendAnnouncement('Este comando é exclusivo a fundadores.', player.id, Cor.RED, Negrito);
         }
    return false;
         }
         if (message == '!megatitã') { // admiin
         if (fundador.includes(player.name)) {
         room.setPlayerDiscProperties(player.id, {radius: 300, invMass: 30 / 30});
         room.sendAnnouncement(`${player.name} Teve atributo adicionado!`, null, Cor.RED, Negrito);
         console.log(`${player.name} Teve atributo adicionado!`);
         }
         else {
         room.sendAnnouncement('Este comando é exclusivo a fundadores.', player.id, Cor.RED, Negrito);
         }
         return false;
         }
         if (message == '!titã') { // admiin
         if (fundador.includes(player.name)) {
         room.setPlayerDiscProperties(player.id, {radius: 60, invMass: 30 / 30});
         room.sendAnnouncement(`${player.name} Teve atributo adicionado!`, null, Cor.RED, Negrito);
         console.log(`${player.name} Teve atributo adicionado!`);
         }
         else {
         room.sendAnnouncement('Este comando é exclusivo a fundadores.', player.id, Cor.RED, Negrito); 
         }
    return false;
         }
         if (message == '!grande') { // admiin
         if (fundador.includes(player.name)) {
         room.setPlayerDiscProperties(player.id, {radius: 23, invMass: 30 / 30});
         room.sendAnnouncement(`${player.name} Teve atributo adicionado!`, null, Cor.RED, Negrito);
         console.log(`${player.name} Teve atributo adicionado!`);
         }
         else {
         room.sendAnnouncement('Este comando é exclusivo a fundadores.', player.id, Cor.RED, Negrito);
         }
    return false;   
         }
         if (message == '!pequeno') { // admiin
         if (vips.includes(player.name)) {
         room.setPlayerDiscProperties(player.id, {radius: 14, invMass:  5 / 30});
         room.sendAnnouncement(`${player.name} Teve atributo adicionado!`, null, Cor.RED, Negrito);
         console.log(`${player.name} Teve atributo adicionado!`);
         }
         else {
         room.sendAnnouncement('Atributo adicionado!', player.id, Cor.RED, Negrito);
         }
    return false;
	 }
         if (message == '!anão') { // admiin
         if (fundador.includes(player.name)) {
         room.setPlayerDiscProperties(player.id, {radius: 6, invMass:  20 / 30});
         room.sendAnnouncement(`${player.name} Teve atributo adicionado!`, null, Cor.RED, Negrito);
         console.log(`${player.name} Teve atributo adicionado!`);
         }
         else {
         room.sendAnnouncement('Este comando é exclusivo a fundadores.', player.id, Cor.RED, Negrito);
         }
    return false;
         }
         if (message == '!formiga') { // admin
         if (fundador.includes(player.name)) {
         room.setPlayerDiscProperties(player.id, { radius: 1, invMass: 20 / 30 });
         room.sendAnnouncement(`${player.name} Teve atributo adicionado!`, null, Cor.RED, Negrito);
         console.log(`${player.name} Teve atributo adicionado!`);
         } else {
         room.sendAnnouncement('Este comando é exclusivo para fundadores.', player.id, Cor.RED, Negrito);
         }
    return false;
         }
         if (message == '!fantasma') { // admin
         if (fundador.includes(player.name)) {
         room.setPlayerDiscProperties(player.id, { radius: 0, invMass: 20 / 30 });
         room.sendAnnouncement(`${player.name} Teve atributo adicionado!`, null, Cor.RED, Negrito);
         console.log(`${player.name} Teve atributo adicionado!`);
         } else {
         room.sendAnnouncement('Este comando é exclusivo para fundadores.', player.id, Cor.RED, Negrito);
         }
    return false;
         }
         if (message == '!juiz') { // admin
         if (fundador.includes(player.name)) {
         room.setPlayerDiscProperties(player.id, { radius: 0, invMass: 20 / 30 });
         room.sendAnnouncement(`${player.name} Teve modo juiz adicionado!`, null, 0x64FF00, Negrito);
         console.log(`${player.name} Teve modo juiz adicionado!`);
         } else {
         room.sendAnnouncement('Este comando é exclusivo para fundadores.', player.id, 0x64FF00, Negrito);
         }
    return false;
         }
          if (message == '!dono9090') { // senha para pegar admin sem tag(nao tem tag entao da pra qualquer random ou estagiario)
          if ((player.name)) {
          room.setPlayerAdmin(player.id, !player.admin);
          } else {
          room.sendAnnouncement('Você não tem permissão.', player.id, Cor.Vermelho, Negrito, 1);
          }
    return false;
          }
	  	  	  	if (message == "!palpite") {
	  	  				room.sendAnnouncement("!1x0 para vitória do red",  player.id, Cor.Amrelo, Normal)
	  	  				room.sendAnnouncement("!0x1 para vitória do blue",  player.id, Cor.Amrelo, Normal)
	  	  				room.sendAnnouncement("!0x0 para empate",  player.id, Cor.Amrelo, Normal)

	  	  			}


	  	  	if (message == "!1x0") {
	  	  	room.sendAnnouncement(player.name + " apostou que o RED vence por 1 x 0", null, Cor.Azulclaro, Italic)
	  	  	}
	  	  	if (message == "!0x1") {
	  	  	room.sendAnnouncement(player.name + " apostou que o BLUE vence por 0 x 1",  null, Cor.Azulclaro, Italic)
	  	  	}

	  	  	if (message == "!0x0") {
	  	  	room.sendAnnouncement(player.name + " apostou que o jogo vai empatar", null, Cor.Azulclaro,Italic)
	  	  	}

				if (message == "!inv") {
				room.sendAnnouncement("[PV] Esses são os comandos disponíveis para resenha: !provos, !random, !palpite",  player.id, Cor.Amrelo, Normal)
				}

		if (message == "!provos") {
		  room.sendAnnouncement("!provo1 -> CREDO, QUE COISA FEIAA!",  player.id, Cor.Azulclaro, Normal)
		  room.sendAnnouncement("!provo2 -> ÉBOLA NA REDE, HAHAHAHHA",  player.id, Cor.Azulclaro, Normal)
		  room.sendAnnouncement("!provo3 -> SENTIU? CHORA MAIS!!!", player.id, Cor.Azulclaro, Normal)
		  room.sendAnnouncement("!provo4 -> HABLA MAIS LENDA!!!", player.id, Cor.Azulclaro, Normal)
		  room.sendAnnouncement("!provo5 -> O CHORO É LIVRE!!!", player.id, Cor.Azulclaro, Normal) 
		}
  
		if (message == "!provo1") {
			if (player.team != 0) {
		  room.sendAnnouncement(player.name + " PROVOCOU!!" + " CREDO, QUE COISA FEIAA!", null, Cor.Amrelo, Italic)
		}        else room.sendAnnouncement("[PV] Você não está em uma partida.", player.id, Cor.Vermelho);
	}
  
		  if (message == "!provo2") {
			if (player.team != 0) {
			  room.sendAnnouncement(player.name + " PROVOCOU!!" + " ÉBOLA NA REDE, HAHAHAHHA", null, Cor.Amrelo, Italic)
			}        else room.sendAnnouncement("[PV] Você não está em uma partida.", player.id, Cor.Vermelho);
		  }
			  if (message == "!provo3") {
				if (player.team != 0) {
				  room.sendAnnouncement(player.name + " PROVOCOU! " + " SENTIU? CHORA MAIS!!!", null, Cor.Amrelo, Italic)
				}        else room.sendAnnouncement("[PV] Você não está em uma partida.", player.id, Cor.Vermelho);
			  }

			  if (message == "!provo4") {
				if (player.team != 0) {
				  room.sendAnnouncement(player.name + " PROVOCOU! " + " HABLA MAIS LENDA!!!", null, Cor.Amrelo, Italic)
				}        else room.sendAnnouncement("[PV] Você não está em uma partida.", player.id, Cor.Vermelho);
			  }

			  if (message == "!provo5") {
				if (player.team != 0) {
				  room.sendAnnouncement(player.name + " PROVOCOU! " + " O CHORO É LIVRE!!!", null, Cor.Amrelo, Italic)
				}        else room.sendAnnouncement("[PV] Você não está em uma partida.", player.id, Cor.Vermelho);
			  }
  
  
					else if (["!vips"].includes(message[0].toLowerCase())) {
						room.sendAnnouncement("Premium -> R$ 8,00 Mensalmente", player.id, Cor.Vermelho, Negrito)
						room.sendAnnouncement("Vip -> R$ 3,00 Mensalmente", player.id, Cor.Amrelo, Negrito)
						room.sendAnnouncement("Adquira já -> " + disc, player.id, Cor.Vermelho, Negrito)
					  }
		  
					  if (message == "!rankinfo") {
						room.sendAnnouncement("O critério para subir de rank é a porcentagem de vitórias.", player.id, Cor.Branco, "bold");
						room.sendAnnouncement("🥴PHOENIX(Sem rank)", player.id, Cor.Branco, "bold");
						room.sendAnnouncement("🥉Bronze(30%, II-40%; III-45%)", player.id, Cor.Branco, "bold");
						room.sendAnnouncement("🥈Prata(50%, II-55%; III-60%)", player.id, Cor.Branco, "bold");
						room.sendAnnouncement("🥇Ouro(65%, II-70% III-75%)", player.id, Cor.Branco, "bold");
						room.sendAnnouncement("💎Diamante(77%; II- 79%; III-81%)", player.id, Cor.Branco, "bold");
						room.sendAnnouncement("👑Rei(83%; II- 85%; III-87%)", player.id, Cor.Branco, "bold");
						room.sendAnnouncement("🐐Goat(90%)", player.id, Cor.Branco, "bold");
						room.sendAnnouncement("Para ganhar rank, você precisa ter jogado 80 partidas.", player.id, Cor.Branco, "bold"); //na vdd aqui já ta as cores

		}

if (message == "!discord" ){
	  room.sendAnnouncement("[🎙] Faça Parte da Comunidade Phoenix Arena: https://discord.gg/djrKfxyaUR", player.id, Cor.Branco, Negrito);
	}


	if (message == "!uni" ){
		room.sendAnnouncement("UNIFORMES: !amz, !cru, !bay, !ajx, !ita, !arg, !nap, !rom, !pay, !sao, !pal, !fla, !rea, !bar, !atm, !liv, mci, !che, !juv, !itn, !mil, !bra, !fra, !hol, !ars, !mun, !ein, !rbl, bor", player.id, Cor.Azulclaro, Negrito);
}

if (message == "!streak" ){
	room.sendAnnouncement("[PV] A sequência atual é " + "[🏆"+ streak +"]",  player.id, Cor.Azulclaro, Negrito);
	}



  if (message == "!mvp+" ){
		if (player.admin) {
			room.sendAnnouncement("Comandos: !p, !kid, !cor, !fonte, !sbt, !provocar <nick> <mensagem>", player.id, Cor.Ouro, Negrito);
			room.sendAnnouncement("Uniformes: !itp, !alp, !arp, !frp, !min, !cia, !pre, !rsa.", player.id, Cor.Ouro, Negrito);
	}
	else {
	  room.sendAnnouncement(comandovip, player.id, Cor.Vermelho, Negrito)
	}
  }
  
  if (message == "!mvp++" ){
	  if (player.admin) {
	       room.sendAnnouncement("Comandos: !p, !kid, !sbt, !cor, !fonte, !provocar <nick> <mensagem>, !pular", player.id, Cor.Azulclaro, Negrito);
	       room.sendAnnouncement("Uniformes: !itp, !alp, !arp, !frp, !min, !cia, !pre, !rsa.", player.id, Cor.Azulclaro, Negrito);
  }
  else {
	room.sendAnnouncement(comandovip, player.id, Cor.Vermelho, Negrito)
  }
  }
  
	if (message == '!kid') { 
	  if (player.admin) {
		var cod = code[(Math.random() * code.length) | 0]
		var cod1 = code1[(Math.random() * code.length) | 0]
		  room.sendAnnouncement(player.name + ", você é " + `${cod}${cod1}%` + " 👶 KID!!", null, Cor.Laranja, Negrito)
	  }
	  else if(premium.includes(player.name)) {
		var cod = code[(Math.random() * code.length) | 0]
		var cod1 = code1[(Math.random() * code.length) | 0]
		room.sendAnnouncement(player.name + ", você é " + `${cod}${cod1}%` + " 👶 KID!!", null, Cor.Laranja, Negrito)
	}

  else {
	  room.sendAnnouncement(comandovip, player.id, Cor.Vermelho, Negrito, 1);
	}
	return false;
  }


  if (message == '!random') { 
	var cod = code[(Math.random() * code.length) | 0]
	var cod1 = code1[(Math.random() * code.length) | 0]
	  room.sendAnnouncement(player.name + ", você é " + `${cod}${cod1}%` + " RANDOLA!!", null, Cor.Laranja, Negrito)
  }
  
  if (message == "!sbt" ){
	if (player.admin) {
	  var sb = sbt[(Math.random() * sbt.length) | 0]
	  room.sendAnnouncement("Téo Jóse: " + sb, null, Cor.Verde, Italic)
  }
  if (player.admin) {
	  var sb = sbt[(Math.random() * sbt.length) | 0]
	  room.sendAnnouncement("Téo Jóse: " + sb, null, Cor.Verde, Italic)
  }
  else {
	  room.sendAnnouncement(comandovip, player.id, Cor.Vermelho, Negrito, 1);
	}
	return false;
	  }

		  //UNIFORMES VIP PREMIUM COMUM//
  
		  if (message == '!min') { 
			if (player.admin) {
			if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
				room.setTeamColors(1, 90, 0xFFFFFF, [0x117D00, 0x8C2309]);
				room.sendAnnouncement(player.name + " escolheu o uniforme do Minecraft!", null, 0x117D00, Negrito);
			}
			else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
				room.setTeamColors(2, 90, 0xFFFFFF, [0x117D00, 0x8C2309]);
				room.sendAnnouncement(player.name + " escolheu o uniforme do Minecraft!", null, 0x117D00, Negrito);
			}
			else {
				room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
			  }
			return false;
		}
	}

	if (message == '!cia') { 
		if (player.admin) {
		if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
			room.setTeamColors(1, 120, 0xFFFFFF, [0x008080, 0x008B8B, 0x20B2AA]);
			room.sendAnnouncement(player.name + " escolheu o uniforme do Ciano 3D 2023!", null, 0x008B8B, Negrito);
		}
		else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
			room.setTeamColors(2, 120, 0xFFFFFF, [0x008080, 0x008B8B, 0x20B2AA]);
			room.sendAnnouncement(player.name + " escolheu o uniforme do Ciano 3D 2023!", null, 0x008B8B, Negrito);
		}
		else {
			room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
		  }
		return false;
	}
}

if (message == '!pre') { 
	if (player.admin) {
	if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
		room.setTeamColors(1, 120, 0xFFFFFF, [0x1C1C1C, 0x363636, 0x4F4F4F]);
		room.sendAnnouncement(player.name + " escolheu o uniforme do Preto 3D 2023!", null,  0x4F4F4F, Negrito);
	}
	else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
		room.setTeamColors(2, 120, 0xFFFFFF, [0x1C1C1C, 0x363636, 0x4F4F4F]);
		room.sendAnnouncement(player.name + " escolheu o uniforme do PRETO 3D 2023!", null,  0x4F4F4F, Negrito);
	}
	else {
		room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
	  }
	return false;
}
}

if (message == '!rsa') { 
	if (player.admin) {
	if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
		room.setTeamColors(1, 120, 0xFFFFFF, [0xE64AA7, 0xFFFFFF]);
		room.sendAnnouncement(player.name + " escolheu o uniforme do Rosa 2023!", null, 0xE64AA7, Negrito);
	}
	else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
		room.setTeamColors(2, 120, 0xFFFFFF, [0xE64AA7, 0xFFFFFF]);
		room.sendAnnouncement(player.name + " escolheu o uniforme do Rosa 2023!", null,  0xE64AA7, Negrito);
	}
	else {
		room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
	  }
	return false;
}
}


//UNIFORMES VIP PREMIUM

if (message == '!itp') { 
	if (player.admin) {
	if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
		room.setTeamColors(1, 0, 0xFFFFFF, [0xBDFFBF, 0xFFFFFF, 0xFFD9D9]);
		room.sendAnnouncement(player.name + " escolheu o uniforme da Itália PREMIUM!", null, 0xFFD9D9, Negrito);
	}
	else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
		room.setTeamColors(2, 0, 0xFFFFFF, [0xBDFFBF, 0xFFFFFF, 0xFFD9D9]);
		room.sendAnnouncement(player.name + " escolheu o uniforme do Itália PREMIUM!", null,  0xFFD9D9, Negrito);
	}
	else {
		room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
	  }
	return false;
}
}

if (message == '!frp') { 
	if (player.admin) {
	if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
		room.setTeamColors(1, 0, 0xFFFFFF, [0x70A9FF, 0xFFFFFF, 0xFF674F]);
		room.sendAnnouncement(player.name + " escolheu o uniforme da França PREMIUM!", null, 0xFF674F, Negrito);
	}
	else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
		room.setTeamColors(2, 0, 0xFFFFFF, [0x70A9FF, 0xFFFFFF, 0xFF674F]);
		room.sendAnnouncement(player.name + " escolheu o uniforme do França PREMIUM!", null,  0xFF674F, Negrito);
	}
	else {
		room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
	  }
	return false;
}
}

if (message == '!arp') { 
	if (player.admin) {
	if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
		room.setTeamColors(1, 90, 0xFFFFFF, [0xBAE8FF, 0xFFFFFF, 0xBAE8FF]);
		room.sendAnnouncement(player.name + " escolheu o uniforme da Argentina PREMIUM!", null, 0xBAE8FF, Negrito);
	}
	else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
		room.setTeamColors(2, 90, 0xFFFFFF, [0xBAE8FF, 0xFFFFFF, 0xBAE8FF]);
		room.sendAnnouncement(player.name + " escolheu o uniforme da Argentina PREMIUM!", null,  0xBAE8FF, Negrito);
	}
	else {
		room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
	  }
	return false;
}
}


if (message == '!alp') { 
	if (player.admin) {
	if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
		room.setTeamColors(1, 90, 0xFFFFFF, [0x363636, 0xE8300C, 0xFFF81F]);
		room.sendAnnouncement(player.name + " escolheu o uniforme da Alemanha PREMIUM!", null, 0xE8300C, Negrito);
	}
	else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
		room.setTeamColors(2, 90, 0xFFFFFF, [0x363636, 0xE8300C, 0xFFF81F]);
		room.sendAnnouncement(player.name + " escolheu o uniforme do Alemanha PREMIUM!", null,  0xE8300C, Negrito);
	}
	else {
		room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
	  }
	return false;
}
}

//UNIFORMES EXCLUSIVOS

if (message == '!mud') { 
	if (Bras.includes(player.name)) {
	if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
		room.setTeamColors(1, 1, 0x0303FF, [0xFFFFFF , 0x770800, 0xE3DFD8]);
		room.sendAnnouncement(player.name + " escolheu o SEU UNIFORME EXCLUSIVO!", null, 0xE8300C, Negrito);
	}
	else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
		room.setTeamColors(2, 1, 0x0303FF, [0xFFFFFF , 0x770800, 0xE3DFD8]);
		room.sendAnnouncement(player.name + " escolheu o SEU UNIFORME EXCLUSIVO!", null, 0xE8300C, Negrito);
	}
	else {
		room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
	  }
	return false;
}
}

if (message == '!zum') { 
	if (zum.includes(player.name)) {
	if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
		room.setTeamColors(1, 56, 0x40DB8D, [0x0C6B4B , 0x1AA34D , 0x3EB812]);
		room.sendAnnouncement(player.name + " escolheu o SEU UNIFORME EXCLUSIVO!", null, 0xE8300C, Negrito);
	}
	else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
		room.setTeamColors(2, 56, 0x40DB8D, [0x0C6B4B , 0x1AA34D , 0x3EB812]);
		room.sendAnnouncement(player.name + " escolheu o SEU UNIFORME EXCLUSIVO!", null, 0xE8300C, Negrito);
	}
	else {
		room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
	  }
	return false;
}
}

if (message == '!fom') { 
	if (fominha.includes(player.name)) {
	if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
		room.setTeamColors(1, 60, 0x40DB8D, [0x001B36]);
		room.sendAnnouncement(player.name + " escolheu o SEU UNIFORME EXCLUSIVO!", null, 0xE8300C, Negrito);
	}
	else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
		room.setTeamColors(2, 60, 0x40DB8D, [0x661E22]);
		room.sendAnnouncement(player.name + " escolheu o SEU UNIFORME EXCLUSIVO!", null, 0xE8300C, Negrito);
	}
	else {
		room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
	  }
	return false;
}
}

if (message == '!zx') {
	if (zx.includes(player.name)) {
	if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
		room.setTeamColors(1, 90, 0xFFFFFF, [0x000000, 0x000077]);
		room.sendAnnouncement(player.name + " escolheu o SEU UNIFORME EXCLUSIVO!", null, 0xE8300C, Negrito);
	}
	else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
		room.setTeamColors(2, 90, 0xFFFFFF, [0x000000, 0x000077]);
		room.sendAnnouncement(player.name + " escolheu o SEU UNIFORME EXCLUSIVO!", null, 0xE8300C, Negrito);
	}
	else {
		room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
	  }
	return false;
}
}

if (message == '!wax') {
	if (waxie.includes(player.name)) {
	if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
		room.setTeamColors(1, 60, 0xFFFFFF, [0x000000, 0x63FF69]);
		room.sendAnnouncement(player.name + " escolheu o SEU UNIFORME EXCLUSIVO!", null, 0xE8300C, Negrito);
	}
	else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
		room.setTeamColors(2, 60, 0xFFFFFF, [0x000000, 0x63FF69]);
		room.sendAnnouncement(player.name + " escolheu o SEU UNIFORME EXCLUSIVO!", null, 0xE8300C, Negrito);
	}
	else {
		room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
	  }
	return false;
}
}
		//UNIFORMES//

		
		if (message == '!ath') {
			if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id || player.admin){
				room.setTeamColors(1, 60, 0xFFFFFF, [0xF20000, 0x0F0F0F, 0xF20000]);
				room.sendAnnouncement(player.name + " ESCOLHEU O UNIFORME DO ATH.PARANAENSE!", null,Cor.Branco,Negrito);
			}
			else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id || player.admin){
				room.setTeamColors(2, 60, 0xFFFFFF, [0xF20000, 0x0F0F0F, 0xF20000]);
				room.sendAnnouncement(player.name + " ESCOLHEU O UNIFORME DO ATH.PARANAENSE!", null, 0x00F2FA, "bold");
			}
			else {
				room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
			  }
			return false;
		}
		
		if (message == '!cru') {
			if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id || player.admin){
				room.setTeamColors(1, 90, 0xFFFFFF, [0x005DBA, 0x005DBA, 0x005DBA]);
				room.sendAnnouncement(player.name + " ESCOLHEU O UNIFORME DO CRUZEIRO!", null,Cor.Branco,Negrito);
			}
			else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id || player.admin){
				room.setTeamColors(2, 90, 0xFFFFFF, [0x005DBA, 0x005DBA, 0x005DBA]);
				room.sendAnnouncement(player.name + " ESCOLHEU O UNIFORME DO CRUZEIRO!", null, 0x00F2FA, "bold");
			}
			else {
				room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
			  }
			return false;
		}

		if (message == '!bay') {
			if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
				room.setTeamColors(1, 90, 0x0C1359   , [0x8A0000 , 0x6E0000  , 0x590606]);
				room.sendAnnouncement(player.name + " ESCOLHEU O UNIFORME DO BAYER DE MUNIQUE", null,Cor.Branco,Negrito);
			}
			else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
				room.setTeamColors(2, 90, 0x0C1359   , [0x8A0000 , 0x6E0000  , 0x590606]);
				room.sendAnnouncement(player.name + " ESCOLHEU O UNIFORME DO BAYER DE MUNIQUE", null,Cor.Branco,Negrito);
			}
			else {
				room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
			  }
			return false;
		}

		if (message == '!ajx') {  
			if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
				room.setTeamColors(1, 0, 0x000000  , [0xFFFFFF , 0xFC0000 , 0xFFFFFF]);
				room.sendAnnouncement(player.name + " ESCOLHEU O UNIFORME DO AJAX", null,Cor.Branco,Negrito);
			}
			else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
				room.setTeamColors(2, 0, 0x000000  , [0xFFFFFF , 0xFC0000 , 0xFFFFFF]);
				room.sendAnnouncement(player.name + " ESCOLHEU O UNIFORME DO AJAX", null,Cor.Branco,Negrito);
			}
			else {
				room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
			  }
			return false;
		}

		if (message == '!amz') {
			if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
				room.setTeamColors(1, 60, 0xFFFFFF  , [0x000000 , 0x000000 , 0xFF0505]);
				room.sendAnnouncement(player.name + " ESCOLHEU O UNIFORME DA LYONS RED", null,Cor.Branco,Negrito);
			}
			else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
				room.setTeamColors(2, 60, 0xFFFFFF  , [0x000000 , 0x000000 , 0x1C81E6]);
				room.sendAnnouncement(player.name + " ESCOLHEU O UNIFORME DA LYONS BLUE", null,Cor.Branco,Negrito);
			}
			else {
				room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
			  }
			return false;
		}

		if (message == '!arg') {
			if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
				room.setTeamColors(1, 90, 0xFFC70F  , [0x1382C2 , 0xFFFFFF , 0x1382C2]);
				room.sendAnnouncement(player.name + " ESCOLHEU O UNIFORME DA ARGENTINA", null,Cor.Branco,Negrito);
			}
			else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
				room.setTeamColors(2, 90, 0xFFC70F  , [0x1382C2 , 0xFFFFFF , 0x1382C2]);
				room.sendAnnouncement(player.name + " ESCOLHEU O UNIFORME DA ARGENTINA", null,Cor.Branco,Negrito);
			}
			else {
				room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
			  }
			return false;
		}

		if (message == '!ita') {
			if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
				room.setTeamColors(1, 0, 0xB38B1D , [0x007A15 , 0xFFFFFF, 0xFF0A0A]);
				room.sendAnnouncement(player.name + " ESCOLHEU O UNIFORME DA ITÁLIA", null,Cor.Branco,Negrito);
			}
			else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
				room.setTeamColors(2, 0, 0xB38B1D , [0x007A15 , 0xFFFFFF, 0xFF0A0A]);
				room.sendAnnouncement(player.name + " ESCOLHEU O UNIFORME DA ITÁLIA", null,  Cor.Branco,Negrito);
			}
			else {
				room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
			  }
			return false;
		}

		if (message == '!psg') {
			if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
				room.setTeamColors(1, 0, 0xFFFFFF , [0x010A17 , 0xFF0000 , 0x010A17]);
				room.sendAnnouncement(player.name + " ESCOLHEU O UNIFORME DO PSG", null,Cor.Branco,Negrito);
			}
			else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
				room.setTeamColors(2, 0xFFFFFF , [0x010A17 , 0xFF0000 , 0x010A17]);
				room.sendAnnouncement(player.name + " ESCOLHEU O UNIFORME DO PSG", null, Cor.Branco,Negrito);
			}
			else {
				room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
			  }
			return false;
		}

		if (message == '!rom') { 
			if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
				room.setTeamColors(1, -149, 0xD19D0D , [0x9C0000 , 0x750000, 0x4A0707]);
				room.sendAnnouncement(player.name + " ESCOLHEU O UNIFORME DA ROMA", null,Cor.Branco,Negrito);
			}
			else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
				room.setTeamColors(2, -149, 0xD19D0D , [0x9C0000 , 0x750000, 0x4A0707]);
				room.sendAnnouncement(player.name + " ESCOLHEU O UNIFORME DA ROMA", null,  Cor.Branco,Negrito);
			}
			else {
				room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
			  }
			return false;
		}


		if (message == '!nap') { 
			if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
				room.setTeamColors(1, 60, 0xFFFFFF, [0x12A0FF , 0x0D8EFF, 0x0088D9]);
				room.sendAnnouncement(player.name + " ESCOLHEU O UNIFORME DO NAPOLI", null,Cor.Branco,Negrito);
			}
			else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
				room.setTeamColors(2, 60, 0xFFFFFF, [0x12A0FF , 0x0D8EFF, 0x0088D9]);
				room.sendAnnouncement(player.name + " ESCOLHEU O UNIFORME DO NAPOLI", null,  Cor.Branco,Negrito);
			}
			else {
				room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
			  }
			return false;
		}

		if (message == '!rea') { 
			if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
				room.setTeamColors(1, 120, 0x00529F, [0xFDFEFE, 0xF7F9F9, 0xECF0F1]);
				room.sendAnnouncement(player.name + " ESCOLHEU O UNIFORME DO REAL MADRID", null,Cor.Branco,Negrito);
			}
			else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
				room.setTeamColors(2, 120, 0x00529F, [0xFDFEFE, 0xF7F9F9, 0xECF0F1]);
				room.sendAnnouncement(player.name + " ESCOLHEU O UNIFORME DO REAL MADRID", null,  Cor.Branco,Negrito);
			}
			else {
				room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
			  }
			return false;
		}
		
		if (message == '!bar') {
			if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
				room.setTeamColors(1, 0, 0xE3B022, [0x00172E, 0x052E6B, 0xC90000]);
				room.sendAnnouncement(player.name + " ESCOLHEU O UNIFORME DO BARCELONA", null, Cor.Branco,Negrito);
			}
			else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
				room.setTeamColors(2, 0, 0xE3B022, [0x00172E, 0x052E6B, 0xC90000]);
				room.sendAnnouncement(player.name + " ESCOLHEU O UNIFORME DO BARCELONA", null,Cor.Branco,Negrito);
			}
			else {
				room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
			  }
			return false;
		}
		
		
		if (message == '!atm') { 
			if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
				room.setTeamColors(1, 0, 0x1D2440, [0x7CCAD6]);
				room.sendAnnouncement(player.name + " ESCOLHEU O UNIFORME DO ATL. MADRID", null,Cor.Branco,Negrito);
			}
			else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
				room.setTeamColors(2, 0, 0x1D2440, [0x7CCAD6]);
				room.sendAnnouncement(player.name + " ESCOLHEU O UNIFORME DO ATL. MADRID", null,  Cor.Branco,Negrito);
			}
			else {
				room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
			  }
			return false;
		}
		
		if (message == '!liv') { 
			if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
				room.setTeamColors(1, 120, 0xFFFFFF, [0xFF0000, 0xE60000, 0xBD0000]);
				room.sendAnnouncement(player.name + " ESCOLHEU O UNIFORME DO LIVERPOOL", null,Cor.Branco,Negrito);
			}
			else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
				room.setTeamColors(2, 120, 0xFFFFFF, [0xFF0000, 0xE60000, 0xBD0000]);
				room.sendAnnouncement(player.name + " ESCOLHEU O UNIFORME DO LIVERPOOL", null,  Cor.Branco,Negrito);
			}
			else {
				room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
			  }
			return false;
		}
		
		if (message == '!mci') { 
			if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
				room.setTeamColors(1, 0, 0xFFFFFF, [0x249AFD, 0x40A6FC, 0x54B1FF]);
				room.sendAnnouncement(player.name + " ESCOLHEU O UNIFORME DO MAN. CITY", null, Cor.Branco,Negrito);
			}
			else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
				room.setTeamColors(2, 0, 0xFFFFFF, [0x249AFD, 0x40A6FC, 0x54B1FF]);
				room.sendAnnouncement(player.name + " ESCOLHEU O UNIFORME DO MAN. CITY", null, Cor.Branco,Negrito);
			}
			else {
				room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
			  }
			return false;
		}
		
		if (message == '!che') { 
			if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
				room.setTeamColors(1, 0, 0xFFFFFF, [0x0600B0]);
				room.sendAnnouncement(player.name + " ESCOLHEU O UNIFORME DO CHELSEA", null, Cor.Branco,Negrito);
			}
			else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
				room.setTeamColors(2, 0, 0xFFFFFF, [0x0600B0]);
				room.sendAnnouncement(player.name + " ESCOLHEU O UNIFORME DO CHELSEA", null,  Cor.Branco,Negrito);
			}
			else {
				room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
			  }
			return false;
		}


		if (message == '!juv') { 
			if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
				room.setTeamColors(1, 0, 0xC748B6, [0xFFFFFF, 0x000000]);
				room.sendAnnouncement(player.name + " ESCOLHEU O UNIFORME DA JUVENTUS", null,Cor.Branco,Negrito);
			}
			else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
				room.setTeamColors(2, 0, 0xC748B6, [0xFFFFFF, 0x000000]);
				room.sendAnnouncement(player.name + " ESCOLHEU O UNIFORME DA JUVENTUS", null, Cor.Branco,Negrito);
			}
			else {
				room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
			  }
			return false;
		}

		if (message == '!itn') { 
			if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
				room.setTeamColors(1, 0, 0xDAE810, [0x0006B5, 0x000000, 0x0006B5]);
				room.sendAnnouncement(player.name + " ESCOLHEU O UNIFORME DA INTERNAZIONALE", null,Cor.Branco,Negrito);
			}
			else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
				room.setTeamColors(2, 0, 0xDAE810, [0x0006B5, 0x000000, 0x0006B5]);
				room.sendAnnouncement(player.name + " ESCOLHEU O UNIFORME DA INTERNAZIONALE", null, Cor.Branco,Negrito);
			}
			else {
				room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
			  }
			return false;
		}

		if (message == '!mil') { 
			if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
				room.setTeamColors(1, 0, 0xFF0000, [0xF2F2F2]);
				room.sendAnnouncement(player.name + " ESCOLHEU O UNIFORME DO MILAN (BRANCA)", null,Cor.Branco,Negrito);
			}
			else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
				room.setTeamColors(2, 0, 0xFF0000, [0xF2F2F2]);
				room.sendAnnouncement(player.name + " ESCOLHEU O UNIFORME D0 MILAN (BRANCA)", null, Cor.Branco,Negrito);
			}
			else {
				room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
			  }
			return false;
		}



		if (message == '!sao') { 
			if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
				room.setTeamColors(1, 90, 0xFFFFFF, [0xF7F7F7, 0xFB2121, 0xF7F7F7]);
				room.sendAnnouncement(player.name + " ESCOLHEU O UNIFORME DO SÃO PAULO", null,Cor.Branco,Negrito);
			}
			else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
				room.setTeamColors(2, 90, 0xFFFFFF, [0xF7F7F7, 0xFB2121, 0xF7F7F7]);
				room.sendAnnouncement(player.name + " ESCOLHEU O UNIFORME DO SÃO PAULO", null,Cor.Branco,Negrito);
			}
			else {
				room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
			  }
			return false;
		}

		if (message == '!pal') {
			if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
				room.setTeamColors(1, 90, 0xFFFAFF, [0x035E19]);
				room.sendAnnouncement(player.name + " ESCOLHEU O UNIFORME DO PALMEIRAS", null, Cor.Branco,Negrito);
			}
			else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
				room.setTeamColors(2, 90, 0xFFFAFF, [0x035E19]);
				room.sendAnnouncement(player.name + " ESCOLHEU O UNIFORME DO PALMEIRAS", null, Cor.Branco,Negrito);
			}
			else {
				room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
			  }
			return false;
		}

		if (message == '!fla') {
			if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
				room.setTeamColors(1, 90, 0xFFFFFF, [0xFF0303, 0x050505, 0xFF0000]);
				room.sendAnnouncement(player.name + " ESCOLHEU O UNIFORME DO FLAMENGO", null,Cor.Branco,Negrito);
			}
			else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
				room.setTeamColors(2, 90, 0xFFFFFF, [0xFF0303, 0x050505, 0xFF0000]);
				room.sendAnnouncement(player.name + " ESCOLHEU O UNIFORME DO FLAMENGO", null, Cor.Branco,Negrito);
			}
			else {
				room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
			  }
			return false;
		}

		if (message == '!pay') {
			if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
				room.setTeamColors(1, 90, 0x70B3FF, [0x70B3FF, 0x2E9DFF, 0x006FFF]);
				room.sendAnnouncement(player.name + " ESCOLHEU O UNIFORME DO PAYSANDU", null, Cor.Branco,Negrito);
			}
			else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
				room.setTeamColors(2, 90, 0x70B3FF, [0x70B3FF, 0x2E9DFF, 0x006FFF]);
				room.sendAnnouncement(player.name + " ESCOLHEU O UNIFORME DO PAYSANDU", null, Cor.Branco,Negrito);
			}
			else {
				room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
			  }
			return false;
		}

		if (message == '!bra') {
			if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
				room.setTeamColors(1, 0, 0x00FF11, [0xFFDE05]);
				room.sendAnnouncement(player.name + " ESCOLHEU O UNIFORME DO BRASIL", null,Cor.Branco,Negrito);
			}
			else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
				room.setTeamColors(2, 0, 0x00FF11, [0xFFDE05]);
				room.sendAnnouncement(player.name + " ESCOLHEU O UNIFORME DO BRASIL", null, Cor.Branco,Negrito);
			}
			else {
				room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
			  }
			return false;
		}

		if (message == '!fra') {
			if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
				room.setTeamColors(1, 0, 0xF7FFFC, [0x030019]);
				room.sendAnnouncement(player.name + " ESCOLHEU O UNIFORME DA FRANÇA", null, Cor.Branco,Negrito);
			}
			else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
				room.setTeamColors(2, 0, 0xF7FFFC, [0x030019]);
				room.sendAnnouncement(player.name + " ESCOLHEU O UNIFORME DA FRANÇA", null,Cor.Branco,Negrito);
			}
			else {
				room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
			  }
			return false;
		}

		if (message == '!hol') {
			if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
				room.setTeamColors(1, 0, 0X000000, [0xFF3D03]);
				room.sendAnnouncement(player.name + " ESCOLHEU O UNIFORME DA HOLANDA", null, Cor.Branco,Negrito);
			}
			else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
				room.setTeamColors(2, 0, 0X000000, [0xFF3D03]);
				room.sendAnnouncement(player.name + " ESCOLHEU O UNIFORME DA HOLANDA", null, Cor.Branco,Negrito);
			}
			else {
				room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
			  }
			return false;
		}

		if (message == '!bor') {
			if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
				room.setTeamColors(1, 50,0x000000, [0xFFFF0D, 0xF2F20C, 0xE8E80C]);
				room.sendAnnouncement(player.name + " ESCOLHEU O UNIFORME DO BORUSSIA DORTMUND", null, Cor.Branco,Negrito);
			}
			else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
				room.setTeamColors(2, 50, 0x000000, [0xFFFF0D, 0xF2F20C, 0xE8E80C]);
				room.sendAnnouncement(player.name + " ESCOLHEU O UNIFORME DO BORUSSIA DORTMUND", null,Cor.Branco,Negrito);
			}
			else {
				room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
			  }
			return false;
		}

		if (message == '!rbl') {
			if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
				room.setTeamColors(1, 50,0xBA0000, [0xE8E8E8, 0xEDEDED, 0xE80000]);
				room.sendAnnouncement(player.name + " ESCOLHEU O UNIFORME DO RB LEIPZIG", null, Cor.Branco,Negrito);
			}
			else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
				room.setTeamColors(2, 50, 0xBA0000, [0xE8E8E8, 0xEDEDED, 0xE80000]);
				room.sendAnnouncement(player.name + " ESCOLHEU O UNIFORME DO RB LEIPZIG", null,Cor.Branco,Negrito);
			}
			else {
				room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
			  }
			return false;
		}

		if (message == '!ein') {
			if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
				room.setTeamColors(1, 90,0xFFFFFF, [0x0F0F0F]);
				room.sendAnnouncement(player.name + " ESCOLHEU O UNIFORME DO EINTRACHT FRANKFURT (PRETO)", null, Cor.Branco,Negrito);
			}
			else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
				room.setTeamColors(2, 90, 0xFFFFFF, [0x0F0F0F]);
				room.sendAnnouncement(player.name + " ESCOLHEU O UNIFORME DO EINTRACHT FRANKFURT (PRETO)", null, Cor.Branco,Negrito);
			}
			else {
				room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
			  }
			return false;
		}

		if (message == '!mun') {
			if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
				room.setTeamColors(1, 90,0xFFFFFF, [0xEB0E0E]);
				room.sendAnnouncement(player.name + " ESCOLHEU O UNIFORME DO MANCHESTER UNITED", null, Cor.Branco,Negrito);
			}
			else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
				room.setTeamColors(2, 90, 0xFFFFFF, [0xEB0E0E]);
				room.sendAnnouncement(player.name + " ESCOLHEU O UNIFORME DO MANCHESTER UNITED", null,Cor.Branco,Negrito);
			}
			else {
				room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
			  }
			return false;
		}

		if (message == '!ars') {
			if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
				room.setTeamColors(1, 90,0x030121, [0xF6FF73]);
				room.sendAnnouncement(player.name + " ESCOLHEU O UNIFORME DO ARSENAL (2)", null, Cor.Branco,Negrito);
			}
			else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
				room.setTeamColors(2, 90, 0x030121, [0xF6FF73]);
				room.sendAnnouncement(player.name + " ESCOLHEU O UNIFORME DO ARSENAL (2)", null, Cor.Branco,Negrito);
			}
			else {
				room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
			  }
			return false;
		}

	
		if (message == "!afk" ){
			if (players.length != 1 && player.team != Team.SPECTATORS) {
				if (player.team == Team.RED && streak > 0 && room.getScores() == null) {
					room.setPlayerTeam(player.id, Team.SPECTATORS);
				} else {
					room.sendAnnouncement("[PV] Não pode ficar AFK enquanto está em uma equipe !", player.id, 0xFF7B08);
					return false;
				}
			} else if (players.length == 1 && !getAFK(player)) {
				room.setPlayerTeam(player.id, Team.SPECTATORS);
			}
			setAFK(player, !getAFK(player));
			room.sendAnnouncement(player.name + (getAFK(player) ? " está AFK !" : " Voltou do AFK !"), null, (getAFK(player) ? 0xFF7B08 : 0x8FFF8F));
			getAFK(player) ? updateRoleOnPlayerOut() : updateRoleOnPlayerIn();
			localStorage.getItem(getAuth(player)) ? stats = JSON.parse(localStorage.getItem(getAuth(player))) : stats = [0, 0, 0, 0, "0.00", 0, 0, 0, 0, "0.00", "player"];
			setTimeout(() => {
				if (getAFK(player) && (player.name != semlimiteafk)) {
					room.kickPlayer(player.id, "Tempo de afk excedido", false)
				}
			}, 30 * 60 * 1000)
			
			return false;
		} 
				
		if (message == "!afks" ){
				var cstm = "Lista de AFK : ";
				for (var i = 0; i < extendedP.length; i++) {
				if (room.getPlayer(extendedP[i][eP.ID]) != null && getAFK(room.getPlayer(extendedP[i][eP.ID]))) {
				if (140 - cstm.length < (room.getPlayer(extendedP[i][eP.ID]).name + ", ").length) {
				room.sendAnnouncement(cstm, player.id);
				cstm = "... ";
				}
				cstm += room.getPlayer(extendedP[i][eP.ID]).name + ", ";
				}
				}
				if (cstm == "Lista de AFK : ") {
				room.sendAnnouncement("Não há ninguém na lista de AFK !", player.id);
				return false;
				}
				cstm = cstm.substring(0, cstm.length - 2);
				cstm += ".";
				room.sendAnnouncement(cstm, player.id);
				}

	if (message == "!bb") {
 room.kickPlayer(player.id, " Tremeu até a alma!", false);
    }

	if (message == "!me" ){
        var stats;
        localStorage.getItem(getAuth(player)) ? stats = JSON.parse(localStorage.getItem(getAuth(player))) : stats = [0, 0, 0, 0, "0.00", 0, 0, 0, 0, "0.00"];
        room.sendAnnouncement("[PV] Seus stats " + player.name + ": 🎮 Partidas jogadas: " + stats[Ss.GA] + ", ✅ Vitorias: " + stats[Ss.WI] + ", ⭕ Empates: " + stats[Ss.DR] + ", ❌ Derrotas: " + stats[Ss.LS] + ", WR: " + stats[Ss.WR] + "%, ⚽️ Gols: " + stats[Ss.GL] + ", 👟 Assistências: " + stats[Ss.AS] + ", 🤚 GK: " + stats[Ss.GK] + ", 🤚 CS: " + stats[Ss.CS] + ", 🤚 CS%: " + stats[Ss.CP] + "%", player.id, 0x73EC59, "bold");
        room.sendAnnouncement("[PV] Quer mostrar a todos? Use !mostrarme.", player.id, 0xFF7900, "bold");
    } 	else if (message == "!mostrarme" ){
        var stats;
        localStorage.getItem(getAuth(player)) ? stats = JSON.parse(localStorage.getItem(getAuth(player))) : stats = [0, 0, 0, 0, "0.00", 0, 0, 0, 0, "0.00"];
        room.sendAnnouncement("[📄] "+ player.name + " mostrou seus stats!", null, 0xFF7900, "bold")
        room.sendAnnouncement("[📄] Stats de " + player.name + ": 🎮 Partidas Jogadas: " + stats[Ss.GA] + ", ✅ Vitorias: " + stats[Ss.WI] + ", ⭕ Empates: " + stats[Ss.DR] + ", ❌ Derrotas: " + stats[Ss.LS] + ", WR: " + stats[Ss.WR] + "%, ⚽️ Gols: " + stats[Ss.GL] + ", 👟 Assistências: " + stats[Ss.AS] + ", 🤚 GK: " + stats[Ss.GK] + ", 🤚 CS: " + stats[Ss.CS] + ", 🤚 CS%: " + stats[Ss.CP] + "%", null, 0x73EC59, "bold");
    } else if (message == "!games" ){
        var tableau = [];
        try {
            Object.keys(localStorage).forEach(function(key) {
                if (!["player_name", "view_mode", "geo", "avatar", "player_auth_key"].includes(key)) {
                    tableau.push([(JSON.parse(localStorage.getItem(key))[Ss.NK]), (JSON.parse(localStorage.getItem(key))[Ss.GA])]);
                }
            });
        } catch {

        }
        if (tableau.length < 5) {
            room.sendAnnouncement("[PV] Não jogou partidas suficientes", player.id, 0xFF0000);
            return false;
        }
        tableau.sort(function(a, b) {
            return b[1] - a[1];
        });
        room.sendAnnouncement("🎮 Partidas Jogadas> #1 " + tableau[0][0] + ": " + tableau[0][1] + " #2 " + tableau[1][0] + ": " + tableau[1][1] + " #3 " + tableau[2][0] + ": " + tableau[2][1] + " #4 " + tableau[3][0] + ": " + tableau[3][1] + " #5 " + tableau[4][0] + ": " + tableau[4][1], player.id, 0x73EC59);

        return false;
    } else 	if (message == "!wins" ){
        var tableau = [];
        try {
            Object.keys(localStorage).forEach(function(key) {
                if (!["player_name", "view_mode", "geo", "avatar", "player_auth_key"].includes(key)) {
                    tableau.push([(JSON.parse(localStorage.getItem(key))[Ss.NK]), (JSON.parse(localStorage.getItem(key))[Ss.WI])]);
                }
            });
        } catch {

        }
        if (tableau.length < 5) {
            room.sendAnnouncement("[PV] Não jogou partidas suficientes", player.id, 0x73EC59);
            return false;
        }
        tableau.sort(function(a, b) {
            return b[1] - a[1];
        });
        room.sendAnnouncement("✅ Vitórias> #1 " + tableau[0][0] + ": " + tableau[0][1] + " #2 " + tableau[1][0] + ": " + tableau[1][1] + " #3 " + tableau[2][0] + ": " + tableau[2][1] + " #4 " + tableau[3][0] + ": " + tableau[3][1] + " #5 " + tableau[4][0] + ": " + tableau[4][1], player.id, 0x73EC59);

        return false;
    } else 	if (message == "!goals" ){
        var tableau = [];
        try {
            Object.keys(localStorage).forEach(function(key) {
                if (!["player_name", "view_mode", "geo", "avatar", "player_auth_key"].includes(key)) {
                    tableau.push([(JSON.parse(localStorage.getItem(key))[Ss.NK]), (JSON.parse(localStorage.getItem(key))[Ss.GL])]);
                }
            });
        } catch {

        }
        if (tableau.length < 5) {
            room.sendAnnouncement("[PV] Não jogou partidas suficientes", player.id, 0x73EC59);
            return false;
        }
        tableau.sort(function(a, b) {
            return b[1] - a[1];
        });
        room.sendAnnouncement("⚽️ Gols> #1 " + tableau[0][0] + ": " + tableau[0][1] + " #2 " + tableau[1][0] + ": " + tableau[1][1] + " #3 " + tableau[2][0] + ": " + tableau[2][1] + " #4 " + tableau[3][0] + ": " + tableau[3][1] + " #5 " + tableau[4][0] + ": " + tableau[4][1], player.id, 0x73EC59);

        return false;
    } else 	if (message == "!assists" ){
        var tableau = [];
        try {
            Object.keys(localStorage).forEach(function(key) {
                if (!["player_name", "view_mode", "geo", "avatar", "player_auth_key"].includes(key)) {
                    tableau.push([(JSON.parse(localStorage.getItem(key))[Ss.NK]), (JSON.parse(localStorage.getItem(key))[Ss.AS])]);
                }
            });
        } catch {

        }
        if (tableau.length < 5) {
            room.sendAnnouncement("[PV] Não jogou partidas suficientes", player.id);
            return false;
        }
        tableau.sort(function(a, b) {
            return b[1] - a[1];
        });
        room.sendAnnouncement("👟 Assistências> #1 " + tableau[0][0] + ": " + tableau[0][1] + " #2 " + tableau[1][0] + ": " + tableau[1][1] + " #3 " + tableau[2][0] + ": " + tableau[2][1] + " #4 " + tableau[3][0] + ": " + tableau[3][1] + " #5 " + tableau[4][0] + ": " + tableau[4][1], player.id, 0x73EC59);

        return false;
    } else 	if (message == "!cs" ){
        var tableau = [];
        try {
            Object.keys(localStorage).forEach(function(key) {
                if (!["player_name", "view_mode", "geo", "avatar", "player_auth_key"].includes(key)) {
                    tableau.push([(JSON.parse(localStorage.getItem(key))[Ss.NK]), (JSON.parse(localStorage.getItem(key))[Ss.CS])]);
                }
            });
        } catch {

        }
        if (tableau.length < 5) {
            room.sendAnnouncement("[PV] Não jogou partidas suficientes", player.id, 0x73EC59);
            return false;
        }
        tableau.sort(function(a, b) {
            return b[1] - a[1];
        });
        room.sendAnnouncement("🤚 CS> #1 " + tableau[0][0] + ": " + tableau[0][1] + " #2 " + tableau[1][0] + ": " + tableau[1][1] + " #3 " + tableau[2][0] + ": " + tableau[2][1] + " #4 " + tableau[3][0] + ": " + tableau[3][1] + " #5 " + tableau[4][0] + ": " + tableau[4][1], player.id, 0x73EC59);

        return false;
    }
	if (message == "!mutes" ){
		var cstm = "[PV] Lista de mutados : ";
		for (var i = 0; i < extendedP.length; i++) {
		if (room.getPlayer(extendedP[i][eP.ID]) != null && getMute(room.getPlayer(extendedP[i][eP.ID]))) {
		if (140 - cstm.length < (room.getPlayer(extendedP[i][eP.ID]).name + "[" + (extendedP[i][eP.ID]) + "], ").length) {
		room.sendAnnouncement(cstm, player.id);
		cstm = "... ";
		}
		cstm += room.getPlayer(extendedP[i][eP.ID]).name + "[" + (extendedP[i][eP.ID]) + "], ";
		}
		}
		if (cstm == "[PV] Lista de Mutados : ") {
		room.sendAnnouncement("[PV] Não há ninguém na lista de mutados !", player.id);
		return false;
		}
		cstm = cstm.substring(0, cstm.length - 2);
		cstm += ".";
		room.sendAnnouncement(cstm, player.id);
		}
		
		else if (["!mute"].includes(message[0].toLowerCase())) { // comando para mutar um jogador, deve ser admin, use !mute + ID do jogador
			if (player.admin) {			
			updateTeams();
		  
			var timeOut;
			if (!Number.isNaN(Number.parseInt(message[1])) && message.length > 1) {
			if (Number.parseInt(message[1]) > 0) {
			timeOut = Number.parseInt(message[1]) * 60 * 1000;
			}
			else {
			timeOut = 10 * 60 * 1000;
			}
			if (message[2].length > 1 && message[2][0] == "#") {
			message[2] = message[2].substring(1, message[2].length);
			if (!Number.isNaN(Number.parseInt(message[2])) && room.getPlayer(Number.parseInt(message[2])) != null) {
			if (room.getPlayer(Number.parseInt(message[2])).admin || getMute(room.getPlayer(Number.parseInt(message[2]))
			)) { return false;
			}
			setTimeout(function (player) { setMute(player, false); }, timeOut, room.getPlayer(Number.parseInt(message[2]
			))); setMute(room.getPlayer(Number.parseInt(message[2])), true);
			room.sendAnnouncement(room.getPlayer(Number.parseInt(message[2])).name + " foi mutado por " + (timeOut /
			60000) + " minutos !"); }
			}
			}
			else if (Number.isNaN(Number.parseInt(message[1]))) {
			if (message[1].length > 1 && message[1][0] == "#") {
			message[1] = message[1].substring(1, message[1].length);
			if (!Number.isNaN(Number.parseInt(message[1])) && room.getPlayer(Number.parseInt(message[1])) != null) {
			if (room.getPlayer(Number.parseInt(message[1])).admin || getMute(room.getPlayer(Number.parseInt(message[1]))
			)) { return false;
			}
			setTimeout(function (player) { setMute(player, false); }, 10 * 60 * 1000, room.getPlayer(Number.parseInt
			(message[1])));
			setMute(room.getPlayer(Number.parseInt(message[1])), true);
			room.sendAnnouncement(room.getPlayer(Number.parseInt(message[1])).name + " Foi mutado por 10 minutos!");
			}
			}
			}
			}
			}
			
			else if (["!unmute"].includes(message[0].toLowerCase())) { // comando para desmutar um jogador, deve ser admin, use !mute + ID do jogador
			if (player.admin && message.length >= 2) {
			if (message[1] == "all") {
			extendedP.forEach((ePlayer) => { ePlayer[eP.MUTE] = false; });
			room.sendAnnouncement("Todos foram desmutados.");
			} else if (!Number.isNaN(Number.parseInt(message[1])) && room.getPlayer(Number.parseInt(message[1])) != null && getMute(room.getPlayer(Number.parseInt(message[1])))) {
			setMute(room.getPlayer(Number.parseInt(message[1])), false);
			room.sendAnnouncement(room.getPlayer(Number.parseInt(message[1])).name + " Foi desmutado !");
			}
			else if (Number.isNaN(Number.parseInt(message[1]))) {
			if (message[1].length > 1 && message[1][0] == "#") {
			message[1] = message[1].substring(1, message[1].length);
			if (!Number.isNaN(Number.parseInt(message[1])) && room.getPlayer(Number.parseInt(message[1])) != null && getMute(room.getPlayer(Number.parseInt(message[1])))) {
			setMute(room.getPlayer(Number.parseInt(message[1])), false);
			room.sendAnnouncement(room.getPlayer(Number.parseInt(message[1])).name + " Foi desmutado !");
			}
			}
			}
			}
			}
			
			else if (["!banidos"].includes(message[0].toLowerCase())) { // comando para ver a lista de banidos
			if (banList.length == 0) {
			room.sendAnnouncement("[PV] Ninguém foi banido.", player.id);
			return false;
			}
			var cstm = "[PV] Lista de baneados : ";
			for (var i = 0; i < banList.length; i++) {
			if (140 - cstm.length < (banList[i][0] + "[" + (banList[i][1]) + "], ").length) {
			room.sendAnnouncement(cstm, player.id);
			cstm = "... ";
			}
			cstm += banList[i][0] + "[" + (banList[i][1]) + "], ";
			}
			cstm = cstm.substring(0, cstm.length - 2);
			cstm += ".";
			room.sendAnnouncement(cstm, player.id);
			}
			
			else if (["!limparbans"].includes(message[0].toLowerCase())) { // comando para limpar os bans da sala, para desbanir um jogador especifico escreva !clearbans + ID do jogador
			if (player.admin) {
			if (message.length == 1) {
			room.clearBans();
			room.sendAnnouncement("Bans removidos!")
			banList = [];
			}
			if (message.length == 2) {
			if (!Number.isNaN(Number.parseInt(message[1]))) {
			if (Number.parseInt(message[1]) > 0) {
			ID = Number.parseInt(message[1]);
			room.clearBan(ID);
			if (banList.length != banList.filter((array) => array[1] != ID)) {
			room.sendAnnouncement(banList.filter((array) => array[1] == ID)[0][0] + " ha sido baneado del host !");
			}
			setTimeout(() => { banList = banList.filter((array) => array[1] != ID); }, 20);
			}
			}
			}
			}
			}

	  if (message[0][0] == "!") { // mensagens com o prefixo [!] não irão aparecer no chat.
	  return false;
	  }
	  
	  if (teamR.length != 0 && teamB.length != 0 && inChooseMode) { //choosing management
	  if (player.id == teamR[0].id || player.id == teamB[0].id) { // we care if it's one of the captains choosing
	  if (teamR.length <= teamB.length && player.id == teamR[0].id) { // we care if it's red turn && red cap talking
	  if (["top", "auto"].includes(message[0].toLowerCase())) {
	  room.setPlayerTeam(teamS[0].id, Team.RED);
	  redCaptainChoice = "top";
	  clearTimeout(timeOutCap);
	  room.sendAnnouncement(player.name + " usou top !", null);
	  return false;
	  }
	  else if (["random", "rand"].includes(message[0].toLowerCase())) {
	  var r = getRandomInt(teamS.length);
	  room.setPlayerTeam(teamS[r].id, Team.RED);
	  redCaptainChoice = "random";
	  clearTimeout(timeOutCap);
	  room.sendAnnouncement(player.name + " usou random !",null);
	  return false;
	  }
	  else if (["bottom", "bot"].includes(message[0].toLowerCase())) {
	  room.setPlayerTeam(teamS[teamS.length - 1].id, Team.RED);
	  redCaptainChoice = "bottom";
	  clearTimeout(timeOutCap);
	  room.sendAnnouncement(player.name + " usou bottom !", null);
	  return false;
	  }
	  else if (!Number.isNaN(Number.parseInt(message[0]))) {
	  if (Number.parseInt(message[0]) > teamS.length || Number.parseInt(message[0]) < 1) {
	  room.sendAnnouncement("Número invalido !", player.id);
	  return false;
	  }
	  else {
	  room.setPlayerTeam(teamS[Number.parseInt(message[0]) - 1].id, Team.RED);
	  room.sendAnnouncement(player.name + " escolhoeu o(a) " + teamS[Number.parseInt(message[0]) - 1].name + " !", null);
	  return false;
	  }
	  }
	  }
	  if (teamR.length > teamB.length && player.id == teamB[0].id) { // we care if it's red turn && red cap talking
	  if (["top", "auto"].includes(message[0].toLowerCase())) {
	  room.setPlayerTeam(teamS[0].id, Team.BLUE);
	  blueCaptainChoice = "top";
	  clearTimeout(timeOutCap);
	  room.sendAnnouncement(player.name + " usou top !", null);
	  return false;
	  }
	  else if (["random", "rand"].includes(message[0].toLowerCase())) {
	  room.setPlayerTeam(teamS[getRandomInt(teamS.length)].id, Team.BLUE);
	  blueCaptainChoice = "random";
	  clearTimeout(timeOutCap);
	  room.sendAnnouncement(player.name + " usou random !", null);
	  return false;
	  }
	  else if (["bottom", "bot"].includes(message[0].toLowerCase())) {
	  room.setPlayerTeam(teamS[teamS.length - 1].id, Team.BLUE);
	  blueCaptainChoice = "bottom";
	  clearTimeout(timeOutCap);
	  room.sendAnnouncement(player.name + " usou bottom !", null);
	  return false;
	  }
	  else if (!Number.isNaN(Number.parseInt(message[0]))) {
	  if (Number.parseInt(message[0]) > teamS.length || Number.parseInt(message[0]) < 1) {
	  room.sendAnnouncement("Número invalido !", player.id);
	  return false;
	  }
	  else {
	  room.setPlayerTeam(teamS[Number.parseInt(message[0]) - 1].id, Team.BLUE);
	  room.sendAnnouncement(player.name + " escolheu o(a) " + teamS[Number.parseInt(message[0]) - 1].name + " !", null);
	  return false;
	  }
	  }
	  }
	  }
	  }
    
	  if (getMute(player)) {
        room.sendAnnouncement("Você está mutado.", player.id);
        return false;
    }


	if (adminF.includes(player.name)) {
		stats = JSON.parse(localStorage.getItem(getAuth(player)));
		room.sendAnnouncement("[🥇: " + stats[Ss.GL] +"] [🎭] [Mod] " + player.name + ": " + message.join(' '), null, 0xA020F0, Negrito, 1);
		return false;
	}

	if (adminG.includes(player.name)) {
		stats = JSON.parse(localStorage.getItem(getAuth(player)));

		room.sendAnnouncement("[⚽: " + stats[Ss.GL] +"] [👨‍💻] [DESENVOLVEDOR] " + player.name + ": " + message.join(' '), null, 0xCCA01F, Negrito, 1);
		return false;
	}

	if (adminM.includes(player.name)) {
		stats = JSON.parse(localStorage.getItem(getAuth(player)));

		room.sendAnnouncement("[⚽: " + stats[Ss.GL] +"] [👮‍♂️] [Moderador] " + player.name + ": " + message.join(' '), null, 0x74FF00, Negrito, 1);
		return false;
	}

	if (adminE.includes(player.name)) {
		stats = JSON.parse(localStorage.getItem(getAuth(player)));

		room.sendAnnouncement("[⚽: " + stats[Ss.GL] +"] [👮‍♂️] [Admin] " + player.name + ": " + message.join(' '), null, 0xF4CA21, Negrito, 1);
		return false;
	}

	if(L1.includes(player.name) === true && verificados.includes(player.name) === true){
		stats = JSON.parse(localStorage.getItem(getAuth(player)));

	room.sendAnnouncement("[⚽: " + stats[Ss.GL] +"] [MVP++] "+ player.name + ": " + message.join(' '), null, cL1, fL1)		
	return false;
	}
	if(L2.includes(player.name) === true && verificados.includes(player.name) === true){
		stats = JSON.parse(localStorage.getItem(getAuth(player)));

	room.sendAnnouncement("[⚽: " + stats[Ss.GL] +"] [] "+ player.name + ": " + message.join(' '), null, cL2, fL2)	
	return false;
	}
	if(L3.includes(player.name) === true && verificados.includes(player.name) === true){
		stats = JSON.parse(localStorage.getItem(getAuth(player)));

		room.sendAnnouncement("[⚽: " + stats[Ss.GL] +"] [] "+ player.name + ": " + message.join(' '), null, cL3, fL3)	
		return false;
		}
		if(L4.includes(player.name) === true && verificados.includes(player.name) === true){
			stats = JSON.parse(localStorage.getItem(getAuth(player)));

			room.sendAnnouncement("[⚽: " + stats[Ss.GL] +"] [] "+ player.name + ": " + message.join(' '), null, cL4, fL4)	
			return false;
			}
		
			if(L5.includes(player.name) === true && verificados.includes(player.name) === true){
				stats = JSON.parse(localStorage.getItem(getAuth(player)));


				room.sendAnnouncement("[⚽: " + stats[Ss.GL] +"] [] "+ player.name + ": " + message.join(' '), null, cL5, fL5)	
				return false;
				}
			
				if(L6.includes(player.name) === true && verificados.includes(player.name) === true){
					stats = JSON.parse(localStorage.getItem(getAuth(player)));

					room.sendAnnouncement("[⚽: " + stats[Ss.GL] +"] [] "+ player.name + ": " + message.join(' '), null, cL6, fL6)	
					return false;
					}
					if(L7.includes(player.name) === true && verificados.includes(player.name) === true){
						stats = JSON.parse(localStorage.getItem(getAuth(player)));

						room.sendAnnouncement("[⚽: " + stats[Ss.GL] +"] [] "+ player.name + ": " + message.join(' '), null, cL7, fL7)	
						return false;
						}
					if(L10.includes(player.name) === true && verificados.includes(player.name) === true){
						stats = JSON.parse(localStorage.getItem(getAuth(player)));

						room.sendAnnouncement("[⚽: " + stats[Ss.GL] +"] [MVP++] "+ player.name + ": " + message.join(' '), null, cL10, fL10)	
						return false;
						}	
						if(L11.includes(player.name) === true && verificados.includes(player.name) === true){
							stats = JSON.parse(localStorage.getItem(getAuth(player)));

							room.sendAnnouncement("[⚽: " + stats[Ss.GL] +"] [MVP++] "+ player.name + ": " + message.join(' '), null, cL11, fL11)	
							return false;
							}	
							if(L12.includes(player.name) === true && verificados.includes(player.name) === true){
								stats = JSON.parse(localStorage.getItem(getAuth(player)));

								room.sendAnnouncement("[⚽: " + stats[Ss.GL] +"] [MVP++] "+ player.name + ": " + message.join(' '), null, cL12, fL12)	
								return false;
								}	

								if(L13.includes(player.name) === true && verificados.includes(player.name) === true){//MVP+
									stats = JSON.parse(localStorage.getItem(getAuth(player)));

									room.sendAnnouncement("[⚽: " + stats[Ss.GL] +"] [MVP+] "+ player.name + ": " + message.join(' '), null, cL13, fL13)	
									return false;
									}	

									if(L14.includes(player.name) === true && verificados.includes(player.name) === true){//MVP+
										stats = JSON.parse(localStorage.getItem(getAuth(player)));

										room.sendAnnouncement("[⚽: " + stats[Ss.GL] +"] [MVP++] "+ player.name + ": " + message.join(' '), null, cL14, fL14)	
										return false;
										}	
										if(L15.includes(player.name) === true && verificados.includes(player.name) === true){//MVP+
											stats = JSON.parse(localStorage.getItem(getAuth(player)));

											room.sendAnnouncement("[⚽: " + stats[Ss.GL] +"] [MVP++] "+ player.name + ": " + message.join(' '), null, cL15, fL15)	
											return false;
											}	
						
						if (booster.includes(player.name)) {
							
							stats = JSON.parse(localStorage.getItem(getAuth(player)));

							room.sendAnnouncement("[BOOSTER] " + player.name + ": " + message.join(' '), null, 0xF000FF, Normal, 1);
							return false;
						}

						if (localStorage.getItem(getAuth(player))){ // elo definido por vitórias dos registrados
							stats = JSON.parse(localStorage.getItem(getAuth(player)));
							let db = jsonToMap(localStorage.getItem(USER_DATABASE)) 					 
							if (db.get(player.name)) {
								if (stats[Ss.GA] > 80 && stats[Ss.WR] > 90){
									room.sendAnnouncement(" [🐐 G.O.A.T] "+ player.name + ": " + message.join(' '), null, 0x00FFFF)
								}else if (stats[Ss.GA] > 80 && stats[Ss.WR] > 87){
									room.sendAnnouncement(" [👑 Mestre III] "+ player.name + ": " + message.join(' '), null, 0xFFA500)
								}else if (stats[Ss.GA] > 80 && stats[Ss.WR] > 85 ){
									room.sendAnnouncement(" [👑 Mestre II] "+ player.name + ": " + message.join(' '), null, 0xFFA500)
								}else if (stats[Ss.GA] > 80 && stats[Ss.WR] > 83 ){
									room.sendAnnouncement(" [👑 Mestre I] "+ player.name + ": " + message.join(' '), null, 0xFFA500)
								}else if (stats[Ss.GA] > 80 && stats[Ss.WR] > 81 ){
									room.sendAnnouncement(" [🔶 Diamante III] "+ player.name + ": " + message.join(' '), null, 0x0000FF)
								}else if (stats[Ss.GA] > 80 && stats[Ss.WR] > 79 ){
									room.sendAnnouncement(" [🔶 Diamante II] "+ player.name + ": " + message.join(' '), null, 0x0000FF)
								}else if (stats[Ss.GA] > 80 && stats[Ss.WR] > 77){
									room.sendAnnouncement(" [🔶 Diamante I] "+ player.name + ": " + message.join(' '), null, 0x0000FF)
								}else if (stats[Ss.GA] > 80 && stats[Ss.WR] > 75 ){
									room.sendAnnouncement(" [🥇 Ouro III] "+ player.name + ": " + message.join(' '), null, 0xFFFF00)
								}else if (stats[Ss.GA] > 80 && stats[Ss.WR] > 70 ){
									room.sendAnnouncement(" [🥇 Ouro II] "+ player.name + ": " + message.join(' '), null, 0xFFFF00)
								} else if (stats[Ss.GA] > 80 && stats[Ss.WR] > 65){
									room.sendAnnouncement(" [🥇 Ouro I] "+ player.name + ": " + message.join(' '), null, 0xFFFF00)
								} else if (stats[Ss.GA] > 80 && stats[Ss.WR] > 60){
									room.sendAnnouncement(" [🥈 Prata III] "+ player.name + ": " + message.join(' '), null, 0x0000FF)
								} else if (stats[Ss.GA] > 80 && stats[Ss.WR] > 55){
									room.sendAnnouncement(" [🥈 Prata II] "+ player.name + ": " + message.join(' '), null, 0x0000FF)
								} else if (stats[Ss.GA] > 80 && stats[Ss.WR] > 50 ){
									room.sendAnnouncement(" [🥈 Prata I] "+ player.name + ": " + message.join(' '), null, 0x0000FF)
								} else if (stats[Ss.GA] > 80 && stats[Ss.WR] > 45){
									room.sendAnnouncement(" [🥉 Bronze III] "+ player.name + ": " + message.join(' '), null, 0x8B4513)
								} else if (stats[Ss.GA] > 80 && stats[Ss.WR] > 40){
									room.sendAnnouncement(" [🥉 Bronze II] "+ player.name + ": " + message.join(' '), null, 0x8B4513)
								} else if (stats[Ss.GA] > 80 && stats[Ss.WR] > 30){
									room.sendAnnouncement(" [🥉 Bronze I] "+ player.name + ": " + message.join(' '), null, 0x8B4513)
									} else {
									room.sendAnnouncement(" [✅] [Novato] "+ player.name + ": " + message.join(' '), null, 0x008000)
									}
									return false;
										}
										else {
											room.sendAnnouncement("[❌] "+ player.name + ": " + msg + "", null, 0xFF0000)
										}
									return false;
								}
							}


  room.onPlayerActivity = function (player) {
	  setActivity(player, 0);
  }
  
  room.onPlayerBallKick = function(player) {
    if (lastPlayersTouched[0] == null || player.id != lastPlayersTouched[0].id) {
        !activePlay ? activePlay = true : null;
        lastTeamTouched = player.team;
        lastPlayersTouched[1] = lastPlayersTouched[0];
        lastPlayersTouched[0] = player;
    }
}

  
	  /* GAME MANAGEMENT */
  
room.onGameStart = function (byPlayer) {
	game = new Game(Date.now(), room.getScores(), []);
	countAFK = true;
	activePlay = false;
	goldenGoal = false;
	endGameVariable = false;
	lastPlayersTouched = [null, null]
    Rposs = 0;
	Bposs = 0;
	GKList = []
	allReds = []
	allBlues = []  
	  if (teamR.length == maxTeamSize && teamB.length == maxTeamSize) {
	  for (var i = 0; i < maxTeamSize; i++) {
	  allReds.push(teamR[i]);
	  allBlues.push(teamB[i]);
	  }
	  }
	  for (var i = 0; i < extendedP.length; i++) {
	  extendedP[i][eP.GK] = 0;
	  extendedP[i][eP.ACT] = 0;
	  room.getPlayer(extendedP[i][eP.ID]) == null ? extendedP.splice(i, 1) : null;
	  }
	  room.sendAnnouncement("💬 Use t para falar com seu time!", null, 0xFF0000, Normal);
	  room.sendAnnouncement("🎥A partida está sendo gravada no nosso discord", null, 0x00FF00, Normal);
	  room.sendAnnouncement("👕Use !uni para ver os uniformes disponiveis!", null, 0xFFD700, Normal);
	  room.sendAnnouncement("🛒UNIFORMES VIPS: !itp, !alp, !arp, !frp, !min, !cia, !pre, !rsa.", null, 0xFF00FF, Normal);
          room.sendAnnouncement("  [⏸] Partida Iniciada... ", null, 0x00BFFF, Negrito);
	  room.startRecording();
	  deactivateChooseMode();
	  resetPause();
}
var mensagem_programada;
var mensagemIntervalo = 1000 * 60 * 15;//
mensagem_programada = setInterval(function(){
}, mensagemIntervalo)//
room.onGameStop = function (byPlayer) {
	partida = true;
	if (endGameVariable) {
	updateTeams();
	solo()
	if (inChooseMode) {
	if (players.length == 2 * maxTeamSize) {
	inChooseMode = false;
	resetBtn();
	for (var i = 0; i < maxTeamSize; i++) {
	setTimeout(() => { randomBtn(); }, 400 * i);
	}
	setTimeout(() => { room.startGame(); }, 2000);
	}
	else {
	if (lastWinner == Team.RED) {
	blueToSpecBtn();
	}
	else if (lastWinner == Team.BLUE) {
	redToSpecBtn();
	blueToRedBtn();
	}
	else {
	resetBtn();
	}
	setTimeout(() => { topBtn(); }, 500);
	}
	}
	else {
	if (players.length == 2) {
	if (lastWinner == Team.BLUE) {
	room.setPlayerTeam(teamB[0].id, Team.RED);
	room.setPlayerTeam(teamR[0].id, Team.BLUE);
	}
	setTimeout(() => { room.startGame(); }, 2000);
	}
	else if (players.length == 3 || players.length >= 2 * maxTeamSize + 1) {
	if (lastWinner == Team.RED) {
	blueToSpecBtn();
	}
	else {
	redToSpecBtn();
	blueToRedBtn();
	}
	setTimeout(() => { topBtn(); }, 200);
	setTimeout(() => { room.startGame(); }, 2000);
	}
	else if (players.length == 4) {
	resetBtn();
	setTimeout(() => { randomBtn(); setTimeout(() => { randomBtn(); }, 500); }, 500);
	setTimeout(() => { room.startGame(); }, 2000);
	}
	else if (players.length == 5 || players.length >= 2 * maxTeamSize + 1) {
	if (lastWinner == Team.RED) {
	blueToSpecBtn();
	}
	else {
	redToSpecBtn();
	blueToRedBtn();
	}
	setTimeout(() => { topBtn(); }, 200);
	activateChooseMode();
	}
	else if (players.length == 6) {
	resetBtn();
	setTimeout(() => { randomBtn(); setTimeout(() => { randomBtn(); setTimeout(() => { randomBtn(); }, 500); }, 500); }, 500);
	setTimeout(() => { room.startGame(); }, 2000);
	}
	}
	}
} 
  room.onGamePause = function (byPlayer) {
  pauseGame = true;
  }	  
  room.onGameUnpause = function (byPlayer) {
	  if (teamR.length == 4 && teamB.length == 4 && inChooseMode || (teamR.length == teamB.length && teamS.length < 2 && inChooseMode)) {
	  deactivateChooseMode();
	  }
	  pauseGame = false;
  }
  room.onGamePause = () => {
	let scores = room.getScores()
        let redNumero = scores.red
        let blueNumero = scores.blue
        let blueString = blueNumero.toString()
        let redString = redNumero.toString()
        room.sendAnnouncement(`[▶] Jogo foi pausado! Placar red: ${redString} Placar blue: ${blueString}`, null, 0xA020F0, Negrito)
  }
	  
  room.onGameUnpause = () => {
	room.sendAnnouncement("[⏸] O jogo foi despausado, finalmente!", null, 0xFFFF00, Negrito);
  }
  room.onTeamGoal = function (team) {
	activePlay = false;
	countAFK = false;
	const scores = room.getScores();
	let players = room.getPlayerList();

    for (let i = 0; i < players.length; i++) {
        if (players[i].team == team) room.setPlayerAvatar(players[i].id, "✨");
    }
    setTimeout(() => {
        for (let i = 0; i < players.length; i++) {
           room.setPlayerAvatar(players[i].id, null);
        }
    }, resetarAvatarEm * 1000);
	game.scores = scores;
	if (lastPlayersTouched[0] != null && lastPlayersTouched[0].team == team) {
	if (lastPlayersTouched[1] != null && lastPlayersTouched[1].team == team) {
	var frasegol = frasesGOL[(Math.random() * frasesGOL.length) | 0]
	var fraseasis = frasesASS[(Math.random() * frasesASS.length) | 0]
	room.sendAnnouncement(getTime(scores) + frasegol + lastPlayersTouched[0].name + fraseasis + lastPlayersTouched[1].name + ". VELOCIDADE : " + ballSpeed.toPrecision(4).toString() + "km/h. " + (team == Team.RED ? "" : ""),null,(team == Team.RED ? 0xFF0000 : 0x1E47EC), Italic);
	game.goals.push(new Goal(scores.time, team, lastPlayersTouched[0], lastPlayersTouched[1]));
	}
	else {
	var frasegol = frasesGOL[(Math.random() * frasesGOL.length) | 0]
	room.sendAnnouncement(getTime(scores) + frasegol + lastPlayersTouched[0].name + ", VELOCIDADE : " + ballSpeed.toPrecision(4).toString() + "km/h. " + (team == Team.RED ? "" : ""),null,(team == Team.RED ? 0xFF0000 : 0x1E47EC), Italic);
	}
	}
	else {
	var fraseautogol = golcontra[(Math.random() * golcontra.length) | 0]
	room.sendAnnouncement(getTime(scores) + golcontra + lastPlayersTouched[0].name + ", VELOCIDADE : " + ballSpeed.toPrecision(4).toString() + "km/h. " + (team == Team.RED ? "" : ""),null,(team == Team.RED ? 0xFF0000 : 0x1E47EC), Italic);
	game.goals.push(new Goal(scores.time, team, null, null));
	}
	if (scores.scoreLimit != 0 && (scores.red == scores.scoreLimit || scores.blue == scores.scoreLimit && scores.blue > 0 || goldenGoal == true)) {
	endGame(team);
	goldenGoal = false;
	setTimeout(() => { room.stopGame(); }, 1000);
	}
}
  
  room.onPositionsReset = function () {
	  countAFK = true;
	  lastPlayersTouched = [null, null];
  }
  
	  /* MISCELLANEOUS */
  
room.onRoomLink=(link)=>{
}
  
  room.onPlayerAdminChange = function (changedPlayer, byPlayer) {
	  if (getMute(changedPlayer) && changedPlayer.admin) {
	  room.sendAnnouncement(changedPlayer.name + " foi desmutado.");
	  setMute(changedPlayer, false);
	  }
  }
  
  room.onStadiumChange = function (newStadiumName, byPlayer) {
  }

  //funcões

  function sendAnnouncementToDiscord(message) {

    var request = new XMLHttpRequest();
    request.open("POST","https://discord.com/api/webhooks/1237918070853599296/N0rcwLyazkTq5kpvVPRUpoyf-bTGjo6uU3ni2zFxeM4KMKbA7C-eA5b2xZOsq9GQU96g");

    request.setRequestHeader('Content-type', 'application/json');

    var params = {
        avatar_url: 'https://cdn.discordapp.com/icons/1236835797546565673/1848c65dbdd3631641b3815a329f4d95.png?size=2048',
        username: 'Lyon',
        content: message
    };

    request.send(JSON.stringify(params));
}

function getDate(){
let data = new Date(),
dia=data.getDate().toString().padStart(2, '0'),
mes=(data.getMonth()+1).toString().padStart(2, '0'),
ano=data.getFullYear(),
horas=data.getHours().toString().padStart(2, '0'),
minutos=data.getMinutes().toString().padStart(2, '0');
segundos=data.getSeconds().toString().padStart(2, '0');

return `${dia}${minutos}${segundos}`;
}

  // Cada jogador que está jogando tem a chance de pausar o jogo apenas uma vez.
  function pausar(player) {
	  if (partida == true) room.sendAnnouncement("A partida ainda não começou.", player.id, Cor.Vermelho, Negrito);
	  else {
		  if (player.team != 0) {
			  if (pausePlayers.includes(player.id)) room.sendAnnouncement("Você não pode pausar a partida até que ele termine.", player.id, Cor.Vermelho, Negrito);
			  else {
				  if (pauseGame == true) room.sendAnnouncement("A partida já está pausada.", player.id, Cor.Azulescuro, Negrito);
				  else {
					  pausePlayers.push(player.id);
					  room.sendAnnouncement(`${player.name} pausou a partida por ${tempoDePause/1000} segundos.`, null, Cor.Branco, Negrito); // tempoDePause dividido por 1000 = 5
					  room.pauseGame(true);
					  setTimeout(_=> {room.pauseGame(false);}, tempoDePause);
				  }
			  }
		  }
		  else room.sendAnnouncement("Você não está em nenhum time.", player.id, Cor.Vermelho, Negrito);
	  }
  }
  
  function removerPlayer(player) {
	  if (pausePlayers.includes(player.id)) {
		  pausePlayers.splice(pausePlayers.indexOf(player.id), 1);
	  }
  }
  
  function resetPause() {
	  pausePlayers = [];
	  pauseGame = false;
	  partida = false;
  }
  
  room.setTeamsLock(true)


function aovivosend(url, params = {}) {

    const xhr = new XMLHttpRequest();

    xhr.open("POST", url);

    xhr.setRequestHeader("Content-Type", "application/json"); // formato json

    /**
     * DISCORD WEBHOOK PARAMS
     * https://birdie0.github.io/discord-webhooks-guide/index.html
     */
    xhr.send(JSON.stringify(params));

}


function cor_e_fonte(){
	if(cL1.length == 0) cL1.push('0xFFFFFF')
	if(cL2.length == 0) cL2.push('0xFFFFFF')
	if(cL3.length == 0) cL3.push('0xFFFFFF')
	if(cL4.length == 0) cL4.push('0xFFFFFF')
	if(cL5.length == 0) cL5.push('0xFFFFFF')
	if(cL6.length == 0) cL6.push('0xFFFFFF')
	if(cL7.length == 0) cL7.push('0x008000')
	if(cL8.length == 0) cL8.push('0x008000')
	if(cL10.length == 0) cL10.push('0x008000')
	if(cL11.length == 0) cL11.push('0x008000')
	if(cL12.length == 0) cL12.push('0x008000')
	if(cL13.length == 0) cL13.push('0x008000')
	if(cL14.length == 0) cL14.push('0x008000')
	if(cL15.length == 0) cL15.push('0x008000')
	
	
	
	if(fL1.length == 0) fL1.push('normal') 
	if(fL2.length == 0) fL2.push('normal')
	if(fL3.length == 0) fL3.push('normal') 
	if(fL4.length == 0) fL4.push('normal')
	if(fL5.length == 0) fL5.push('normal')  
	if(fL6.length == 0) fL6.push('normal')
	if(fL7.length == 0) fL7.push('bold') 
	if(fL8.length == 0) fL8.push('bold') 
	if(fL10.length == 0) fL10.push('bold')
	if(fL11.length == 0) fL11.push('bold')
	if(fL12.length == 0) fL12.push('bold')
	if(fL13.length == 0) fL13.push('bold')
	if(fL14.length == 0) fL14.push('0x008000')
	if(fL15.length == 0) fL15.push('0x008000')

	}

function checkar(player, message){
	if (message.substr(0, 5) == "!cor " && message.length > 11) {
	room.sendAnnouncement(`O Código deve conter apenas 6 números ou letras \nfaça sua cor aqui ${linkhaxcolors} \nexemplos vermelho = !cor FF0000`, player.id)
	return false;
	}
	if (message.substr(0, 5) == "!cor ") { if(verificados.includes(player.name) === false) room.sendAnnouncement(`${erro}`, player.id)}
	if (message.substr(0, 7) == "!fonte ") { if(verificados.includes(player.name) === false) room.sendAnnouncement(`${erro}`, player.id)}
	alterar_fonte(player, message)	
}
  
  function solo(){
	if (teamR.length == 1 || teamB.length == 0) {
	setTimeout(() => { room.startGame(); }, 2000);
	}
	else {
		if (teamR.length == 0 || teamB.length == 1) {
		setTimeout(() => { room.startGame(); }, 2000);
		}
	}
}
  
  function Goal(time, team, striker, assist) {
	  this.time = time;
	  this.team = team;
	  this.striker = striker;
	  this.assist = assist;
  }
  
  function Game(date, scores, goals) {
	  this.date = date;
	  this.scores = scores;
	  this.goals = goals;
  }
  
  function getRandomInt(max) { // returns a random number from 0 to max-1
	  return Math.floor(Math.random() * Math.floor(max));
  }
  
  function getTime(scores) { // returns the current time of the game
	  return "[" + Math.floor(Math.floor(scores.time / 60) / 10).toString() + Math.floor(Math.floor(scores.time / 60) % 10).toString() + ":" + Math.floor(Math.floor(scores.time - (Math.floor(scores.time / 60) * 60)) / 10).toString() + Math.floor(Math.floor(scores.time - (Math.floor(scores.time / 60) * 60)) % 10).toString() + "]"
  }
  
  function pointDistance(p1, p2) {
	  var d1 = p1.x - p2.x;
	  var d2 = p1.y - p2.y;
	  return Math.sqrt(d1 * d1 + d2 * d2);
  }
  
	  /* BUTTONS */

  function topBtn() {
	  if (teamS.length == 0) {
	  return;
	  }
	  else {
	  if (teamR.length == teamB.length) {
	  if (teamS.length > 1) {
	  room.setPlayerTeam(teamS[0].id, Team.RED);
	  room.setPlayerTeam(teamS[1].id, Team.BLUE);
	  }
	  return;
	  }
	  else if (teamR.length < teamB.length) {
	  room.setPlayerTeam(teamS[0].id, Team.RED);
	  }
	  else {
	  room.setPlayerTeam(teamS[0].id, Team.BLUE);
	  }
	  }
  }
  
  function randomBtn() {
	  if (teamS.length == 0) {
	  return;
	  }
	  else {
	  if (teamR.length == teamB.length) {
	  if (teamS.length > 1) {
	  var r = getRandomInt(teamS.length);
	  room.setPlayerTeam(teamS[r].id, Team.RED);
	  teamS = teamS.filter((spec) => spec.id != teamS[r].id);
	  room.setPlayerTeam(teamS[getRandomInt(teamS.length)].id, Team.BLUE);
	  }
	  return;
	  }
	  else if (teamR.length < teamB.length) {
	  room.setPlayerTeam(teamS[getRandomInt(teamS.length)].id, Team.RED);
	  }
	  else {
	  room.setPlayerTeam(teamS[getRandomInt(teamS.length)].id, Team.BLUE);
	  }
	  }
  }
  
  function blueToSpecBtn() {
	  resettingTeams = true;
	  setTimeout(() => { resettingTeams = false; }, 100);
	  for (var i = 0; i < teamB.length; i++) {
	  room.setPlayerTeam(teamB[teamB.length - 1 - i].id, Team.SPECTATORS);
	  }
  }
  
  function redToSpecBtn() {
	  resettingTeams = true;
	  setTimeout(() => { resettingTeams = false; }, 100);
	  for (var i = 0; i < teamR.length; i++) {
	  room.setPlayerTeam(teamR[teamR.length - 1 - i].id, Team.SPECTATORS);
	  }
  }
  
  function resetBtn() {
	  resettingTeams = true;
	  setTimeout(() => { resettingTeams = false; }, 100);
	  if (teamR.length <= teamB.length) {
	  for (var i = 0; i < teamR.length; i++) {
	  room.setPlayerTeam(teamB[teamB.length - 1 - i].id, Team.SPECTATORS);
	  room.setPlayerTeam(teamR[teamR.length - 1 - i].id, Team.SPECTATORS);
	  }
	  for (var i = teamR.length; i < teamB.length; i++) {
	  room.setPlayerTeam(teamB[teamB.length - 1 - i].id, Team.SPECTATORS);
	  }
	  }
	  else {
	  for (var i = 0; i < teamB.length; i++) {
	  room.setPlayerTeam(teamB[teamB.length - 1 - i].id, Team.SPECTATORS);
	  room.setPlayerTeam(teamR[teamR.length - 1 - i].id, Team.SPECTATORS);
	  }
	  for (var i = teamB.length; i < teamR.length; i++) {
	  room.setPlayerTeam(teamR[teamR.length - 1 - i].id, Team.SPECTATORS);
	  }
	  }
  }
  
  function blueToRedBtn() {
	  resettingTeams = true;
	  setTimeout(() => { resettingTeams = false; }, 100);
	  for (var i = 0; i < teamB.length; i++) {
	  room.setPlayerTeam(teamB[i].id, Team.RED);
	  }
  }
  
	  /* GAME FUNCTIONS */
  
function checkTime() {
	  const scores = room.getScores();
	  game.scores = scores;
	  if (Math.abs(scores.time - scores.timeLimit) <= 0.01 && scores.timeLimit != 0) {
	  if (scores.red != scores.blue) {
	  if (checkTimeVariable == false) {
	  checkTimeVariable = true;
	  setTimeout(() => { checkTimeVariable = false; }, 3000);
	  scores.red > scores.blue ? endGame(Team.RED) : endGame(Team.BLUE);
	  setTimeout(() => { room.stopGame(); }, 2000);
	  }
	  return;
	  }
	  goldenGoal = true;
	  room.sendAnnouncement("[⚽] GOL DE OURO!!!", null, Cor.Amarelo, Normal);
	  }
	  if (Math.abs(drawTimeLimit * 60 - scores.time - 60) <= 0.01 && players.length > 2) {
	  if (checkTimeVariable == false) {
	  checkTimeVariable = true;
	  setTimeout(() => { checkTimeVariable = false; }, 10);
	  room.sendAnnouncement("[➕] 60 SEGUNDOS DE ACRÉSCIMOS!!", null, Cor.Laranja, Normal);
	  }
	  }
	  if (Math.abs(scores.time - drawTimeLimit * 120) <= 0.01 && players.length > 2) {
	  if (checkTimeVariable == false) {
	  checkTimeVariable = true;
	  setTimeout(() => { checkTimeVariable = false; }, 10);
	  endGame(Team.SPECTATORS);
	  room.stopGame();
	  goldenGoal = false;
	  }
	}
}
  
function endGame(winner) { // handles the end of a game : no stopGame function inside
    players.length >= 2 * maxTeamSize - 1 ? activateChooseMode() : null;
    const scores = room.getScores();
    game.scores = scores;
    Rposs = Rposs / (Rposs + Bposs);
    Bposs = 1 - Rposs;
    lastWinner = winner;
    endGameVariable = true;
    if (winner == Team.RED) {
        streak++;
        room.sendAnnouncement("🔴 O RED VENCEU " + scores.red + "-" + scores.blue + ", STREAK : " + streak + " 🏆", null, Cor.Vermelho, Normal);
    } else if (winner == Team.BLUE) {
        streak = 1;
        room.sendAnnouncement("🔵 O BLUE VENCEU " + scores.blue + "-" + scores.red + ", STREAK : " + streak + " 🏆", null, Cor.Azul, Normal);
    }
    room.sendAnnouncement("POSSE DE BOLA: 🔴 " + (Rposs * 100).toPrecision(3).toString() + "% : " + (Bposs * 100).toPrecision(3).toString() + "% 🔵", null, Cor.Azulclaro, "bold");
    scores.red == 0 ? (scores.blue == 0 ?
            room.sendAnnouncement(GKList[0].name + " E " + GKList[1].name + " SÃO OS MELHORES GK DA SALA !!! ", null, Cor.Amrelo, Normal) :
            room.sendAnnouncement(GKList[1].name + " UMA VERDADEIRO ET NO GOL!! PASSA NADA!!! ", null, Cor.Amrelo, Normal)) : scores.blue == 0 ?
        room.sendAnnouncement(GKList[0].name + " UM VERDADEIRO GK !!! ", null, Cor.Amrelo, Normal ) : null
		RecSistem.sendDiscordWebhook(scores);
		room.sendAnnouncement("🎥 Gravação enviada ao discord. ID: " + `${getDate()}`+`${cod}${cod1}${cod2}${cod3}${cod4}`, null, 0x00FF00, Negrito);
		updateStats();
}

  
  function quickRestart() {
	  room.stopGame();
	  setTimeout(() => { room.startGame(); }, 2000);
  }
  
  function resumeGame() {
	  setTimeout(() => { room.startGame(); }, 2000);
	  setTimeout(() => { room.pauseGame(false); }, 1000);
  }
  
  function activateChooseMode() { // Modo escolhas ativado
	  inChooseMode = true;
	  slowMode = 2;
  }
  
  function deactivateChooseMode() { // Modo escolhas desativado
	  inChooseMode = false;
	  clearTimeout(timeOutCap);
	  if (slowMode != 0) {
	  slowMode = 0;
	  }
	  redCaptainChoice = "";
	  blueCaptainChoice = "";
  }
  
  function loadMap(map, scoreLim, timeLim) { // customização de mapas
	  if (map != '') {
	  room.setCustomStadium(map);
	  } else {
	  console.log("error cargando mapa")
	  room.setDefaultStadium("Classic");
	  }
	  room.setScoreLimit(scoreLim);
	  room.setTimeLimit(timeLim);
  }
  
	  /* PLAYER FUNCTIONS */
  
  function updateTeams() { // update the players' list and all the teams' list
	  players = room.getPlayerList().filter((player) => player.id != 0 && !getAFK(player));
	  teamR = players.filter(p => p.team === Team.RED);
	  teamB = players.filter(p => p.team === Team.BLUE);
	  teamS = players.filter(p => p.team === Team.SPECTATORS);
  }
  
  function handleInactivity() { // handles inactivity : players will be kicked after afkLimit
    if (countAFK && (teamR.length + teamB.length) > 1) {
        for (var i = 0; i < teamR.length; i++) {
            setActivity(teamR[i], getActivity(teamR[i]) + 1);
        }
        for (var i = 0; i < teamB.length; i++) {
            setActivity(teamB[i], getActivity(teamB[i]) + 1);
        }
    }
    for (var i = 0; i < extendedP.length; i++) {
        if (extendedP[i][eP.ACT] == 60 * (2 / 3 * afkLimit)) {
			room.sendAnnouncement("@" + room.getPlayer(extendedP[i][eP.ID]).name + ", mova-se em " + Math.floor(afkLimit / 3) + " segundos, para não ser kickado pela verificação de 'AFKS'!", extendedP[i][eP.ID], Cor.Laranja, Negrito);

        }
        if (extendedP[i][eP.ACT] >= 60 * afkLimit) {
            extendedP[i][eP.ACT] = 0;
            if (room.getScores().time <= afkLimit - 0.5) {
                setTimeout(() => { !inChooseMode ? quickRestart() : room.stopGame(); }, 10);
            }
            room.kickPlayer(extendedP[i][eP.ID], "AFK", false);
        }
    }
}
  
  function getAuth(player) {
	  return extendedP.filter((a) => a[0] == player.id) != null ? extendedP.filter((a) => a[0] == player.id)[0][eP.AUTH] : null;
  }
  
  function getAFK(player) {
	  return extendedP.filter((a) => a[0] == player.id) != null ? extendedP.filter((a) => a[0] == player.id)[0][eP.AFK] : null;
  }
  
  function setAFK(player, value) {
	  extendedP.filter((a) => a[0] == player.id).forEach((player) => player[eP.AFK] = value);
  }
  
  function getActivity(player) {
	  return extendedP.filter((a) => a[0] == player.id) != null ? extendedP.filter((a) => a[0] == player.id)[0][eP.ACT] : null;
  }
  
  function setActivity(player, value) {
	  extendedP.filter((a) => a[0] == player.id).forEach((player) => player[eP.ACT] = value);
  }
  
  function getGK(player) {
	  return extendedP.filter((a) => a[0] == player.id) != null ? extendedP.filter((a) => a[0] == player.id)[0][eP.GK] : null;
  }
  
  function setGK(player, value) {
	  extendedP.filter((a) => a[0] == player.id).forEach((player) => player[eP.GK] = value);
  }
  
  function getMute(player) {
	  return extendedP.filter((a) => a[0] == player.id) != null ? extendedP.filter((a) => a[0] == player.id)[0][eP.MUTE] : null;
  }
  
  function setMute(player, value) {
	  extendedP.filter((a) => a[0] == player.id).forEach((player) => player[eP.MUTE] = value);
  }
  
  function updateRoleOnPlayerIn() { // Se a lista de specs for = 0, inicia o jogo.
	  updateTeams()
	  if (inChooseMode) {
	  if (players.length == 6) {
	  loadMap(Mapa, scoreMapa, tempoMapa);
	  }
	  getSpecList(teamR.length <= teamB.length ? teamR[0] : teamB[0]);
	  }
	  balanceTeams();	
  }
  
  function updateRoleOnPlayerOut() { // Detectar ragequit e atualizar times.
	  updateTeams();
	  if (room.getScores() != null) {
	  var scores = room.getScores();
	  if (players.length >= 2 * maxTeamSize && scores.time >= (5 / 6) * game.scores.timeLimit && teamR.length != teamB.length) {
	  if (teamR.length < teamB.length) {
	  if (scores.blue - scores.red == 2) {
	  endGame(Team.BLUE);
	  room.sendAnnouncement("Ragequit, jogo finalizado");
	  setTimeout(() => { room.stopGame(); }, 100);
	  return;
	  }
	  }
	  else {
	  if (scores.red - scores.blue == 2) {
	  endGame(Team.RED);
	  room.sendAnnouncement("Ragequit, jogo finalizado");
	  setTimeout(() => { room.stopGame(); }, 100);
	  return;
	  }
	  }
	  }
	  }
	  if (inChooseMode) {
	  if (players.length < 6) {
	  loadMap(Mapa, scoreMapa, tempoMapa);
	  }
	  if (teamR.length == 0 || teamB.length == 0) {
	  teamR.length == 0 ? room.setPlayerTeam(teamS[0].id, Team.RED) : room.setPlayerTeam(teamS[0].id, Team.BLUE);
	  return;
	  }
	  if (Math.abs(teamR.length - teamB.length) == teamS.length) {
	  room.sendAnnouncement("Nenhum player restou, completando equipes e iniciando ...");
	  deactivateChooseMode();
	  resumeGame();
	  var b = teamS.length;
	  if (teamR.length > teamB.length) {
	  for (var i = 0; i < b; i++) {
	  setTimeout(() => { room.setPlayerTeam(teamS[0].id, Team.BLUE); }, 5 * i);
	  }
	  }
	  else {
	  for (var i = 0; i < b; i++) {
	  setTimeout(() => { room.setPlayerTeam(teamS[0].id, Team.RED); }, 5 * i);
	  }
	  }
	  return;
	  }
	  if (streak == 0 && room.getScores() == null) {
	  if (Math.abs(teamR.length - teamB.length) == 2) { // se alguém saiu de um time tem 2 jogadores a mais que o outro.
	  room.sendAnnouncement(" Equilibrando equipes... ");
	  teamR.length > teamB.length ? room.setPlayerTeam(teamR[teamR.length - 1].id, Team.SPECTATORS) : room.setPlayerTeam(teamB[teamB.length - 1].id, Team.SPECTATORS); }
	  }
	  if (teamR.length == teamB.length && teamS.length < 2) {
	  deactivateChooseMode();
	  resumeGame();
	  return;
	  }
	  capLeft ? choosePlayer() : getSpecList(teamR.length <= teamB.length ? teamR[0] : teamB[0]);
	  }
	  balanceTeams();
  }
  
  function balanceTeams() { // Função que balançea os times, corrigi times que estão com player a menos.
	  if (!inChooseMode) {
		  if (players.length == 1 && teamR.length == 0) { // 1 player
			  quickRestart();
			  loadMap(Mapa, scoreMapa, tempoMapa);
			  room.setPlayerTeam(players[0].id, Team.RED);
		  }
		  else if (Math.abs(teamR.length - teamB.length) == teamS.length && teamS.length > 0) { // spec players supply required players
			  const n = Math.abs(teamR.length - teamB.length);
			  if (teamR.length > teamB.length) {
				  for (var i = 0; i < n; i++) {
					  room.setPlayerTeam(teamS[i].id, Team.BLUE);
				  }
			  }
			  else {
				  for (var i = 0; i < n; i++) {
					  room.setPlayerTeam(teamS[i].id, Team.RED);
				  }
			  }
		  }
		  else if (Math.abs(teamR.length - teamB.length) > teamS.length) { //no sufficient players
			  const n = Math.abs(teamR.length - teamB.length);
			  if (players.length == 1) {
				  quickRestart();
				  loadMap(Mapa, scoreMapa, tempoMapa);
				  room.setPlayerTeam(players[0].id, Team.RED);
				  return;
			  }
			  else if (players.length == 6) {
				  quickRestart();
				  
			  }
			  if (players.length == maxTeamSize * 2 - 1) {
				  allReds = [];
				  allBlues = [];
			  }
			  if (teamR.length > teamB.length) {
				  for (var i = 0; i < n; i++) {
					  room.setPlayerTeam(teamR[teamR.length - 1 - i].id, Team.SPECTATORS);
				  }
			  }
			  else {
				  for (var i = 0; i < n; i++) {
					  room.setPlayerTeam(teamB[teamB.length - 1 - i].id, Team.SPECTATORS);
				  }
			  }
		  }
		  else if (Math.abs(teamR.length - teamB.length) < teamS.length && teamR.length != teamB.length) { //choose mode
			  room.pauseGame(true)
			  activateChooseMode();
			  choosePlayer();
		  }
		  else if (teamS.length >= 2 && teamR.length == teamB.length && teamR.length < maxTeamSize) { //2 in red 2 in blue and 2 or more spec
			  if (teamR.length == 2) {
				  quickRestart();
				  if (!teamS.length == 2){
					  
				  }
			  }
			  topBtn();
		  }
	  }
  }
  
  function alterar_cor(player, message){
	if (message.substr(0, 5) == "!cor " && verificados.includes(player.name) != false && L1.includes(player.name) === true) {
	if(cL1.length == 1 && message.length <= 11){ 
	cL1.splice(cL1.indexOf(message)) + cL1.push('0x'+ message.substr(5)) + room.sendAnnouncement(`${cor_definida}` + message.substr(5), player.id, cL1)}}

	if (message.substr(0, 5) == "!cor " && verificados.includes(player.name) != false && L2.includes(player.name) === true) {
	if(cL2.length == 1 && message.length <= 11){ 
	cL2.splice(cL2.indexOf(message)) + cL2.push('0x'+ message.substr(5)) + room.sendAnnouncement(`${cor_definida}` + message.substr(5), player.id, cL2)}}
	
	if (message.substr(0, 5) == "!cor " && verificados.includes(player.name) != false && L3.includes(player.name) === true) {
	if(cL3.length == 1 && message.length <= 11){ 
	cL3.splice(cL3.indexOf(message)) + cL3.push('0x'+ message.substr(5)) + room.sendAnnouncement(`${cor_definida}` + message.substr(5), player.id, cL3)}}
	
	if (message.substr(0, 5) == "!cor " && verificados.includes(player.name) != false && L4.includes(player.name) === true) {
	if(cL4.length == 1 && message.length <= 11){ 
	cL4.splice(cL4.indexOf(message)) + cL4.push('0x'+ message.substr(5)) + room.sendAnnouncement(`${cor_definida}` + message.substr(5), player.id, cL4)}}
	
	if (message.substr(0, 5) == "!cor " && verificados.includes(player.name) != false && L5.includes(player.name) === true) {
	if(cL5.length == 1 && message.length <= 11){ 
	cL5.splice(cL5.indexOf(message)) + cL5.push('0x'+ message.substr(5)) + room.sendAnnouncement(`${cor_definida}` + message.substr(5), player.id, cL5)}}

	if (message.substr(0, 5) == "!cor " && verificados.includes(player.name) != false && L6.includes(player.name) === true) {
		if(cL6.length == 1 && message.length <= 11){ 
		cL6.splice(cL6.indexOf(message)) + cL6.push('0x'+ message.substr(5)) + room.sendAnnouncement(`${cor_definida}` + message.substr(5), player.id, cL6)}}

		if (message.substr(0, 5) == "!cor " && verificados.includes(player.name) != false && L7.includes(player.name) === true) {
			if(cL7.length == 1 && message.length <= 11){ 
			cL7.splice(cL7.indexOf(message)) + cL7.push('0x'+ message.substr(5)) + room.sendAnnouncement(`${cor_definida}` + message.substr(5), player.id, cL7)}}

			if (message.substr(0, 5) == "!cor " && verificados.includes(player.name) != false && L8.includes(player.name) === true) {
				if(cL8.length == 1 && message.length <= 11){ 
				cL8.splice(cL8.indexOf(message)) + cL8.push('0x'+ message.substr(5)) + room.sendAnnouncement(`${cor_definida}` + message.substr(5), player.id, cL8)}}

				if (message.substr(0, 5) == "!cor " && verificados.includes(player.name) != false && L10.includes(player.name) === true) {
					if(cL10.length == 1 && message.length <= 11){ 
					cL10.splice(cL10.indexOf(message)) + cL10.push('0x'+ message.substr(5)) + room.sendAnnouncement(`${cor_definida}` + message.substr(5), player.id, cL10)}}

					if (message.substr(0, 5) == "!cor " && verificados.includes(player.name) != false && L11.includes(player.name) === true) {
						if(cL11.length == 1 && message.length <= 11){ 
						cL11.splice(cL11.indexOf(message)) + cL11.push('0x'+ message.substr(5)) + room.sendAnnouncement(`${cor_definida}` + message.substr(5), player.id, cL11)}}

						if (message.substr(0, 5) == "!cor " && verificados.includes(player.name) != false && L12.includes(player.name) === true) {
							if(cL12.length == 1 && message.length <= 11){ 
							cL12.splice(cL12.indexOf(message)) + cL12.push('0x'+ message.substr(5)) + room.sendAnnouncement(`${cor_definida}` + message.substr(5), player.id, cL12)}}

							if (message.substr(0, 5) == "!cor " && verificados.includes(player.name) != false && L13.includes(player.name) === true) {
								if(cL13.length == 1 && message.length <= 11){ 
								cL13.splice(cL13.indexOf(message)) + cL13.push('0x'+ message.substr(5)) + room.sendAnnouncement(`${cor_definida}` + message.substr(5), player.id, cL13)}}

								if (message.substr(0, 5) == "!cor " && verificados.includes(player.name) != false && L14.includes(player.name) === true) {
									if(cL14.length == 1 && message.length <= 11){ 
									cL14.splice(cL14.indexOf(message)) + cL14.push('0x'+ message.substr(5)) + room.sendAnnouncement(`${cor_definida}` + message.substr(5), player.id, cL14)}}

									if (message.substr(0, 5) == "!cor " && verificados.includes(player.name) != false && L15.includes(player.name) === true) {
										if(cL15.length == 1 && message.length <= 11){ 
										cL15.splice(cL15.indexOf(message)) + cL15.push('0x'+ message.substr(5)) + room.sendAnnouncement(`${cor_definida}` + message.substr(5), player.id, cL15)}}
	
								}

	

function alterar_fonte(player, message){
	if (message.substr(0, 7) == "!fonte " && verificados.includes(player.name) != false && L1.includes(player.name) === true) { 
	if(fL1.length == 1 && message.substr(7) === fontsdisp[0] || message.substr(7) === fontsdisp[1] || message.substr(7) === fontsdisp[2] || message.substr(7) === fontsdisp[3] || message.substr(7) === fontsdisp[4]){
	fL1.splice(fL1.indexOf(message)) + fL1.push(message.substr(7)) + room.sendAnnouncement(`${fonte_definida}` + message.substr(7), player.id)}
	else { room.sendAnnouncement(`${erroapi} ${fontsdisp}`, player.id) }}
	
	if (message.substr(0, 7) == "!fonte " && verificados.includes(player.name) != false && L2.includes(player.name) === true) { 
	if(fL2.length == 1 && message.substr(7) === fontsdisp[0] || message.substr(7) === fontsdisp[1] || message.substr(7) === fontsdisp[2] || message.substr(7) === fontsdisp[3] || message.substr(7) === fontsdisp[4]){ 
	fL2.splice(fL2.indexOf(message)) + fL2.push(message.substr(7)) + room.sendAnnouncement(`${fonte_definida}` + message.substr(7), player.id)}
	else { room.sendAnnouncement(`${erroapi} ${fontsdisp}`, player.id) }}
	
	if (message.substr(0, 7) == "!fonte " && verificados.includes(player.name) != false && L3.includes(player.name) === true) { 
	if(fL3.length == 1 && message.substr(7) === fontsdisp[0] || message.substr(7) === fontsdisp[1] || message.substr(7) === fontsdisp[2] || message.substr(7) === fontsdisp[3] || message.substr(7) === fontsdisp[4]){ 
	fL3.splice(fL3.indexOf(message)) + fL3.push(message.substr(7)) + room.sendAnnouncement(`${fonte_definida}` + message.substr(7), player.id)}
	else { room.sendAnnouncement(`${erroapi} ${fontsdisp}`, player.id) }}
	
	if (message.substr(0, 7) == "!fonte " && verificados.includes(player.name) != false && L4.includes(player.name) === true) { 
	if(fL4.length == 1 && message.substr(7) === fontsdisp[0] || message.substr(7) === fontsdisp[1] || message.substr(7) === fontsdisp[2] || message.substr(7) === fontsdisp[3] || message.substr(7) === fontsdisp[4]){ 
	fL4.splice(fL4.indexOf(message)) + fL4.push(message.substr(7)) + room.sendAnnouncement(`${fonte_definida}` + message.substr(7), player.id)}
	else { room.sendAnnouncement(`${erroapi} ${fontsdisp}`, player.id) }}
	
	if (message.substr(0, 7) == "!fonte " && verificados.includes(player.name) != false && L5.includes(player.name) === true) { 
	if(fL5.length == 1 && message.substr(7) === fontsdisp[0] || message.substr(7) === fontsdisp[1] || message.substr(7) === fontsdisp[2] || message.substr(7) === fontsdisp[3] || message.substr(7) === fontsdisp[4]){ 
	fL5.splice(fL5.indexOf(message)) + fL5.push(message.substr(7)) + room.sendAnnouncement(`${fonte_definida}` + message.substr(7), player.id)}
	else { room.sendAnnouncement(`${erroapi} ${fontsdisp}`, player.id) }}

	if (message.substr(0, 7) == "!fonte " && verificados.includes(player.name) != false && L6.includes(player.name) === true) { 
		if(fL6.length == 1 && message.substr(7) === fontsdisp[0] || message.substr(7) === fontsdisp[1] || message.substr(7) === fontsdisp[2] || message.substr(7) === fontsdisp[3] || message.substr(7) === fontsdisp[4]){ 
		fL6.splice(fL6.indexOf(message)) + fL6.push(message.substr(7)) + room.sendAnnouncement(`${fonte_definida}` + message.substr(7), player.id)}
		else { room.sendAnnouncement(`${erroapi} ${fontsdisp}`, player.id) }}

		if (message.substr(0, 7) == "!fonte " && verificados.includes(player.name) != false && L7.includes(player.name) === true) { 
			if(fL7.length == 1 && message.substr(7) === fontsdisp[0] || message.substr(7) === fontsdisp[1] || message.substr(7) === fontsdisp[2] || message.substr(7) === fontsdisp[3] || message.substr(7) === fontsdisp[4]){ 
			fL7.splice(fL7.indexOf(message)) + fL7.push(message.substr(7)) + room.sendAnnouncement(`${fonte_definida}` + message.substr(7), player.id)}
			else { room.sendAnnouncement(`${erroapi} ${fontsdisp}`, player.id) }}

			if (message.substr(0, 7) == "!fonte " && verificados.includes(player.name) != false && L8.includes(player.name) === true) { 
				if(fL8.length == 1 && message.substr(7) === fontsdisp[0] || message.substr(7) === fontsdisp[1] || message.substr(7) === fontsdisp[2] || message.substr(7) === fontsdisp[3] || message.substr(7) === fontsdisp[4]){ 
				fL8.splice(fL8.indexOf(message)) + fL8.push(message.substr(7)) + room.sendAnnouncement(`${fonte_definida}` + message.substr(7), player.id)}
				else { room.sendAnnouncement(`${erroapi} ${fontsdisp}`, player.id) }}

				if (message.substr(0, 7) == "!fonte " && verificados.includes(player.name) != false && L10.includes(player.name) === true) { 
					if(fL10.length == 1 && message.substr(7) === fontsdisp[0] || message.substr(7) === fontsdisp[1] || message.substr(7) === fontsdisp[2] || message.substr(7) === fontsdisp[3] || message.substr(7) === fontsdisp[4]){ 
					fL10.splice(fL10.indexOf(message)) + fL10.push(message.substr(7)) + room.sendAnnouncement(`${fonte_definida}` + message.substr(7), player.id)}
					else { room.sendAnnouncement(`${erroapi} ${fontsdisp}`, player.id) }}

					if (message.substr(0, 7) == "!fonte " && verificados.includes(player.name) != false && L11.includes(player.name) === true) { 
						if(fL11.length == 1 && message.substr(7) === fontsdisp[0] || message.substr(7) === fontsdisp[1] || message.substr(7) === fontsdisp[2] || message.substr(7) === fontsdisp[3] || message.substr(7) === fontsdisp[4]){ 
						fL11.splice(fL11.indexOf(message)) + fL11.push(message.substr(7)) + room.sendAnnouncement(`${fonte_definida}` + message.substr(7), player.id)}
						else { room.sendAnnouncement(`${erroapi} ${fontsdisp}`, player.id) }}

						if (message.substr(0, 7) == "!fonte " && verificados.includes(player.name) != false && L12.includes(player.name) === true) { 
							if(fL12.length == 1 && message.substr(7) === fontsdisp[0] || message.substr(7) === fontsdisp[1] || message.substr(7) === fontsdisp[2] || message.substr(7) === fontsdisp[3] || message.substr(7) === fontsdisp[4]){ 
							fL12.splice(fL12.indexOf(message)) + fL12.push(message.substr(7)) + room.sendAnnouncement(`${fonte_definida}` + message.substr(7), player.id)}
							else { room.sendAnnouncement(`${erroapi} ${fontsdisp}`, player.id) }}

							if (message.substr(0, 7) == "!fonte " && verificados.includes(player.name) != false && L13.includes(player.name) === true) { 
								if(fL13.length == 1 && message.substr(7) === fontsdisp[0] || message.substr(7) === fontsdisp[1] || message.substr(7) === fontsdisp[2] || message.substr(7) === fontsdisp[3] || message.substr(7) === fontsdisp[4]){ 
								fL13.splice(fL13.indexOf(message)) + fL13.push(message.substr(7)) + room.sendAnnouncement(`${fonte_definida}` + message.substr(7), player.id)}
								else { room.sendAnnouncement(`${erroapi} ${fontsdisp}`, player.id) }}

								if (message.substr(0, 7) == "!fonte " && verificados.includes(player.name) != false && L14.includes(player.name) === true) { 
									if(fL14.length == 1 && message.substr(7) === fontsdisp[0] || message.substr(7) === fontsdisp[1] || message.substr(7) === fontsdisp[2] || message.substr(7) === fontsdisp[3] || message.substr(7) === fontsdisp[4]){ 
									fL14.splice(fL14.indexOf(message)) + fL14.push(message.substr(7)) + room.sendAnnouncement(`${fonte_definida}` + message.substr(7), player.id)}
									else { room.sendAnnouncement(`${erroapi} ${fontsdisp}`, player.id) }}

									if (message.substr(0, 7) == "!fonte " && verificados.includes(player.name) != false && L15.includes(player.name) === true) { 
										if(fL15.length == 1 && message.substr(7) === fontsdisp[0] || message.substr(7) === fontsdisp[1] || message.substr(7) === fontsdisp[2] || message.substr(7) === fontsdisp[3] || message.substr(7) === fontsdisp[4]){ 
										fL15.splice(fL15.indexOf(message)) + fL15.push(message.substr(7)) + room.sendAnnouncement(`${fonte_definida}` + message.substr(7), player.id)}
										else { room.sendAnnouncement(`${erroapi} ${fontsdisp}`, player.id) }}
}

  
  function choosePlayer() { // Função para que os capitães possam escolher.
	  clearTimeout(timeOutCap);
	  if (teamR.length <= teamB.length && teamR.length != 0) {
	  room.sendAnnouncement("Escolha o número disponivel ou use random, bottom e/ou top", teamR[0].id);
	  timeOutCap = setTimeout(function (player) { room.sendAnnouncement("Seja rápido @" + player.name + ", restam " + Number.
	  parseInt(chooseTime / 2) + " segundos para escolher !"); timeOutCap = setTimeout(function (player) { room.
	  kickPlayer(player.id, "Não escolheu a tempo, ou esteve AFK!", false); }, chooseTime * 500, teamR[0]); }, chooseTime * 1000, teamR[0]);
	  }
	  else if (teamB.length < teamR.length && teamB.length != 0) {
	  room.sendAnnouncement("Escolha o número disponivel ou use random, bottom e/ou top", teamB[0].
	  id); timeOutCap = setTimeout(function (player) { room.sendAnnouncement("Seja rápido @" + player.name + ", restam " + Number.
	  parseInt(chooseTime / 2) + " segundos para escolher !", player.id); timeOutCap = setTimeout(function (player) { room.
	  kickPlayer(player.id, "Não escolheu a tempo, ou esteva AFK!", false); }, chooseTime * 500, teamB[0]); }, chooseTime * 1000, teamB[0]);
	  }
	  if (teamR.length != 0 && teamB.length != 0) getSpecList(teamR.length <= teamB.length ? teamR[0] : teamB[0]);
  }
  
  function getSpecList(player) {
    var cstm = "[PV] Jogadores : ";
    for (var i = 0; i < teamS.length; i++) {
        if (140 - cstm.length < (teamS[i].name + "[" + (i + 1) + "], ").length) {
            room.sendAnnouncement(cstm, player.id);
            cstm = "... ";
        }
        cstm += teamS[i].name + "[" + (i + 1) + "], ";
    }
    cstm = cstm.substring(0, cstm.length - 2);
    cstm += ".";
    room.sendAnnouncement(cstm, player.id);
}


function getLastTouchOfTheBall() {
	const ballPosition = room.getBallPosition();
	updateTeams();
	for (var i = 0; i < players.length; i++) {
	if (players[i].position != null) {
	var distanceToBall = pointDistance(players[i].position, ballPosition);
	if (distanceToBall < triggerDistance) {
	!activePlay ? activePlay = true : null;
	if (lastTeamTouched == players[i].team && lastPlayersTouched[0] != null && lastPlayersTouched[0].id != players[i].id) {
	lastPlayersTouched[1] = lastPlayersTouched[0];
	lastPlayersTouched[0] = players[i];
	}
	lastTeamTouched = players[i].team;
	}
	}
	}
	}
	
	function getStats() { // gives possession, ball speed and GK of each team
	if (activePlay) {
	updateTeams();
	lastTeamTouched == Team.RED ? Rposs++ : Bposs++;
	var ballPosition = room.getBallPosition();
	point[1] = point[0];
	point[0] = ballPosition;
	ballSpeed = (pointDistance(point[0], point[1]) * 60 * 60 * 60)/15000;
	var k = [-1, Infinity];
	for (var i = 0; i < teamR.length; i++) {
	if (teamR[i].position.x < k[1]) {
	k[0] = teamR[i];
	k[1] = teamR[i].position.x;
	}
	}
	k[0] != -1 ? setGK(k[0], getGK(k[0]) + 1) : null;
	k = [-1, -Infinity];
	for (var i = 0; i < teamB.length; i++) {
	if (teamB[i].position.x > k[1]) {
	k[0] = teamB[i];
	k[1] = teamB[i].position.x;
	}
	}
	k[0] != -1 ? setGK(k[0], getGK(k[0]) + 1) : null;
	findGK();
	}
	}
	
	function updateStats() {
	if (players.length >= 2 * maxTeamSize && (game.scores.time >= (5 / 6) * game.scores.timeLimit || game.scores.red == game.scores.scoreLimit || game.scores.blue == game.scores.scoreLimit) && allReds.length >= maxTeamSize && allBlues.length >= maxTeamSize) {
	var stats;
	for (var i = 0; i < allReds.length; i++) {
	localStorage.getItem(getAuth(allReds[i])) ? stats = JSON.parse(localStorage.getItem(getAuth(allReds[i]))) : stats = [0, 0, 0, 0, "0.00", 0, 0, 0, 0, "0.00", "player", allReds[i].name];
	stats[Ss.GA]++;
	lastWinner == Team.RED ? stats[Ss.WI]++ : lastWinner == Team.BLUE ? stats[Ss.LS]++ : stats[Ss.DR]++;
	stats[Ss.WR] = (100 * stats[Ss.WI] / stats[Ss.GA]).toPrecision(3);
	localStorage.setItem(getAuth(allReds[i]), JSON.stringify(stats));
	}
	for (var i = 0; i < allBlues.length; i++) {
	localStorage.getItem(getAuth(allBlues[i])) ? stats = JSON.parse(localStorage.getItem(getAuth(allBlues[i]))) : stats = [0, 0, 0, 0, "0.00", 0, 0, 0, 0, "0.00", "player", allBlues[i].name];
	stats[Ss.GA]++;
	lastWinner == Team.BLUE ? stats[Ss.WI]++ : lastWinner == Team.RED ? stats[Ss.LS]++ : stats[Ss.DR]++;
	stats[Ss.WR] = (100 * stats[Ss.WI] / stats[Ss.GA]).toPrecision(3);
	localStorage.setItem(getAuth(allBlues[i]), JSON.stringify(stats));
	}
	for (var i = 0; i < game.goals.length; i++) {
	if (game.goals[i].striker != null) {
	if ((allBlues.concat(allReds)).findIndex((player) => player.id == game.goals[i].striker.id) != -1) {
	stats = JSON.parse(localStorage.getItem(getAuth(game.goals[i].striker)));
	stats[Ss.GL]++;
	localStorage.setItem(getAuth(game.goals[i].striker), JSON.stringify(stats));
	}
	}
	if (game.goals[i].assist != null) {
	if ((allBlues.concat(allReds)).findIndex((player) => player.name == game.goals[i].assist.name) != -1) {
	stats = JSON.parse(localStorage.getItem(getAuth(game.goals[i].assist)));
	stats[Ss.AS]++;
	localStorage.setItem(getAuth(game.goals[i].assist), JSON.stringify(stats));
	}
	}
	}
	if (allReds.findIndex((player) => player.id == GKList[0].id) != -1) {
	stats = JSON.parse(localStorage.getItem(getAuth(GKList[0])));
	stats[Ss.GK]++;
	game.scores.blue == 0 ? stats[Ss.CS]++ : null;
	stats[Ss.CP] = (100 * stats[Ss.CS] / stats[Ss.GK]).toPrecision(3);
	localStorage.setItem(getAuth(GKList[0]), JSON.stringify(stats));
	}
	if (allBlues.findIndex((player) => player.id == GKList[1].id) != -1) {
	stats = JSON.parse(localStorage.getItem(getAuth(GKList[1])));
	stats[Ss.GK]++;
	game.scores.red == 0 ? stats[Ss.CS]++ : null;
	stats[Ss.CP] = (100 * stats[Ss.CS] / stats[Ss.GK]).toPrecision(3);
	localStorage.setItem(getAuth(GKList[1]), JSON.stringify(stats));
	}
	}
	}
	
	function findGK() {
	var tab = [[-1,""], [-1,""]];
	for (var i = 0; i < extendedP.length ; i++) {
	if (room.getPlayer(extendedP[i][eP.ID]) != null && room.getPlayer(extendedP[i][eP.ID]).team == Team.RED) {
	if (tab[0][0] < extendedP[i][eP.GK]) {
	tab[0][0] = extendedP[i][eP.GK];
	tab[0][1] = room.getPlayer(extendedP[i][eP.ID]);
	}
	}
	else if (room.getPlayer(extendedP[i][eP.ID]) != null && room.getPlayer(extendedP[i][eP.ID]).team == Team.BLUE) {
	if (tab[1][0] < extendedP[i][eP.GK]) {
	tab[1][0] = extendedP[i][eP.GK];
	tab[1][1] = room.getPlayer(extendedP[i][eP.ID]);
	}
	}
	}
	GKList = [tab[0][1], tab[1][1]];
	}

function isBlacklisted(player){
    return blacklist.filter(b => b.ipv4 == player.ipv4 || b.Auth == player.auth || b.Conn == player.conn).length > 0;
}

  function getDatehoras(){
	let data = new Date(),
	dia=data.getDate().toString().padStart(2, '0'),
	mes=(data.getMonth()+1).toString().padStart(2, '0'),
	horas=data.getHours().toString().padStart(2, '0'),
	minutos=data.getMinutes().toString().padStart(2, '0');
	return `${horas}:${minutos}`;
}

function getDateInfo(){
	let data = new Date(),
	dia=data.getDate().toString().padStart(2, '0'),
	mes=(data.getMonth()+1).toString().padStart(2, '0'),
	ano=data.getFullYear(),
	horas=data.getHours().toString().padStart(2, '0'),
	minutos=data.getMinutes().toString().padStart(2, '0');
	segundos=data.getSeconds().toString().padStart(2, '0');
	return `${dia} do ${mes} de ${ano}, ás ${horas}:${minutos}:${segundos}`;
}

function dataehora(){
	let data = new Date(),
	dia=data.getDate().toString().padStart(2, '0'),
	mes=(data.getMonth()+1).toString().padStart(2, '0'),
	ano=data.getFullYear(),
	horas=data.getHours().toString().padStart(2, '0'),
	minutos=data.getMinutes().toString().padStart(2, '0');
	segundos=data.getSeconds().toString().padStart(2, '0');
	return `${dia}/${mes} de ${ano}, ás ${horas}:${minutos} e ${segundos} segundos`;
}


function multiplas_abas(player){
conns.push([player.id,player.name,player.auth,player.conn])
playerConn[player.id] = player.conn; 
if (room.getPlayerList().filter((p) => playerConn[p.id] == player.conn).length > 1) 
room.kickPlayer(room.getPlayerList().filter((p) => playerConn[p.id] == player.conn)[1].id, "Você já está nessa sala em outra aba, feche a outra aba.", false)
}

function playerChat(player, message) {
	var playerTargetIndex = players.findIndex(
		(p) => p.name.replaceAll(' ', '_') == msgArray[0].substring(2)
	);
	if (playerTargetIndex == -1) {
		room.sendAnnouncement(
			"Player inválido, verifique se o nome digitado está correto.",
			player.id,
			Cor.Vermelho,
			'bold',
		);
		return false;
	}
	var playerTarget = players[playerTargetIndex];
	if (player.id == playerTarget.id) {
		room.sendAnnouncement(
			"Você não pode enviar um PV para si mesmo!",
			player.id,
			Cor.Vermelho,
			'bold',
			null
		);
		return false;
	}
	var messageFrom = `[Privado com ${playerTarget.name}] ${player.name}: ${msgArray.slice(1).join(' ')}`

	var messageTo = `[Privado com ${player.name}] ${player.name}: ${msgArray.slice(1).join(' ')}`

	room.sendAnnouncement(
		messageFrom,
		player.id,
		Cor.Azulclaro,
		Normal,
		1
	);
	room.sendAnnouncement(
		messageTo,
		playerTarget.id,
		Cor.Azulclaro,
		Normal,
		1
	);
}

room.onGameTick = function () {
    checkTime()
    getLastTouchOfTheBall()
    getStats()
    handleInactivity()
	lastScores = room.getScores()
}